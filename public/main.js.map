<<<<<<< HEAD
{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/components/add-movie-form/add-movie-form.component.css","webpack:///./src/app/components/add-movie-form/add-movie-form.component.html","webpack:///./src/app/components/add-movie-form/add-movie-form.component.ts","webpack:///./src/app/components/admin/admin.component.css","webpack:///./src/app/components/admin/admin.component.html","webpack:///./src/app/components/admin/admin.component.ts","webpack:///./src/app/components/auth/admin.guard.ts","webpack:///./src/app/components/auth/auth.guard.ts","webpack:///./src/app/components/auth/auth.interceptor.ts","webpack:///./src/app/components/book-movies/book-movies.component.css","webpack:///./src/app/components/book-movies/book-movies.component.html","webpack:///./src/app/components/book-movies/book-movies.component.ts","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.css","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.html","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.ts","webpack:///./src/app/components/common/validators/formArray.validators.ts","webpack:///./src/app/components/common/validators/movie.name.validators.ts","webpack:///./src/app/components/company-information/company-information.component.css","webpack:///./src/app/components/company-information/company-information.component.html","webpack:///./src/app/components/company-information/company-information.component.ts","webpack:///./src/app/components/edit-movie-form/edit-movie-form.component.css","webpack:///./src/app/components/edit-movie-form/edit-movie-form.component.html","webpack:///./src/app/components/edit-movie-form/edit-movie-form.component.ts","webpack:///./src/app/components/edit-profile/edit-profile.component.css","webpack:///./src/app/components/edit-profile/edit-profile.component.html","webpack:///./src/app/components/edit-profile/edit-profile.component.ts","webpack:///./src/app/components/footer/footer.component.css","webpack:///./src/app/components/footer/footer.component.html","webpack:///./src/app/components/footer/footer.component.ts","webpack:///./src/app/components/genre/genre.component.css","webpack:///./src/app/components/genre/genre.component.html","webpack:///./src/app/components/genre/genre.component.ts","webpack:///./src/app/components/header/header.component.css","webpack:///./src/app/components/header/header.component.html","webpack:///./src/app/components/header/header.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/message/message.component.css","webpack:///./src/app/components/message/message.component.html","webpack:///./src/app/components/message/message.component.ts","webpack:///./src/app/components/movie/movie.component.css","webpack:///./src/app/components/movie/movie.component.html","webpack:///./src/app/components/movie/movie.component.ts","webpack:///./src/app/components/navigation-bar/navigation-bar.component.css","webpack:///./src/app/components/navigation-bar/navigation-bar.component.html","webpack:///./src/app/components/navigation-bar/navigation-bar.component.ts","webpack:///./src/app/components/not-found-page/not-found-page.component.css","webpack:///./src/app/components/not-found-page/not-found-page.component.html","webpack:///./src/app/components/not-found-page/not-found-page.component.ts","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.css","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.html","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/components/search-bar/search-bar.component.css","webpack:///./src/app/components/search-bar/search-bar.component.html","webpack:///./src/app/components/search-bar/search-bar.component.ts","webpack:///./src/app/components/ticket/ticket.component.css","webpack:///./src/app/components/ticket/ticket.component.html","webpack:///./src/app/components/ticket/ticket.component.ts","webpack:///./src/app/components/user-profile/user-profile.component.css","webpack:///./src/app/components/user-profile/user-profile.component.html","webpack:///./src/app/components/user-profile/user-profile.component.ts","webpack:///./src/app/services/authentication.service.ts","webpack:///./src/app/services/movies.service.ts","webpack:///./src/app/services/ticket.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<header></header>\\n<navigation-bar></navigation-bar>\\n<router-outlet></router-outlet>\\n<footer></footer>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'GoldenCinema';\n}\n","import { Component } from \"@angular/core\";\n// Built-in imports\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { HttpModule } from \"@angular/http\";\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\n\n// Component imports\nimport { AppComponent } from \"./app.component\";\nimport { SearchBarComponent } from \"./components/search-bar/search-bar.component\";\nimport { NavigationBarComponent } from \"./components/navigation-bar/navigation-bar.component\";\nimport { NowShowingMovieListComponent } from \"./components/now-showing-movie-list/now-showing-movie-list.component\";\nimport { ComingSoonMovieListComponent } from \"./components/coming-soon-movie-list/coming-soon-movie-list.component\";\nimport { FooterComponent } from \"./components/footer/footer.component\";\nimport { HeaderComponent } from \"./components/header/header.component\";\nimport { GenreComponent } from \"./components/genre/genre.component\";\nimport { HomeComponent } from \"./components/home/home.component\";\nimport { CompanyInformationComponent } from \"./components/company-information/company-information.component\";\nimport { NotFoundPageComponent } from \"./components/not-found-page/not-found-page.component\";\nimport { AddMovieFormComponent } from \"./components/add-movie-form/add-movie-form.component\";\nimport { LoginComponent } from \"./components/login/login.component\";\nimport { RegisterComponent } from \"./components/register/register.component\";\nimport { EditMovieFormComponent } from \"./components/edit-movie-form/edit-movie-form.component\";\nimport { MovieComponent } from \"./components/movie/movie.component\";\nimport { AdminComponent } from \"./components/admin/admin.component\";\nimport { MessageComponent } from \"./components/message/message.component\";\nimport { BookMoviesComponent } from \"./components/book-movies/book-movies.component\";\nimport { UserProfileComponent } from \"./components/user-profile/user-profile.component\";\n\n// Service imports\nimport { AuthenticationService } from \"./services/authentication.service\";\nimport { MoviesService } from \"./services/movies.service\";\nimport { TicketService } from \"./services/ticket.service\";\n\n// Route imports\nimport { RoutingModule } from \"./app.routing\";\n\n// Other imports\nimport { AuthGuard } from \"./components/auth/auth.guard\";\nimport { AdminGuard } from \"./components/auth/admin.guard\";\nimport { AuthInterceptor } from \"./components/auth/auth.interceptor\";\nimport { MyDatePickerModule } from \"mydatepicker\";\nimport { TicketComponent } from \"./components/ticket/ticket.component\";\nimport { EditProfileComponent } from \"./components/edit-profile/edit-profile.component\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SearchBarComponent,\n    NavigationBarComponent,\n    NowShowingMovieListComponent,\n    ComingSoonMovieListComponent,\n    FooterComponent,\n    HeaderComponent,\n    GenreComponent,\n    HomeComponent,\n    CompanyInformationComponent,\n    AddMovieFormComponent,\n    NotFoundPageComponent,\n    LoginComponent,\n    RegisterComponent,\n    EditMovieFormComponent,\n    MovieComponent,\n    UserProfileComponent,\n    AdminComponent,\n    MessageComponent,\n    BookMoviesComponent,\n    TicketComponent,\n    EditProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    HttpModule,\n    RoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MyDatePickerModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    },\n    AuthenticationService,\n    AuthGuard,\n    AdminGuard,\n    MoviesService,\n    TicketService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { BookMoviesComponent } from \"./components/book-movies/book-movies.component\";\nimport { SearchBarComponent } from \"./components/search-bar/search-bar.component\";\nimport { MessageComponent } from \"./components/message/message.component\";\nimport { AdminComponent } from \"./components/admin/admin.component\";\nimport { MovieComponent } from \"./components/movie/movie.component\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { GenreComponent } from \"./components/genre/genre.component\";\nimport { HomeComponent } from \"./components/home/home.component\";\nimport { CompanyInformationComponent } from \"./components/company-information/company-information.component\";\nimport { NotFoundPageComponent } from \"./components/not-found-page/not-found-page.component\";\nimport { AddMovieFormComponent } from \"./components/add-movie-form/add-movie-form.component\";\nimport { RegisterComponent } from \"./components/register/register.component\";\nimport { EditMovieFormComponent } from \"./components/edit-movie-form/edit-movie-form.component\";\nimport { LoginComponent } from \"./components/login/login.component\";\nimport { UserProfileComponent } from \"./components/user-profile/user-profile.component\";\nimport { EditProfileComponent } from \"./components/edit-profile/edit-profile.component\";\nimport { TicketComponent } from \"./components/ticket/ticket.component\";\nimport { AuthGuard } from \"./components/auth/auth.guard\";\nimport { AdminGuard } from \"./components/auth/admin.guard\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: HomeComponent\n  },\n  {\n    path: \"home\",\n    component: HomeComponent\n  },\n  {\n    path: \"genre\",\n    component: GenreComponent\n  },\n  {\n    path: \"admin\",\n    component: AdminComponent,\n    canActivate: [AuthGuard, AdminGuard],\n    data: { isAdmin: true }\n  },\n  {\n    path: \"companyInformation\",\n    component: CompanyInformationComponent\n  },\n  {\n    path: \"addMovieForm\",\n    component: AddMovieFormComponent,\n    canActivate: [AuthGuard, AdminGuard],\n    data: { isAdmin: true }\n  },\n  {\n    path: \"login\",\n    component: LoginComponent\n  },\n  {\n    path: \"register\",\n    component: RegisterComponent\n  },\n  {\n    path: \"userprofile\",\n    component: UserProfileComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: \"editprofile\",\n    component: EditProfileComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: \"tickets\",\n    component: TicketComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: \"editMovieForm\",\n    component: EditMovieFormComponent,\n    canActivate: [AuthGuard, AdminGuard],\n    data: { isAdmin: true }\n  },\n  {\n    path: \"movie/:_id\",\n    component: MovieComponent\n  },\n  {\n    path: \"message\",\n    component: MessageComponent\n  },\n  {\n    path: \"search\",\n    component: SearchBarComponent\n  },\n  {\n    path: \"movie/:showtime/:_id\",\n    component: BookMoviesComponent\n  },\n  {\n    path: \"genre/:showtime/:_id\",\n    component: BookMoviesComponent\n  },\n  {\n    path: \"search/:showtime/:_id\",\n    component: BookMoviesComponent\n  },\n  {\n    path: \"**\",\n    component: NotFoundPageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class RoutingModule {}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Bold|Source Sans Pro');\\n#form{\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-size: 20px;\\n    color: grey;\\n}\\n#genres{\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-size: 20px;\\n    color:black;\\n}\\nspan{\\n   font-size: 25px;\\n   color: black;\\n   font-family: 'Source Sans Pro', sans-serif;\\n   font-family: 'Semi-Bold', sans-serif;\\n}\\nbutton{\\n    font-family: 'Source Sans Pro', sans-serif;\\n    width:5cm;\\n    height: 1cm;;\\n}\"","module.exports = \"<br />\\n<br />\\n<br />\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"ClickToAdmin()\\\">Back to admin</button>\\n<br />\\n<br />\\n<br />\\n<form [formGroup]=\\\"form\\\" id=\\\"form\\\">\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">Movie Name</label>\\n        <input formControlName=\\\"name\\\" id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\n        <div *ngIf=\\\"name.touched && name.invalid\\\" class=\\\"alert alert-danger\\\">\\n            <div *ngIf=\\\"name.errors.required\\\">Name is required</div>\\n            <div *ngIf=\\\"name.errors.minlength\\\">Name requires at least {{name.errors.minlength.requiredLength}}\\n                charaters.</div>\\n            <div *ngIf=\\\"name.errors.maxlength\\\">Name requires at most {{name.errors.maxlength.requiredLength}}\\n                charaters.</div>\\n            <div *ngIf=\\\"name.errors.shouldBeUnique\\\">Name should be unique.</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"runningTime\\\">Running time</label>\\n        <input formControlName=\\\"runningTime\\\" id=\\\"runningTime\\\" type=\\\"number\\\" class=\\\"form-control\\\">\\n        <div *ngIf=\\\"runningTime.touched && runningTime.invalid\\\" class=\\\"alert alert-danger\\\">\\n            <div *ngIf=\\\"runningTime.errors.required\\\">Running time is required.</div>\\n            <div *ngIf=\\\"runningTime.errors.min\\\">Running time requires at least greater than or equal 1.</div>\\n            <div *ngIf=\\\"runningTime.errors.max\\\">Running time requires less than or equal 500.</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"showtime\\\">Session <br />(please press enter for the datetime one by one and delete the datetime by\\n            clicking it)</label>\\n        <input formArrayName=\\\"showtime\\\" id=\\\"showtime\\\" type=\\\"datetime-local\\\" (keyup.enter)=\\\"addShowtime(showtimeItem)\\\"\\n            #showtimeItem class=\\\"form-control\\\">\\n        <ul class=\\\"list-group\\\">\\n            <li *ngFor=\\\"let showtimeItem of showtime.controls , let i = index\\\" (click)=\\\"\\n                    removeShowtime(showtimeItem)\\\"\\n                class=\\\"list-group-item\\\">\\n                {{showtime.value[i]}}\\n            </li>\\n        </ul>\\n        <!-- <div *ngIf=\\\"showtime.touched && showtime.invalid\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"showtime.errors.required\\\">showtime is required</div>\\n                <div *ngIf=\\\"showtime.errors.minlength\\\">showtime requires at least\\n                    {{showtime.errors.minlength.requiredLength}}\\n                    charaters.</div>\\n                <div *ngIf=\\\"showtime.errors.maxlength\\\">showtime requires at most\\n                    {{showtime.errors.maxlength.requiredLength}}\\n                    charaters.</div>\\n            </div> -->\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"stars\\\">Stars <br />(please press enter for the name one by one and delete the name by\\n            clicking it) </label>\\n        <input formArrayName=\\\"stars\\\" id=\\\"stars\\\" type=\\\"text\\\" (keyup.enter)=\\\"addStar(star)\\\" #star class=\\\"form-control\\\">\\n        <ul class=\\\"list-group\\\">\\n            <li *ngFor=\\\"let star of stars.controls\\\" (click)=\\\"removeStar(star)\\\" class=\\\"list-group-item\\\">\\n                {{star.value}}\\n            </li>\\n        </ul>\\n        <div *ngIf=\\\"stars.touched && stars.invalid\\\" class=\\\"alert alert-danger\\\">\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"stars.errors.cannotBeNull\\\">Stars name is required</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"genres\\\">Genres <br />(please press enter for the genre one by one and delete the genre by\\n            clicking it)</label>\\n        <input formArrayName=\\\"genres\\\" id=\\\"genres\\\" type=\\\"text\\\" (keyup.enter)=\\\"addGenre(genre)\\\" #genre placeholder=\\\"Please enter dramas/ action/ crime/ horror/ comedies/ fantasy/ romance\\\"\\n            class=\\\"form-control\\\">\\n        <ul class=\\\"list-group\\\">\\n            <li *ngFor=\\\"let genre of genres.controls\\\" (click)=\\\"removeGenre(genre)\\\" class=\\\"list-group-item\\\">\\n                {{genre.value}}\\n            </li>\\n        </ul>\\n        <!-- <div *ngIf=\\\"genres.touched && genres.invalid\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"genres.errors.required\\\">showtime is required</div>\\n                <div *ngIf=\\\"genres.errors.minlength\\\">showtime requires at least\\n                    {{showtime.errors.minlength.requiredLength}}\\n                    charaters.</div>\\n                <div *ngIf=\\\"genres.errors.maxlength\\\">showtime requires at most\\n                    {{showtime.errors.maxlength.requiredLength}}\\n                    charaters.</div>\\n            </div> -->\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"director\\\">Director</label>\\n        <input formControlName=\\\"director\\\" id=\\\"director\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\n        <div *ngIf=\\\"director.touched && director.invalid\\\" class=\\\"alert alert-danger\\\">\\n            <div *ngIf=\\\"director.errors.required\\\">Director name is required</div>\\n            <div *ngIf=\\\"director.errors.minlength\\\">Director name requires at least\\n                {{director.errors.minlength.requiredLength}} charaters.</div>\\n            <div *ngIf=\\\"director.errors.maxlength\\\">Director name requires at most\\n                {{director.errors.maxlength.requiredLength}} charaters.</div>\\n        </div>\\n    </div>\\n\\n\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"storyline\\\">Storyline</label>\\n        <textarea formControlName=\\\"storyline\\\" id=\\\"storyline\\\" clos=\\\"30\\\" rows=\\\"10 \\\" class=\\\"form-control\\\"></textarea>\\n        <div *ngIf=\\\"storyline.touched && storyline.invalid\\\" class=\\\"alert alert-danger\\\">\\n            <div *ngIf=\\\"storyline.errors.required\\\">Storyline is required</div>\\n            <div *ngIf=\\\"storyline.errors.minlength\\\">Storyline requires at least\\n                {{storyline.errors.minlength.requiredLength}}\\n                charaters.</div>\\n            <div *ngIf=\\\"storyline.errors.maxlength\\\">Storyline requires at most\\n                {{storyline.errors.maxlength.requiredLength}}\\n                charaters.</div>\\n        </div>\\n    </div>\\n\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"Price\\\">Price</label>\\n        <input formControlName=\\\"price\\\" id=\\\"price\\\" type=\\\"number\\\" class=\\\"form-control\\\">\\n        <div *ngIf=\\\"price.touched && price.invalid\\\" class=\\\"alert alert-danger\\\">\\n            <div *ngIf=\\\"price.errors.required\\\">Price is required.</div>\\n            <div *ngIf=\\\"price.errors.min\\\">Price requires at least greater than or equal 1.</div>\\n            <div *ngIf=\\\"price.errors.max\\\">price requires less than or equal 10000.</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label>Status</label>\\n        <br>\\n        <label for=\\\"nowShowing\\\">Now Showing: </label>\\n        <input formControlName=\\\"status\\\" id=\\\"nowShowing\\\" type=\\\"radio\\\" class=\\\"form-control\\\" value=\\\"nowShowing\\\">\\n\\n        <label for=\\\"comingSoon\\\">Coming Soon:</label>\\n        <input formControlName=\\\"status\\\" id=\\\"comingSoon\\\" type=\\\"radio\\\" class=\\\"form-control\\\" value=\\\"comingSoon\\\">\\n    </div>\\n\\n    <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" (click)=\\\"onSubmit()\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n    <br />\\n    <br />\\n    <div class=\\\"alert alert-info\\\" role=\\\"alert\\\" *ngIf=\\\"!form.valid\\\">\\n        <label>Please complete all the information, thanks!</label>\\n    </div>\\n    <div class=\\\"alert alert-success\\\" role=\\\"alert\\\" *ngIf=\\\"form.valid\\\">\\n        <label>You can submit the movie now.</label>\\n    </div>\\n\\n</form>\\n<br />\"","import { MovieInfoValidators } from \"../common/validators/movie.name.validators\";\nimport { FormArrayValidators } from \"../common/validators/formArray.validators\";\nimport { MoviesService } from \"../../services/movies.service\";\nimport { Router } from \"@angular/router\";\nimport { Component, OnInit } from \"@angular/core\";\nimport {\n  FormGroup,\n  FormControl,\n  FormArray,\n  Validators,\n  ReactiveFormsModule\n} from \"@angular/forms\";\n\n@Component({\n  selector: \"add-movie-form\",\n  templateUrl: \"./add-movie-form.component.html\",\n  styleUrls: [\"./add-movie-form.component.css\"]\n})\nexport class AddMovieFormComponent implements OnInit {\n  form = new FormGroup({\n    name: new FormControl(\n      \"\",\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(60)\n      ]),\n      MovieInfoValidators.shouldBeUnique(this.service)\n    ),\n    runningTime: new FormControl(\n      \"\",\n      Validators.compose([\n        Validators.required,\n        Validators.min(1),\n        Validators.max(500)\n      ])\n    ),\n    director: new FormControl(\n      \"\",\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50)\n      ])\n    ),\n    stars: new FormArray([], FormArrayValidators.cannotBeNull),\n    storyline: new FormControl(\n      \"\",\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(10),\n        Validators.maxLength(1000)\n      ])\n    ),\n    showtime: new FormArray([], FormArrayValidators.cannotBeNull),\n    genres: new FormArray([], FormArrayValidators.cannotBeNull),\n    price: new FormControl(\n      \"\",\n      Validators.compose([\n        Validators.required,\n        Validators.min(1),\n        Validators.max(10000)\n      ])\n    ),\n    status: new FormControl(\"\", Validators.required)\n  });\n\n  //accesser for the FormConrol name\n  get name() {\n    return this.form.get(\"name\");\n  }\n  //accesser for the FormConrol runningTime\n  get runningTime() {\n    return this.form.get(\"runningTime\");\n  }\n  //accesser for the FormControl director\n  get director() {\n    return this.form.get(\"director\");\n  }\n  //accesser for the FormArray stars\n  get stars() {\n    return this.form.get(\"stars\") as FormArray;\n  }\n  //accesser for the FormControl storyline\n  get storyline() {\n    return this.form.get(\"storyline\");\n  }\n  //accesser for the FormArray showtime\n  get showtime() {\n    return this.form.get(\"showtime\") as FormArray;\n  }\n  //accesser for the FormArray genres\n  get genres() {\n    return this.form.get(\"genres\") as FormArray;\n  }\n  //accesser for the FormControl storyline\n  get status() {\n    return this.form.get(\"status\");\n  }\n  //accesser for the FormConrol runningTime\n  get price() {\n    return this.form.get(\"price\");\n  }\n\n  constructor(private router: Router, private service: MoviesService) { }\n\n  ngOnInit() { }\n\n  //add star name in the stars array\n  addStar(star: HTMLInputElement) {\n    this.stars.push(new FormControl(star.value));\n    //clear the enter field\n    star.value = \"\";\n  }\n  //delete a star name in the stars array\n  removeStar(star: FormControl) {\n    let index = this.stars.controls.indexOf(star);\n    this.stars.removeAt(index);\n  }\n\n  //add showtime in the stars array\n  addShowtime(showtimeItem: HTMLInputElement) {\n    this.showtime.push(new FormControl(showtimeItem.value));\n    //clear the enter field\n    showtimeItem.value = \"\";\n  }\n  //delete a star name in the stars array\n  removeShowtime(showtimeItem: FormControl) {\n    let index = this.stars.controls.indexOf(showtimeItem);\n    this.showtime.removeAt(index);\n  }\n\n  //add star name in the stars array\n  addGenre(genre: HTMLInputElement) {\n    this.genres.push(new FormControl(genre.value));\n    //clear the enter field\n    genre.value = \"\";\n  }\n  //delete a star name in the stars array\n  removeGenre(genre: FormControl) {\n    let index = this.genres.controls.indexOf(genre);\n    this.genres.removeAt(index);\n  }\n\n  //submit the form\n  onSubmit() {\n    //console.log(this.form.value);\n    this.service.createMovies(this.form.value).subscribe(response => {\n      console.log(response.json());\n    });\n\n    //give a prompt of sucessful operation to admin\n    this.router.navigate([\"/message\"]);\n  }\n\n  //button back to admin page\n  ClickToAdmin() {\n    this.router.navigate([\"/admin\"]);\n  }\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\nbutton{\\n    width: 5cm;\\n    height: 1cm;\\n}\\n#admin{\\n\\n    font-size: 20px;\\n    color: grey;\\n    font-family: 'Source Sans Pro', sans-serif;\\n   font-family: 'Semi-Bold', sans-serif;\\n}\\nspan{\\n   font-size: 25px;\\n   color: black;\\n   font-family: 'Source Sans Pro', sans-serif;\\n   font-family: 'Semi-Bold', sans-serif;\\n}\\nh3{\\n    text-align: center;\\n    color: black;\\n    font-family: 'Cormorant SC', sans-serif;\\n    font-family: 'Bold', sans-serif;\\n}\"","module.exports = \"<br />\\n<br />\\n<br />\\n<div id=\\\"admin\\\">\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"clickToAddMovie()\\\">Add Movies</button>\\n  <br />\\n  <br />\\n  <div *ngFor=\\\"let movie of movies; let i = index\\\" [attr.movieIndex]=\\\"i\\\">\\n    <br />\\n    <h3>{{movie.name}}</h3>\\n    <br />\\n    <br />\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"onDelete(i)\\\">Delete movie </button>\\n    <br />\\n    <br />\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"onUpdate(i)\\\">Update Status</button>\\n    <br />\\n    <br />\\n    <label><span>Session time: </span>\\n      <br />\\n      <br />\\n      <div *ngFor=\\\"let showtime of movie.showtime\\\">{{showtime | date:'short'}}<br /></div>\\n    </label>\\n    <br />\\n    <br />\\n    <label><span>Running time:</span>\\n      <br />\\n      <br />\\n      {{movie.runningTime}} </label>\\n    <br />\\n    <br />\\n    <label><span>Director: </span>\\n      <br />\\n      <br />\\n      {{movie.director|uppercase}}</label>\\n    <br />\\n    <br />\\n    <span>Cast: </span>\\n    <br />\\n    <br />\\n    <div *ngFor=\\\"let star of movie.stars\\\">\\n      <label>{{star|uppercase}}</label>\\n      <br />\\n    </div>\\n    <br />\\n    <label><span>Storyline:</span>\\n      <br />\\n      <br />\\n      {{movie.storyline}}</label>\\n    <br />\\n    <br />\\n    <span>Genre: </span>\\n    <br />\\n    <br />\\n    <div *ngFor=\\\"let genre of movie.genres\\\">\\n      <label>{{genre|uppercase}}</label>\\n      <br />\\n    </div>\\n    <br />\\n    <br />\\n    <label><span>Price: </span>\\n      <br />\\n      <br />\\n      {{movie.price | currency:'AUD':true:'1.2-2'}} </label>\\n    <br />\\n    <br />\\n    <label><span>Status:\\n        <br />\\n        <br />\\n      </span>{{movie.status|uppercase}}</label>\\n    <br />\\n    <br />\\n  </div>\\n</div>\"","import { MoviesService } from \"../../services/movies.service\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\n\nimport { Router } from \"@angular/router\";\nimport { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"admin\",\n  templateUrl: \"./admin.component.html\",\n  styleUrls: [\"./admin.component.css\"]\n})\nexport class AdminComponent implements OnInit {\n  movies: any[];\n  userAdmin: boolean;\n\n  //initialize movie service and router\n  constructor(\n    private movieService: MoviesService,\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    //get all movies\n    this.movieService.getMovies().subscribe(response => {\n      this.movies = response.json();\n    });\n  }\n\n  //delete a movie\n  onDelete(movieIndex) {\n    let objectId: number;\n    console.log(movieIndex);\n\n    //get the movie id based on the index of the movie\n    objectId = this.movies[movieIndex]._id;\n    console.log(objectId);\n\n    //delete the specific movie\n    this.movieService.deleteMovies(objectId).subscribe(response => {\n      console.log(response.json());\n    });\n\n    //give a prompt of sucessful operation to admin\n    this.router.navigate([\"/message\"]);\n  }\n\n  //update the status of a movie\n  onUpdate(movieIndex) {\n    // update the status of a movie\n    this.movies[movieIndex].status === \"nowShowing\"\n      ? (this.movies[movieIndex].status = \"comingSoon\")\n      : (this.movies[movieIndex].status = \"nowShowing\");\n\n    //get the current movie\n    const movie = this.movies[movieIndex];\n    console.log(\"before update\", movie);\n\n    //update the status of the specific movie\n    this.movieService.updateMovies(movie).subscribe(response => {\n      console.log(\"response from update:\", response.json());\n    });\n  }\n\n  clickToAddMovie() {\n    this.router.navigate([\"/addMovieForm\"]);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\nimport \"rxjs/add/operator/switchMap\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AdminGuard implements CanActivate {\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    // console.log(\"guard level: admin \" + this.authService.isAdmin());\n    // console.log(\"next.data.isAdmin \" + next.data.isAdmin);\n\n    if (!this.authService.isAdmin() === next.data.isAdmin) {\n      this.router.navigateByUrl(\"/login\");\n      this.authService.deleteToken();\n      return false;\n    }\n\n    return true;\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    // If user is not logged in, redirect to login page and delete token in local storage\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl(\"/login\");\n      this.authService.deleteToken();\n      return false;\n    }\n    return true;\n  }\n}\n","import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent\n} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { tap } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    if (req.headers.get(\"noauth\")) return next.handle(req.clone());\n    else {\n      const clonedReq = req.clone({\n        headers: req.headers.set(\n          \"Authorization\",\n          \"Bearer \" + this.authService.getToken()\n        )\n      });\n      return next.handle(clonedReq).pipe(\n        tap(\n          event => {},\n          err => {\n            if (err.error.auth == false) {\n              this.router.navigateByUrl(\"/login\");\n            }\n          }\n        )\n      );\n    }\n  }\n}\n","module.exports = \"@import url(\\\"https://fonts.googleapis.com/css?family=Bold|Cormorant SC\\\");\\n@import url(\\\"https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro\\\");\\n@import url(\\\"https://fonts.googleapis.com/css?family=Source Sans Pro\\\");\\n@import url(\\\"https://fonts.googleapis.com/css?family=Fredericka the Great\\\");\\n#movie {\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n  font-size: 20px;\\n  color: grey;\\n}\\nspan {\\n  font-size: 20px;\\n  color: black;\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n  font-family: \\\"Semi-Bold\\\", sans-serif;\\n}\\nh2 {\\n  text-align: left;\\n  color: grey;\\n  font-family: \\\"Cormorant SC\\\", sans-serif;\\n  font-family: \\\"Bold\\\", sans-serif;\\n}\\nh3 {\\n  text-align: left;\\n  color: black;\\n  font-family: \\\"Fredericka the Great\\\", sans-serif;\\n}\\nlabel {\\n  font-size: 20px;\\n  color: black;\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n}\\nlabel.success {\\n  padding: 20px;\\n  color: #249424;\\n  margin-bottom: 15px;\\n  font-size: 18px;\\n}\\nbutton {\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n  width: 5cm;\\n  height: 1cm;\\n}\\nlabel.validation-message {\\n  color: #ed5558;\\n  font-size: 15px;\\n}\\n\"","module.exports = \"<br />\\n<br />\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"backToHome()\\\">Home Page</button>\\n<br />\\n<br />\\n<br />\\n<h2>Booking:</h2>\\n<div *ngFor=\\\"let property of movie\\\" id=\\\"movie\\\">\\n  <br />\\n  <h3>{{property.name}}</h3>\\n  <br />\\n\\n  <label>\\n    <span>Sessions: </span>\\n  </label>\\n  <div>{{bookingTime | date:'short'}}\\n    <br />\\n  </div>\\n  <br />\\n  <label>\\n    <span>Price: </span>{{property.price | currency:'AUD':true:'1.2-2'}}</label>\\n  <br />\\n  <br />\\n</div>\\n\\n<!-- If the movie has \\\"coming soon\\\" status -->\\n<div *ngIf=\\\"!flag\\\" id=\\\"movie\\\">\\n  <br />\\n  <br />\\n  <label>This movie is coming soon. Please stay tune.</label>\\n</div>\\n<!-- If the movie is \\\"now showing\\\", display the booking form without email provided before-->\\n<div *ngIf=\\\"onlyMovie()\\\" id=\\\"movie\\\">\\n  <form #bookingForm=\\\"ngForm\\\" (ngSubmit)=\\\"bookingForm.valid && onBook(bookingForm)\\\">\\n    <label>Please enter your email: </label>\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"bookingService.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\n      required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': bookingForm.submitted && !email.valid }\\\">\\n    <!-- Display of Validation for email input -->\\n    <div *ngIf=\\\"bookingForm.submitted && email.errors\\\">\\n      <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\n      <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n    </div>\\n    <br />\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Confirm booking</button>\\n  </form>\\n</div>\\n\\n<!-- If the movie is \\\"now showing\\\" and user is logged in, display the booking form without user's email provided-->\\n<!-- User can still change the email address to send the ticket to -->\\n<div *ngIf=\\\"bothMovieUser() && userDetails\\\" id=\\\"movie\\\">\\n  <form #bookingForm=\\\"ngForm\\\" (ngSubmit)=\\\"bookingForm.valid && onBook(bookingForm)\\\">\\n    <label>Please check your email:</label>\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\n      required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': bookingForm.submitted && !email.valid }\\\">\\n    <!-- Display of Validation for email input -->\\n    <div *ngIf=\\\"bookingForm.submitted && email.errors\\\">\\n      <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\n      <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n    </div>\\n    <br />\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Confirm booking</button>\\n  </form>\\n</div>\\n\\n<!-- If the movie has \\\"coming soon\\\" status -->\\n<div>\\n  <label *ngIf=\\\"bookingComplete\\\" class=\\\"success\\\">Your ticket has been succesfully booked. Please check your email for more details.</label>\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { MoviesService } from \"../../services/movies.service\";\nimport { TicketService } from \"../../services/ticket.service\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\n\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { NgForm } from \"@angular/forms\";\n\n@Component({\n  selector: \"book-movies\",\n  templateUrl: \"./book-movies.component.html\",\n  styleUrls: [\"./book-movies.component.css\"]\n})\nexport class BookMoviesComponent implements OnInit {\n  movie: any[];\n  movieName;\n  bookingTime;\n  price;\n  email;\n  userDetails;\n  uId: string = \"anonymous\";\n  flag: boolean = false;\n  bookingComplete: boolean = false;\n  userFlag: boolean = this.authService.isLoggedIn();\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private movieService: MoviesService,\n    private bookingService: TicketService,\n    private authService: AuthenticationService\n  ) {}\n\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.bookingTime = params.get(\"showtime\");\n      console.log(this.bookingTime);\n\n      let _id = params.get(\"_id\");\n      console.log(_id);\n\n      this.movieService.getMoviesById(_id).subscribe(response => {\n        this.movie = response.json().filter(movie => {\n          this.movieName = movie.name;\n          this.price = movie.price;\n          if (movie.status === \"nowShowing\") {\n            console.log(\"flag before:\", this.flag);\n            this.flag = true;\n            console.log(\"flag after:\", this.flag);\n            return movie;\n          }\n        });\n      });\n    });\n\n    // If user is logged in, get user information\n    if (this.userFlag) {\n      this.authService.getUserProfile().subscribe(\n        res => {\n          this.userDetails = res[\"user\"];\n          this.uId = this.userDetails._id;\n        },\n        err => {}\n      );\n    }\n  }\n\n  // If movie is \"now showing\" and user is not logged in\n  onlyMovie() {\n    if (this.flag && !this.userFlag) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // If movie is \"now showing\" and user is logged in\n  bothMovieUser() {\n    if (this.flag && this.userFlag) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  backToHome() {\n    this.router.navigate([\"/home\"]);\n  }\n\n  onBook(form: NgForm) {\n    let bookingValue = {\n      movieName: this.movieName,\n      session: this.bookingTime,\n      price: this.price,\n      email: form.value.email,\n      uId: this.uId\n    };\n    this.bookingService.bookMovie(bookingValue).subscribe(response => {\n      this.bookingComplete = true;\n      setTimeout(() => (this.bookingComplete = false), 4000); // Success message for bookingComplete status dissapears after 4 seconds\n    });\n  }\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\n\\n.comingSoonBlock {\\n  background-color:white;\\n  text-align: center;\\n  font-family: 'Cormorant SC', sans-serif;\\n  font-family: 'Bold', sans-serif;\\n  font-size: 35px;\\n  color: gray;\\n  }\\n\\n#list{\\n    color: grey;\\n    font-size: 20px;\\n    font-family: 'Cormorant SC', sans-serif;\\n  }\"","module.exports = \"<br />\\n<div class=\\\"comingSoonBlock\\\">\\n  <div class=\\\"list-group\\\">\\n    <div class=\\\"border border-light\\\">\\n      COMING SOON\\n    </div>\\n    <ul if=\\\"list\\\" class=\\\"list-group list-group-flush\\\">\\n      <li class=\\\"list-group-item\\\" *ngFor=\\\"let movie of movies\\\">\\n        <a [routerLink]=\\\"['../movie', movie._id]\\\" id=\\\"list\\\">{{movie.name}}</a>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { MoviesService } from \"../../services/movies.service\";\n\n@Component({\n  selector: \"coming-soon-movie-list\",\n  templateUrl: \"./coming-soon-movie-list.component.html\",\n  styleUrls: [\"./coming-soon-movie-list.component.css\"]\n})\nexport class ComingSoonMovieListComponent implements OnInit {\n  movies: any[];\n\n  constructor(private service: MoviesService) {\n  }\n\n  ngOnInit() {\n    this.service.getMovies().subscribe(response => {\n      this.movies = response.json()\n        .filter(movie => movie.status === 'comingSoon');\n    });\n  }\n\n\n}\n\n\n","import { AbstractControl, ValidationErrors, FormArray } from '@angular/forms';\n\nexport class FormArrayValidators {\n    static cannotBeNull(control: AbstractControl): ValidationErrors | null {\n        if ((control.value as FormArray).length === 0)\n            return { cannotBeNull: true }\n\n        return null;\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { MoviesService } from \"../../../services/movies.service\";\nimport {\n  AbstractControl,\n  ValidationErrors,\n  AsyncValidator\n} from \"@angular/forms\";\n\n@Injectable()\nexport class MovieInfoValidators {\n  static shouldBeUnique(service: MoviesService) {\n    return (control: AbstractControl) => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          service.getMovies().subscribe(response => {\n            console.log(response.json());\n            let movies = response.json();\n            for (let movie of movies) {\n              console.log(movie);\n              if (\n                control.value\n                  .toString()\n                  .toLowerCase()\n                  .trim()\n                  .replace(/ /g, \"\") ===\n                movie.name\n                  .toString()\n                  .toLowerCase()\n                  .trim()\n                  .replace(/ /g, \"\")\n              )\n                return resolve({ shouldBeUnique: true });\n            }\n            return resolve(null);\n          });\n        }, 1000);\n      });\n    };\n  }\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Oswald');\\n\\n\\n\\n#information{\\n    font-family: 'Oswald', sans-serif;\\n    color: grey;\\n    font-size: 25px;\\n    overflow-wrap: break-word;\\n    width: 45em;\\n\\n}\\n\\n\"","module.exports = \"<br />\\n<br />\\n<br />\\n<div id=\\\"information\\\" class=\\\"text-left text-md-left\\\">\\n    Golden Time Cinema is for movie lovers to enjoy the classis movies anytime.\\n    Our cinema contains\\n    more than ten movie rooms with cozy enviroment. We hope audience can have the best experince and travel with\\n    time\\n    machine to the\\n    classic movies they love. Feel free to contact us if you have any question. Our team is here to help you\\n    responsively.\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"company-information\",\n  templateUrl: \"./company-information.component.html\",\n  styleUrls: [\"./company-information.component.css\"]\n})\nexport class CompanyInformationComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","module.exports = \"\"","module.exports = \"<h2>Edit movie</h2>\\n\\n<form>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"movieName\\\">Movie Name</label>\\n        <input id=\\\"movieName\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label>Year</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label>Director(s)</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label>Actors</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label>Summary</label>\\n        <textarea class=\\\"form-control\\\"></textarea>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label>Session</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\">\\n    </div>\\n\\n    <button class=\\\"btn btn-primary\\\">Save changes</button>\\n</form>\"","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"edit-movie-form\",\n  templateUrl: \"./edit-movie-form.component.html\",\n  styleUrls: [\"./edit-movie-form.component.css\"]\n})\nexport class EditMovieFormComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","module.exports = \".btn {\\n  margin: 10px;\\n}\\n\"","module.exports = \"<br />\\n\\n\\n<br />\\n<div *ngIf=\\\"userDetails\\\" class=\\\"col-md-8-col-md-offset-2\\\">\\n  <!-- Edit Profile form -->\\n  <form #editProfileForm=\\\"ngForm\\\" (ngSubmit)=\\\"editProfileForm.valid && onUpdate(editProfileForm)\\\">\\n    <input type=\\\"hidden\\\" name=\\\"_id\\\" #_id=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails._id\\\">\\n    <!-- Firstname input for user profile -->\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"firstName\\\">First Name</label>\\n      <input type=\\\"text\\\" #firstName=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.firstName\\\" name=\\\"firstName\\\" placeholder=\\\"First Name\\\" class=\\\"form-control\\\"\\n        required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !firstName.valid }\\\">\\n      <!-- Display of Validation for firstname input -->\\n      <div *ngIf=\\\"editProfileForm.submitted && firstName.errors\\\">\\n        <label *ngIf=\\\"firstName.errors.required\\\" class=\\\"validation-message\\\">First name is required.</label>\\n        <label *ngIf=\\\"firstName.errors.minlength\\\" class=\\\"validation-message\\\">First name must have at least 2 characters.</label>\\n        <label *ngIf=\\\"firstName.errors.maxlength\\\" class=\\\"validation-message\\\">First name should not exceed 30 characters.</label>\\n        <label *ngIf=\\\"firstName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\n      </div>\\n    </div>\\n\\n    <!-- Lastname input for user profile -->\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"lastName\\\">Last Name</label>\\n      <input type=\\\"text\\\" #lastName=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.lastName\\\" name=\\\"lastName\\\" placeholder=\\\"Last Name\\\" class=\\\"form-control\\\"\\n        required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !lastName.valid }\\\">\\n      <!-- Display of Validation for lastname input -->\\n      <div *ngIf=\\\"editProfileForm.submitted && lastName.errors\\\">\\n        <label *ngIf=\\\"lastName.errors.required\\\" class=\\\"validation-message\\\">Last name is required.</label>\\n        <label *ngIf=\\\"lastName.errors.minlength\\\" class=\\\"validation-message\\\">Last name must have at least 2 characters.</label>\\n        <label *ngIf=\\\"lastName.errors.maxlength\\\" class=\\\"validation-message\\\">Last name should not exceed 30 characters.</label>\\n        <label *ngIf=\\\"lastName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\n      </div>\\n    </div>\\n\\n    <!-- Email input for user profile -->\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">Email</label>\\n      <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\n        required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !email.valid }\\\">\\n      <!-- Display of Validation for email input -->\\n      <div *ngIf=\\\"editProfileForm.submitted && email.errors\\\">\\n        <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\n        <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n      </div>\\n    </div>\\n\\n    <!-- Gender input for user profile -->\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"gender\\\">Gender</label>\\n      <select #gender=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.gender\\\" name=\\\"gender\\\" placeholder=\\\"Gender\\\" class=\\\"form-control\\\" required\\n        [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !gender.valid }\\\">\\n        <option [ngValue]=\\\"null\\\" disabled>Select gender</option>\\n        <option *ngFor=\\\"let gender of genders\\\" [ngValue]=\\\"gender\\\">\\n          {{ gender}}\\n        </option>\\n      </select>\\n      <!-- Display of Validation for gender input -->\\n      <div *ngIf=\\\"editProfileForm.submitted && gender.errors\\\">\\n        <label *ngIf=\\\"gender.errors.required\\\" class=\\\"validation-message\\\">Gender is required.</label>\\n      </div>\\n    </div>\\n\\n    <!-- Date of birth input for user profile -->\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"dob\\\">Date of birth</label>\\n      <input type=\\\"date\\\" #dob=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.dob\\\" name=\\\"dob\\\" placeholder=\\\"Date of Birth\\\" class=\\\"form-control\\\"\\n        required [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !dob.valid }\\\">\\n      <!-- Display of Validation for date of birth input -->\\n      <div *ngIf=\\\"editProfileForm.submitted && dob.errors\\\">\\n        <label *ngIf=\\\"dob.errors.required\\\" class=\\\"validation-message\\\">Date of birth is required.</label>\\n      </div>\\n    </div>\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"backToProfile()\\\">Back to Profile</button>\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Update</button>\\n  </form>\\n</div>\\n\\n<br />\\n\\n<!-- Success message -->\\n<div class=\\\"success\\\" *ngIf=\\\"successMessage\\\">\\n  <label>Update is successful</label>\\n</div>\\n\\n<!-- Error message -->\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\">\\n  <label> {{errorMessages}}</label>\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\nimport { Router } from \"@angular/router\";\nimport { NgForm } from \"@angular/forms\";\nimport { User } from \"../auth/user.model\";\n\n@Component({\n  selector: \"edit-profile\",\n  templateUrl: \"./edit-profile.component.html\",\n  styleUrls: [\"./edit-profile.component.css\"]\n})\nexport class EditProfileComponent implements OnInit {\n  // Email regular expression to validate email format\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  nameRegex = /^([a-zA-Z ]){2,30}$/;\n\n  userDetails;\n  gender = null;\n  genders = [\"Female\", \"Male\", \"Other\"];\n  successMessage: boolean;\n  errorMessages: string;\n\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.authService.getUserProfile().subscribe(\n      res => {\n        this.userDetails = res[\"user\"];\n      },\n      err => {}\n    );\n  }\n  onUpdate(form: NgForm) {\n    this.authService.updateUser(form.value).subscribe(\n      res => {\n        // this.successMessage = true;\n        // setTimeout(() => (this.successMessage = false), 4000); // Success message dissapears after 4 seconds\n        this.router.navigate([\"/userprofile\"]);\n      },\n\n      // if there are errors sent from server-side\n      err => {\n        if (err.status === 422) {\n          this.errorMessages = err.error.join(\"<br/>\");\n        } else\n          this.errorMessages = \"Something went wrong. Please contact admin.\";\n      }\n    );\n  }\n\n  backToProfile() {\n    this.router.navigate([\"/userprofile\"]);\n  }\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\n.footer {\\n  background-color: white;\\n  position: fixed;\\n  left: 0;\\n  bottom: 0;\\n  width: 100%;\\n  color: black;\\n  text-align: center;\\n  font-family: 'Source Sans Pro', sans-serif;\\n  font-family: 'Semi-Bold', sans-serif;\\n  font-size: 15px;\\n}\\n\"","module.exports = \"<div class=\\\"footer border-top\\\">\\n  {{companyName}}\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"footer\",\n  templateUrl: \"./footer.component.html\",\n  styleUrls: [\"./footer.component.css\"]\n})\nexport class FooterComponent implements OnInit {\n  companyName = \"@Golden Time Cooperation\";\n  constructor() {}\n\n  ngOnInit() {}\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\n#movie{\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-size: 20px;\\n    color: grey;\\n}\\nspan{\\n   font-size: 25px;\\n   color: black;\\n   font-family: 'Source Sans Pro', sans-serif;\\n   font-family: 'Semi-Bold', sans-serif;\\n}\\nh3{\\n    text-align: center;\\n    color: black;\\n    font-family: 'Cormorant SC', sans-serif;\\n    font-family: 'Bold', sans-serif;\\n}\\na{\\n    text-align: center;\\n}\"","module.exports = \"<br />\\n<br />\\n<br />\\n<div id=\\\"genres\\\" class=\\\"list-group\\\">\\n    <a (click)=\\\"findMoviesByGenre(dramas)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Dramas</a>\\n    <a (click)=\\\"findMoviesByGenre(action)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Action</a>\\n    <a (click)=\\\"findMoviesByGenre(crime)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Crime</a>\\n    <a (click)=\\\"findMoviesByGenre(horror)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Horror</a>\\n    <a (click)=\\\"findMoviesByGenre(comedies)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Comedies</a>\\n    <a (click)=\\\"findMoviesByGenre(fantasy)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Fantasy</a>\\n    <a (click)=\\\"findMoviesByGenre(romance)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Romance</a>\\n</div>\\n<br />\\n<br />\\n<div *ngFor=\\\"let property of movies\\\" id=\\\"movie\\\">\\n    <h3>{{property.name}}</h3>\\n    <br />\\n    <br />\\n    <br />\\n    <label> <span>Sessions: </span></label>\\n    <br />\\n    <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\"\\n        [routerLink]=\\\"['../genre', showtime,property._id]\\\">{{showtime | date:'short'}}<br />\\n    </div>\\n    <br />\\n    <label><span>Running time: </span>\\n        <br />\\n        <br />\\n        {{property.runningTime}} mins\\n    </label>\\n    <br />\\n    <br />\\n    <label><span>Director: </span>\\n        <br />\\n        <br />\\n        {{property.director | uppercase}}\\n    </label>\\n    <br />\\n    <br />\\n    <label><span>Cast:</span></label>\\n    <br />\\n    <div *ngFor=\\\"let star of property.stars\\\">\\n        {{star|uppercase}}\\n        <br />\\n    </div>\\n    <br />\\n    <br />\\n    <label><span>Story: </span>\\n        <br />\\n        <br />\\n        {{property.storyline}}\\n    </label>\\n    <br />\\n    <br />\\n    <label><span>Genre:</span></label>\\n    <div *ngFor=\\\"let genre of property.genres\\\">\\n        {{genre|uppercase}}\\n    </div>\\n    <br />\\n    <br />\\n    <label><span>Status: </span>\\n        <br />\\n        <br />\\n        {{property.status | uppercase}}\\n    </label>\\n    <br />\\n    <br />\\n</div>\"","import { MoviesService } from \"../../services/movies.service\";\nimport { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"genre\",\n  templateUrl: \"./genre.component.html\",\n  styleUrls: [\"./genre.component.css\"]\n})\nexport class GenreComponent implements OnInit {\n  dramas = \"dramas\";\n  action = \"action\";\n  crime = \"crime\";\n  horror = \"horror\";\n  comedies = \"comedies\";\n  fantasy = \"fantasy\";\n  romance = \"romance\";\n  movies: any[];\n\n  constructor(private service: MoviesService) {}\n\n  ngOnInit() {}\n\n  findMoviesByGenre(inputValue) {\n    console.log(inputValue);\n    this.service.getMovies().subscribe(response => {\n      //get movies by genres\n      this.movies = response.json().filter(movies => {\n        for (let genre of movies.genres)\n          if (genre.toLowerCase() === inputValue.toLowerCase()) return movies;\n      });\n      console.log(\"movies retrieved by genres\", this.movies);\n    });\n  }\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Fredericka the Great');\\n\\n\\nh1 {\\n  text-align: center;\\n  font: bold;\\n  font-family: 'Fredericka the Great', sans-serif;\\n  color: rgb(209, 156, 21);\\n    \\n}\\n\"","module.exports = \"<div>\\n  <h1 class=\\\"text-center\\\" style=\\\"font-size:50px\\\">{{title}}</h1>\\n</div>\\n<br />\\n<br />\"","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"header\",\n  templateUrl: \"./header.component.html\",\n  styleUrls: [\"./header.component.css\"]\n})\nexport class HeaderComponent implements OnInit {\n  title = \"Golden Time Cinema\";\n\n  constructor() { }\n\n  ngOnInit() { }\n}\n","module.exports = \"\"","module.exports = \"<br />\\n<br />\\n<br />\\n<now-showing-movie-list></now-showing-movie-list>\\n<br />\\n<br />\\n<br />\\n<coming-soon-movie-list></coming-soon-movie-list>\\n<br />\\n<br />\"","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"home\",\n  templateUrl: \"./home.component.html\",\n  styleUrls: [\"./home.component.css\"]\n})\nexport class HomeComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n\\nlabel{\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-family: 'Semi-Bold', sans-serif;\\n}\"","module.exports = \"<br />\\n<br />\\n<div class=\\\"col-md-8-col-md-offset-2\\\">\\n\\n    <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"loginForm.valid && onLogin(loginForm)\\\">\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"email\\\">Email</label>\\n            <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\"\\n                class=\\\"form-control\\\" required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': loginForm.submitted && !email.valid }\\\">\\n            <div *ngIf=\\\"loginForm.submitted && email.errors\\\">\\n                <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\n                <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"password\\\">Password</label>\\n            <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.password\\\" name=\\\"password\\\"\\n                placeholder=\\\"Password\\\" class=\\\"form-control\\\" minlength=\\\"4\\\" required [ngClass]=\\\"{ 'ng-invalid': loginForm.submitted && !password.valid }\\\">\\n            <div *ngIf=\\\"loginForm.submitted && password.errors\\\">\\n                <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">Password is required.</label>\\n            </div>\\n        </div>\\n\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Login</button>\\n    </form>\\n\\n</div>\\n\\n\\n<!-- Error message -->\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\" style=\\\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\\\">\\n    {{errorMessages}}\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { AuthenticationService } from \"../../services/authentication.service\";\n\n@Component({\n  selector: \"login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"]\n})\nexport class LoginComponent implements OnInit {\n  // Email regular expression to validate email format\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  errorMessages: string;\n\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  model = {\n    email: \"\",\n    password: \"\"\n  };\n\n  ngOnInit() {\n    // If user is already logged in, redirect to user profile page\n    if (this.authService.isLoggedIn()) {\n      this.router.navigateByUrl(\"/userprofile\");\n    }\n  }\n\n  onLogin(form: NgForm) {\n    this.authService.login(form.value).subscribe(\n      // successful authentication\n      res => {\n        this.authService.setToken(res[\"token\"]); // save token to local storage\n        //localStorage.setItem('admin',isAdmin)\n        this.router.navigateByUrl(\"/userprofile\"); // redirect to user profile page\n      },\n      // If errors occur\n      err => {\n        this.errorMessages = err.error.message;\n      }\n    );\n  }\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\n#message{\\n    text-align: center;\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-family: 'Semi-Bold', sans-serif;\\n    font-size: 20px;\\n  \\n}\\nbutton{\\n    width: 5cm;\\n    height: 1cm;\\n}\\n\\n\"","module.exports = \"<br />\\n<br />\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"backToAdmin()\\\">back to admin</button>\\n<div id=\\\"message\\\">\\n  <br />\\n  <br />\\n  <br />\\n  <br />\\n  <p class=\\\"alert alert-success\\\" role=\\\"alert\\\">The Operation is Successful.</p>\\n\\n</div>\"","import { Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.css']\n})\nexport class MessageComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  //button back to admin\n  backToAdmin() {\n    this.router.navigate([\"/admin\"]);\n  }\n\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\n#movie{\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-size: 20px;\\n    color: grey;\\n}\\nspan{\\n   font-size: 25px;\\n   color: black;\\n   font-family: 'Source Sans Pro', sans-serif;\\n   font-family: 'Semi-Bold', sans-serif;\\n}\\nh3{\\n    text-align: center;\\n    color: black;\\n    font-family: 'Cormorant SC', sans-serif;\\n    font-family: 'Bold', sans-serif;\\n}\"","module.exports = \"<br />\\n<br />\\n<div *ngFor=\\\"let property of movie\\\" id=\\\"movie\\\">\\n  <h3>{{property.name}}</h3>\\n  <br />\\n  <br />\\n  <br />\\n  <label>\\n    <span>Sessions: </span>\\n  </label>\\n  <br />\\n  <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\" [routerLink]=\\\"['../', showtime,property._id]\\\">{{showtime | date:'short'}}\\n    <br />\\n  </div>\\n  <br />\\n  <label>\\n    <span>Running time: </span>\\n    <br />\\n    <br /> {{property.runningTime}} mins\\n  </label>\\n  <br />\\n  <br />\\n  <label>\\n    <span>Director: </span>\\n    <br />\\n    <br /> {{property.director | uppercase}}\\n  </label>\\n  <br />\\n  <br />\\n  <label>\\n    <span>Cast:</span>\\n  </label>\\n  <br />\\n  <div *ngFor=\\\"let star of property.stars\\\">\\n    {{star|uppercase}}\\n    <br />\\n  </div>\\n  <br />\\n  <br />\\n  <label>\\n    <span>Story: </span>\\n    <br />\\n    <br /> {{property.storyline}}\\n  </label>\\n  <br />\\n  <br />\\n  <label>\\n    <span>Genre:</span>\\n  </label>\\n  <div *ngFor=\\\"let genre of property.genres\\\">\\n    {{genre|uppercase}}\\n  </div>\\n  <br />\\n  <br />\\n  <label>\\n    <span>Status: </span>\\n    <br />\\n    <br /> {{property.status | uppercase}}\\n  </label>\\n  <br />\\n  <br />\\n</div>\"","import { ActivatedRoute } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { MoviesService } from '../../services/movies.service';\n\n@Component({\n  selector: 'app-movie',\n  templateUrl: './movie.component.html',\n  styleUrls: ['./movie.component.css']\n})\nexport class MovieComponent implements OnInit {\n\n  movie: any[];\n\n  constructor(private route: ActivatedRoute, private service: MoviesService) { }\n\n  ngOnInit() {\n    //get the router parameter that is the object id of a movie.\n    this.route.paramMap\n      .subscribe(params => {\n        let _id = params.get('_id');\n        console.log(_id);\n\n        //get a specific movie object by its object id\n        this.service.getMoviesById(_id).subscribe(response => {\n          this.movie = response.json();\n          console.log(this.movie);\n        })\n      })\n  }\n\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Cormorant SC');\\n\\n.navigationBar {\\n  display: block;\\n  background-color: whitesmoke;\\n}\\n\\na {\\n  font-family: 'Cormorant SC', sans-serif;\\n  font-family: 'Semi-Bold', sans-serif;\\n  text-decoration: none;\\n  color:gray;\\n  padding-right: 50px;\\n  padding-left: 50px;\\n  font-size: 15px;\\n}\\n\"","module.exports = \"<br />\\n<nav>\\n  <ul class=\\\"nav justify-content-center\\\">\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../\\\">{{home}}</a>\\n    </li>\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../search\\\">{{search}}</a>\\n    </li>\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../genre\\\">{{genre}}</a>\\n    </li>\\n    <!-- Only display admin tab for admin user -->\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.displayAdmin()\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../admin\\\">{{admin}}</a>\\n    </li>\\n    <!-- User authService.isLoggedIn directly here to solve problem of manually refreshing the page to see changes -->\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"!authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../login\\\">{{logIn}}</a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"!authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../register\\\">{{register}}</a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../tickets\\\">{{ticket}}</a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../userprofile\\\">{{profile}}</a>\\n    </li>\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n      <a routerLink=\\\"../companyInformation\\\">{{companyInformation}}</a>\\n    </li>\\n  </ul>\\n\\n</nav>\\n<br />\\n<div class=\\\"border border-bottom border-light\\\"> </div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\n\n@Component({\n  selector: \"navigation-bar\",\n  templateUrl: \"./navigation-bar.component.html\",\n  styleUrls: [\"./navigation-bar.component.css\"]\n})\nexport class NavigationBarComponent implements OnInit {\n  logIn = \"LOG IN\";\n  home = \"HOME\";\n  register = \"REGISTER\";\n  genre = \"GENRES\";\n  admin = \"ADMIN\";\n  companyInformation = \"ABOUT US\";\n  profile = \"PROFILE\";\n  ticket = \"ORDERS\";\n  search = \"SEARCH\";\n\n  constructor(private authService: AuthenticationService) {}\n\n  ngOnInit() {}\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\n#message{\\n    text-align: center;\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-family: 'Semi-Bold', sans-serif;\\n    font-size: 20px;\\n  \\n}\"","module.exports = \"<br />\\n<br />\\n<br />\\n<div class=\\\"alert alert-warning\\\" id=\\\"message\\\">Sorry, the page has not been found!</div>\\n<footer></footer>\"","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"not-found-page\",\n  templateUrl: \"./not-found-page.component.html\",\n  styleUrls: [\"./not-found-page.component.css\"]\n})\nexport class NotFoundPageComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\n\\n.nowShowingBlock {\\n  background-color:white;\\n  text-align: center;\\n  font-family: 'Cormorant SC', sans-serif;\\n  font-family: 'Bold', sans-serif;\\n  font-size: 35px;\\n  color: gray;\\n  }\\n\\n#list{\\n    color: grey;\\n    font-size: 20px;\\n    font-family: 'Cormorant SC', sans-serif;\\n  }\\n\\n#alert{\\n    text-align: center;\\n    font-family: 'Cormorant SC', sans-serif;\\n    font-size: 35px;\\n    color: gray;\\n  }\\n\\nul{\\n    text-align: center;\\n  }\\n\\n\"","module.exports = \"<br />\\n<div>\\n  <div class=\\\"nowShowingBlock\\\">\\n    <div class=\\\"border border-light\\\">NOW SHOWING</div>\\n  </div>\\n  <ul if=\\\"list\\\" class=\\\"list-group list-group-flush\\\">\\n    <li class=\\\"list-group-item\\\" *ngFor=\\\"let movie of movies\\\">\\n      <a [routerLink]=\\\"['../movie', movie._id]\\\" id=\\\"list\\\">{{movie.name}}</a>\\n    </li>\\n  </ul>\\n</div>\\n\\n<!-- <div id=\\\"alert\\\">Please be patient, more movies are yet to come.</div> -->\"","import { MoviesService } from \"../../services/movies.service\";\nimport { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"now-showing-movie-list\",\n  templateUrl: \"./now-showing-movie-list.component.html\",\n  styleUrls: [\"./now-showing-movie-list.component.css\"]\n})\nexport class NowShowingMovieListComponent implements OnInit {\n  movies: any[];\n\n  constructor(private service: MoviesService) {}\n\n  ngOnInit() {\n    this.service.getMovies().subscribe(response => {\n      this.movies = response\n        .json()\n        .filter(movie => movie.status === \"nowShowing\");\n    });\n  }\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n\\nlabel{\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-family: 'Semi-Bold', sans-serif;\\n    font-size : 15px;\\n}\"","module.exports = \"<br />\\n<br />\\n<div class=\\\"col-md-8-col-md-offset-2\\\">\\n    <!-- Registration form -->\\n    <form #registerForm=\\\"ngForm\\\" (ngSubmit)=\\\"registerForm.valid && onRegister(registerForm)\\\">\\n        <!-- Firstname input for user registration -->\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"firstName\\\">First Name</label>\\n            <input type=\\\"text\\\" #firstName=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.firstName\\\" name=\\\"firstName\\\" placeholder=\\\"First Name\\\"\\n                class=\\\"form-control\\\" required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !firstName.valid }\\\">\\n            <!-- Display of Validation for firstname input -->\\n            <div *ngIf=\\\"registerForm.submitted && firstName.errors\\\">\\n                <label *ngIf=\\\"firstName.errors.required\\\" class=\\\"validation-message\\\">First name is required.</label>\\n                <label *ngIf=\\\"firstName.errors.minlength\\\" class=\\\"validation-message\\\">First name must have at least 2 characters.</label>\\n                <label *ngIf=\\\"firstName.errors.maxlength\\\" class=\\\"validation-message\\\">First name should not exceed 30 characters.</label>\\n                <label *ngIf=\\\"firstName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\n\\n            </div>\\n        </div>\\n\\n        <!-- Lastname input for user registration -->\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"lastName\\\">Last Name</label>\\n            <input type=\\\"text\\\" #lastName=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.lastName\\\" name=\\\"lastName\\\" placeholder=\\\"Last Name\\\"\\n                class=\\\"form-control\\\" required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !lastName.valid }\\\">\\n            <!-- Display of Validation for lastname input -->\\n            <div *ngIf=\\\"registerForm.submitted && lastName.errors\\\">\\n                <label *ngIf=\\\"lastName.errors.required\\\" class=\\\"validation-message\\\">Last name is required.</label>\\n                <label *ngIf=\\\"lastName.errors.minlength\\\" class=\\\"validation-message\\\">Last name must have at least 2 characters.</label>\\n                <label *ngIf=\\\"lastName.errors.maxlength\\\" class=\\\"validation-message\\\">Last name should not exceed 30 characters.</label>\\n                <label *ngIf=\\\"lastName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\n            </div>\\n        </div>\\n\\n        <!-- Email input for user registration -->\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"email\\\">Email</label>\\n            <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\n                required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !email.valid }\\\">\\n            <!-- Display of Validation for email input -->\\n            <div *ngIf=\\\"registerForm.submitted && email.errors\\\">\\n                <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\n                <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n            </div>\\n        </div>\\n\\n        <!-- Password input for user registration -->\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"password\\\">Password</label>\\n            <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n                class=\\\"form-control\\\" minlength=\\\"4\\\" required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !password.valid }\\\">\\n            <!-- Display of Validation for password input -->\\n            <div *ngIf=\\\"registerForm.submitted && password.errors\\\">\\n                <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">Password is required.</label>\\n                <label *ngIf=\\\"password.errors.minlength\\\" class=\\\"validation-message\\\">Password must have at least 4 characters.</label>\\n            </div>\\n        </div>\\n\\n        <!-- Gender input for user registration -->\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"gender\\\">Gender</label>\\n            <select #gender=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.gender\\\" name=\\\"gender\\\" placeholder=\\\"Gender\\\" class=\\\"form-control\\\"\\n                required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !gender.valid }\\\">\\n                <option [ngValue]=\\\"null\\\" disabled>Select gender</option>\\n                <option *ngFor=\\\"let gender of genders\\\" [ngValue]=\\\"gender\\\">\\n                    {{ gender}}\\n                </option>\\n            </select>\\n            <!-- Display of Validation for gender input -->\\n            <div *ngIf=\\\"registerForm.submitted && gender.errors\\\">\\n                <label *ngIf=\\\"gender.errors.required\\\" class=\\\"validation-message\\\">Gender is required.</label>\\n            </div>\\n        </div>\\n\\n        <!-- Date of birth input for user registration -->\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"dob\\\">Date of birth</label>\\n            <input type=\\\"date\\\" #dob=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.dob\\\" name=\\\"dob\\\" placeholder=\\\"Date of Birth\\\" class=\\\"form-control\\\"\\n                required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !dob.valid }\\\">\\n            <!-- Display of Validation for date of birth input -->\\n            <div *ngIf=\\\"registerForm.submitted && dob.errors\\\">\\n                <label *ngIf=\\\"dob.errors.required\\\" class=\\\"validation-message\\\">Date of birth is required.</label>\\n            </div>\\n        </div>\\n\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Register</button>\\n    </form>\\n</div>\\n<br />\\n\\n<!-- Success message -->\\n<div class=\\\"success\\\" *ngIf=\\\"successMessage\\\">\\n    <label>Registration is completed. Please log into your account.</label>\\n</div>\\n\\n<!-- Error message -->\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\">\\n    <label> {{errorMessages}}</label>\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"register\",\n  templateUrl: \"./register.component.html\",\n  styleUrls: [\"./register.component.css\"]\n})\nexport class RegisterComponent implements OnInit {\n  // Email regular expression to validate email format\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  nameRegex = /^([a-zA-Z ]){2,30}$/;\n  gender = null;\n  genders = [\"Female\", \"Male\", \"Other\"];\n  successMessage: boolean;\n  errorMessages: string;\n\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    // If user is already logged in, redirect to user profile page\n    if (this.authService.isLoggedIn()) {\n      this.router.navigateByUrl(\"/userprofile\");\n    }\n  }\n\n  onRegister(form: NgForm) {\n    this.authService.registerUser(form.value).subscribe(\n      // if registration is successfull\n      res => {\n        this.successMessage = true;\n        setTimeout(() => (this.successMessage = false), 4000); // Success message dissapears after 4 seconds\n        this.resetForm(form);\n      },\n\n      // if there are errors sent from server-side\n      err => {\n        if (err.status === 422) {\n          this.errorMessages = err.error.join(\"<br/>\");\n        } else\n          this.errorMessages = \"Something went wrong. Please contact admin.\";\n      }\n    );\n  }\n\n  resetForm(form: NgForm) {\n    this.authService.selectedUser = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      gender: \"\",\n      dob: null,\n      isAdmin: false,\n      _id: \"\"\n    };\n    form.resetForm();\n    this.errorMessages = \"\";\n  }\n}\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\n#movie{\\n    font-family: 'Source Sans Pro', sans-serif;\\n    font-size: 20px;\\n    color: grey;\\n}\\nspan{\\n   font-weight: bolder;\\n   font-size: 25px;\\n   color: black;\\n   font-family: 'Source Sans Pro', sans-serif;\\n   font-family: 'Semi-Bold', sans-serif;\\n}\\nh3{\\n    text-align: center;\\n    color: black;\\n    font-family: 'Cormorant SC', sans-serif;\\n    font-family: 'Bold', sans-serif;\\n}\"","module.exports = \"<br />\\n<br />\\n<div id=\\\"searchBar\\\">\\n    <form [formGroup]=\\\"form\\\">\\n        <div class=\\\"input-group\\\">\\n            <input formControlName=\\\"movieName\\\" type=\\\"text\\\" placeholder=\\\"please search here\\\" class=\\\"form-control\\\">\\n            <div class=\\\"input-group-append\\\">\\n                <button class=\\\"btn btn-outline-secondary\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" (click)=\\\"onSubmit()\\\">search</button>\\n            </div>\\n        </div>\\n        <br />\\n        <div *ngIf=\\\"movieName.invalid\\\">\\n            <div *ngIf=\\\"movieName.errors.minlength\\\">Name requires at least\\n                {{movieName.errors.minlength.requiredLength}}\\n                charaters.\\n            </div>\\n            <div *ngIf=\\\"movieName.errors.maxlength\\\">Name requires at most\\n                {{movieName.errors.maxlength.requiredLength}}\\n                charaters.\\n            </div>\\n        </div>\\n    </form>\\n    <div *ngIf=flag>\\n        <p class=\\\"alert alert-warning\\\" role=\\\"alert\\\">\\n            Sorry, the result you are looking for has not been found.\\n        </p>\\n    </div>\\n</div>\\n<div>\\n    <div *ngFor=\\\"let property of movieResult\\\" id=\\\"movie\\\">\\n        <h3>{{property.name}}</h3>\\n        <br />\\n        <br />\\n        <br />\\n        <label> <span>Sessions: </span></label>\\n        <br />\\n        <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\"\\n            [routerLink]=\\\"['../genre', showtime,property._id]\\\">{{showtime | date:'short'}}<br />\\n        </div>\\n        <br />\\n        <label><span>Running time: </span>\\n            <br />\\n            <br />\\n            {{property.runningTime}} mins\\n        </label>\\n        <br />\\n        <br />\\n        <label><span>Director: </span>\\n            <br />\\n            <br />\\n            {{property.director | uppercase}}\\n        </label>\\n        <br />\\n        <br />\\n        <label><span>Cast:</span></label>\\n        <br />\\n        <div *ngFor=\\\"let star of property.stars\\\">\\n            {{star|uppercase}}\\n            <br />\\n        </div>\\n        <br />\\n        <br />\\n        <label><span>Story: </span>\\n            <br />\\n            <br />\\n            {{property.storyline}}\\n        </label>\\n        <br />\\n        <br />\\n        <label><span>Genre:</span></label>\\n        <div *ngFor=\\\"let genre of property.genres\\\">\\n            {{genre|uppercase}}\\n        </div>\\n        <br />\\n        <br />\\n        <label><span>Status: </span>\\n            <br />\\n            <br />\\n            {{property.status | uppercase}}\\n        </label>\\n        <br />\\n        <br />\\n    </div>\"","import { MoviesService } from \"../../services/movies.service\";\nimport { Component, OnInit } from \"@angular/core\";\nimport {\n  FormGroup,\n  FormControl,\n  FormArray,\n  Validators,\n  ReactiveFormsModule\n} from \"@angular/forms\";\n\n@Component({\n  selector: \"search-bar\",\n  templateUrl: \"./search-bar.component.html\",\n  styleUrls: [\"./search-bar.component.css\"]\n})\nexport class SearchBarComponent implements OnInit {\n  searchResultId;\n  movies: any[];\n  movieResult: any[];\n  flag = false;\n\n  form = new FormGroup({\n    movieName: new FormControl(\"\", [\n      Validators.minLength(2),\n      Validators.maxLength(60)\n    ])\n  });\n\n  constructor(private service: MoviesService) { }\n\n  ngOnInit() { }\n\n  get movieName() {\n    return this.form.get(\"movieName\");\n  }\n\n  onSubmit() {\n    console.log(this.form.value);\n    this.service.getMovies().subscribe(response => {\n      this.movies = response.json();\n      console.log(this.movies);\n\n      //find every movie in the database for matching user input\n      for (let movie of this.movies) {\n        console.log(movie.name);\n\n        //if the result is not found, the flag is true.\n        this.flag = true;\n        //if words match, get the sepecific movie from database\n        if (this.CompareWithWords(movie.name, this.form.value.movieName)) {\n          //get the object id of the matched movie\n          this.searchResultId = movie._id;\n          console.log(this.searchResultId);\n          this.service\n            .getMoviesById(this.searchResultId)\n            .subscribe(response => {\n              //if the result is found, the flag is false\n              this.flag = false;\n              this.movieResult = response.json();\n              console.log(\"i got the movie!\", this.movieResult);\n            });\n        }\n      }\n    });\n  }\n\n  //method for verifying if two words match without whitespace\n  CompareWithWords(firstWord, secondWord) {\n    //remove all the whitespace of strings\n    const firstResult = firstWord\n      .toString()\n      .toLowerCase()\n      .trim()\n      .replace(/ /g, \"\");\n    const secondResult = secondWord\n      .toString()\n      .toLowerCase()\n      .trim()\n      .replace(/ /g, \"\");\n\n    return firstResult === secondResult ? true : false;\n  }\n}\n","module.exports = \"@import url(\\\"https://fonts.googleapis.com/css?family=Bold|Cormorant SC\\\");\\n\\nh3 {\\n  text-align: center;\\n  color: black;\\n  font-family: \\\"Fredericka the Great\\\", sans-serif;\\n}\\n\\nlabel {\\n  font-size: 16px;\\n  color: black;\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n}\\n\"","module.exports = \"<br />\\n<div *ngIf=\\\"userDetails\\\" class=\\\"border border-light\\\">\\n  <h3> YOUR TICKETS</h3>\\n</div>\\n<div *ngIf=\\\"tickets.length > 0\\\" class=\\\"card-group\\\">\\n  <li class=\\\"list-group-item\\\" *ngFor=\\\"let ticket of tickets; let i = index\\\" [attr.ticketId]=\\\"i\\\">\\n    <div class=\\\"card border-dark mb-3\\\" style=\\\"max-width: 18rem;\\\">\\n      <div class=\\\"card-header\\\">Ticket {{i + 1}}</div>\\n      <div class=\\\"card-body text-dark\\\">\\n        <h5 class=\\\"card-title\\\">\\n          <strong>{{ticket.movieName}}</strong>\\n        </h5>\\n        <p class=\\\"card-text\\\">\\n          <label>Session: </label> {{ticket.session | date:'short'}}\\n          <br/>\\n          <label>Email: </label> {{ticket.email}}\\n          <br/>\\n          <label>Price: </label> {{ticket.price | currency:'AUD':true:'1.2-2'}}\\n          <br/>\\n        </p>\\n        <button class=\\\"btn btn-secondary\\\" (click)=\\\"onDelete(i)\\\">Delete ticket </button>\\n      </div>\\n    </div>\\n  </li>\\n\\n</div>\\n\\n<div class=\\\"text-center\\\" *ngIf=\\\"tickets.length == 0\\\">\\n  <label style=\\\"margin:50px\\\">You have no orders in the record</label>\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { TicketService } from \"../../services/ticket.service\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\n\n@Component({\n  selector: \"ticket\",\n  templateUrl: \"./ticket.component.html\",\n  styleUrls: [\"./ticket.component.css\"]\n})\nexport class TicketComponent implements OnInit {\n  tickets: any[] = [];\n  userDetails;\n\n  constructor(\n    private ticketService: TicketService,\n    private authService: AuthenticationService\n  ) {}\n\n  ngOnInit() {\n    // Get profile of current logged in user\n    this.authService.getUserProfile().subscribe(\n      res => {\n        this.userDetails = res[\"user\"];\n        this.refreshTicketList();\n      },\n      err => {}\n    );\n  }\n\n  refreshTicketList() {\n    // Get tickets with the same user Id of this currrent logged in user\n    this.ticketService.getTickets().subscribe(response => {\n      this.tickets = response\n        .json()\n        .filter(ticket => ticket.userId === this.userDetails._id);\n    });\n  }\n  //delete a movie\n  onDelete(ticketId) {\n    let objectId: number;\n    console.log(ticketId);\n\n    //get the ticket id based on the index of the ticket\n    objectId = this.tickets[ticketId]._id;\n    console.log(objectId);\n\n    //delete the specific ticket\n    this.ticketService.deleteTicket(objectId).subscribe(response => {\n      // Refresh the ticket list after deletion or changes will not be displayed without reloading the page\n      this.refreshTicketList();\n\n      // console.log(\"Ticket is removed\");\n      // console.log(response.json());\n    });\n  }\n}\n","module.exports = \"@import url(\\\"https://fonts.googleapis.com/css?family=Bold|Cormorant SC\\\");\\n\\nhtml,\\nbody {\\n  height: 100%;\\n  margin: 0;\\n}\\n\\n#list {\\n  color: grey;\\n  font-size: 20px;\\n  font-family: \\\"Cormorant SC\\\", sans-serif;\\n}\\n\\nh2 {\\n  text-align: left;\\n  color: grey;\\n  font-family: \\\"Cormorant SC\\\", sans-serif;\\n  font-family: \\\"Bold\\\", sans-serif;\\n}\\n\\nh3 {\\n  text-align: center;\\n  color: black;\\n  font-family: \\\"Fredericka the Great\\\", sans-serif;\\n}\\n\\nlabel {\\n  font-size: 20px;\\n  color: black;\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n  margin-right: 10px;\\n}\\n\\n.btn {\\n  margin: 10px;\\n}\\n\\n.list-group-item {\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n  font-size: 20px;\\n  color: grey;\\n}\\n\"","module.exports = \"<table *ngIf=\\\"userDetails\\\">\\n  <div class=\\\"wrapper\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-header\\\">\\n        Welcome back, {{userDetails.firstName}} {{userDetails.lastName}}!\\n      </div>\\n      <div class=\\\"card-body\\\">\\n        <h3 class=\\\"card-title\\\">YOUR PROFILE</h3>\\n        <ul class=\\\"list-group list-group-flush\\\">\\n          <li class=\\\"list-group-item\\\">\\n            <label>First Name: </label> {{userDetails.firstName}}</li>\\n          <li class=\\\"list-group-item\\\">\\n            <label>Last Name: </label> {{userDetails.lastName}}</li>\\n          <li class=\\\"list-group-item\\\">\\n            <label>Email: </label> {{userDetails.email}}</li>\\n          <li class=\\\"list-group-item\\\">\\n            <label>Gender: </label> {{userDetails.gender}}</li>\\n          <li class=\\\"list-group-item\\\">\\n            <label>Date of birth: </label> {{userDetails.dob | date: 'longDate'}}</li>\\n        </ul>\\n        <div class=\\\"button\\\">\\n          <button class=\\\"btn btn-secondary\\\" (click)=\\\"onLogout()\\\">Logout</button>\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"clickToEditProfile()\\\">Edit Profile</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\"","import { Component, OnInit } from \"@angular/core\";\nimport { AuthenticationService } from \"../../services/authentication.service\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"user-profile\",\n  templateUrl: \"./user-profile.component.html\",\n  styleUrls: [\"./user-profile.component.css\"]\n})\nexport class UserProfileComponent implements OnInit {\n  userDetails;\n\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.authService.getUserProfile().subscribe(\n      res => {\n        this.userDetails = res[\"user\"];\n      },\n      err => {}\n    );\n  }\n\n  // Method to logout: delete token and redirect user to login page\n  onLogout() {\n    this.authService.deleteToken();\n    this.router.navigate([\"/login\"]);\n  }\n\n  clickToEditProfile() {\n    this.router.navigate([\"/editprofile\"]);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\n\nimport { environment } from \"../../environments/environment\";\nimport { User } from \"../components/auth/user.model\";\nimport decode from \"jwt-decode\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AuthenticationService {\n  // Initialize a User object with empty properties\n  selectedUser: User = {\n    _id: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    gender: \"\",\n    dob: null,\n    isAdmin: false\n  };\n\n  user: User;\n\n  role;\n\n  noAuthHeader = { headers: new HttpHeaders({ NoAuth: \"True\" }) };\n\n  constructor(private http: HttpClient) { }\n\n  // httpMethods\n\n  registerUser(user: User) {\n    return this.http.post(\n      environment.apiBaseUrl + \"/register\",\n      user,\n      this.noAuthHeader\n    );\n  }\n\n  login(authCredentials) {\n    return this.http.post(\n      environment.apiBaseUrl + \"/authenticate\",\n      authCredentials,\n      this.noAuthHeader\n    );\n  }\n\n  // need jwt in the header\n  getUserProfile() {\n    return this.http.get(environment.apiBaseUrl + \"/userprofile\");\n  }\n\n  updateUser(user: User) {\n    // console.log(\"in service put\", user);\n    return this.http.put(environment.apiBaseUrl + \"/editprofile\", user);\n  }\n\n  getAdmin() {\n    return this.http.get(environment.apiBaseUrl + \"/admin\");\n  }\n\n  //Helper Methods\n\n  // save token of current user inside local storage\n  setToken(token: string) {\n    localStorage.setItem(\"token\", token);\n  }\n\n  // get the token in local storage\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n\n  // delete token inside local storage\n  deleteToken() {\n    localStorage.removeItem(\"token\");\n  }\n\n  // decode JWT token inside local storage\n  decodeToken() {\n    return decode(localStorage.getItem(\"token\"));\n  }\n  // Extract user payload from token\n  getUserPayload() {\n    var token = this.getToken();\n    if (token) {\n      var userPayload = atob(token.split(\".\")[1]);\n      return JSON.parse(userPayload);\n    } else return null;\n  }\n\n  isLoggedIn() {\n    var userPayload = this.getUserPayload();\n    // check if jwt expiration time is over or not\n    if (userPayload) return userPayload.exp > Date.now() / 1000;\n    else return false;\n  }\n\n  isAdmin() {\n    this.role = this.decodeToken().admin;\n    //console.log(this.role);\n    return this.role;\n  }\n\n  displayAdmin() {\n    if (this.isLoggedIn() && this.isAdmin()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Http } from \"@angular/http\";\nimport { environment } from \"../../environments/environment\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class MoviesService {\n  constructor(private http: Http) { }\n\n  private url = environment.apiBaseUrl + \"/movies\";\n\n  getMovies() {\n    return this.http.get(this.url);\n  }\n\n  getMoviesById(_id) {\n    return this.http.get(this.url + \"/\" + _id);\n  }\n\n  createMovies(movie) {\n    return this.http.post(this.url, movie);\n  }\n\n  updateMovies(movie) {\n    console.log(\"in service put\", movie);\n    return this.http.put(this.url + \"/\" + movie._id, movie);\n  }\n\n  deleteMovies(_id) {\n    return this.http.delete(this.url + \"/\" + _id);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { environment } from \"../../environments/environment\";\nimport { Http } from \"@angular/http\";\nimport { MovieBooking } from \"../components/book-movies/book-movies.model\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class TicketService {\n  tickets: MovieBooking[];\n  constructor(private http: Http) {}\n\n  bookMovie(booking: MovieBooking) {\n    return this.http.post(environment.apiBaseUrl + \"/book\", booking);\n  }\n\n  getTickets() {\n    return this.http.get(environment.apiBaseUrl + \"/tickets\");\n  }\n\n  deleteTicket(_id) {\n    return this.http.delete(environment.apiBaseUrl + \"/\" + _id);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  // Run in the cloud\n  // apiBaseUrl:\n  //   \"http://ec2-18-236-193-77.us-west-2.compute.amazonaws.com:3000/api\",\n\n  // Run locally\n  apiBaseUrl: \"http://localhost:3000/api\"\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from \"@angular/core\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nimport { AppModule } from \"./app/app.module\";\nimport { environment } from \"./environments/environment\";\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}
=======
{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/auth/admin.guard.ts","webpack:///./src/app/auth/auth.guard.ts","webpack:///./src/app/auth/auth.interceptor.ts","webpack:///./src/app/components/add-movie-form/add-movie-form.component.css","webpack:///./src/app/components/add-movie-form/add-movie-form.component.html","webpack:///./src/app/components/add-movie-form/add-movie-form.component.ts","webpack:///./src/app/components/admin/admin.component.css","webpack:///./src/app/components/admin/admin.component.html","webpack:///./src/app/components/admin/admin.component.ts","webpack:///./src/app/components/book-movies/book-movies.component.css","webpack:///./src/app/components/book-movies/book-movies.component.html","webpack:///./src/app/components/book-movies/book-movies.component.ts","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.css","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.html","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.ts","webpack:///./src/app/components/common/validators/formArray.validators.ts","webpack:///./src/app/components/common/validators/movie.name.validators.ts","webpack:///./src/app/components/company-information/company-information.component.css","webpack:///./src/app/components/company-information/company-information.component.html","webpack:///./src/app/components/company-information/company-information.component.ts","webpack:///./src/app/components/edit-profile/edit-profile.component.css","webpack:///./src/app/components/edit-profile/edit-profile.component.html","webpack:///./src/app/components/edit-profile/edit-profile.component.ts","webpack:///./src/app/components/footer/footer.component.css","webpack:///./src/app/components/footer/footer.component.html","webpack:///./src/app/components/footer/footer.component.ts","webpack:///./src/app/components/genre/genre.component.css","webpack:///./src/app/components/genre/genre.component.html","webpack:///./src/app/components/genre/genre.component.ts","webpack:///./src/app/components/header/header.component.css","webpack:///./src/app/components/header/header.component.html","webpack:///./src/app/components/header/header.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/message/message.component.css","webpack:///./src/app/components/message/message.component.html","webpack:///./src/app/components/message/message.component.ts","webpack:///./src/app/components/movie/movie.component.css","webpack:///./src/app/components/movie/movie.component.html","webpack:///./src/app/components/movie/movie.component.ts","webpack:///./src/app/components/navigation-bar/navigation-bar.component.css","webpack:///./src/app/components/navigation-bar/navigation-bar.component.html","webpack:///./src/app/components/navigation-bar/navigation-bar.component.ts","webpack:///./src/app/components/not-found-page/not-found-page.component.css","webpack:///./src/app/components/not-found-page/not-found-page.component.html","webpack:///./src/app/components/not-found-page/not-found-page.component.ts","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.css","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.html","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/components/search-bar/search-bar.component.css","webpack:///./src/app/components/search-bar/search-bar.component.html","webpack:///./src/app/components/search-bar/search-bar.component.ts","webpack:///./src/app/components/ticket/ticket.component.css","webpack:///./src/app/components/ticket/ticket.component.html","webpack:///./src/app/components/ticket/ticket.component.ts","webpack:///./src/app/components/user-profile/user-profile.component.css","webpack:///./src/app/components/user-profile/user-profile.component.html","webpack:///./src/app/components/user-profile/user-profile.component.ts","webpack:///./src/app/services/authentication.service.ts","webpack:///./src/app/services/movies.service.ts","webpack:///./src/app/services/ticket.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<header></header>\\r\\n<navigation-bar></navigation-bar>\\r\\n<router-outlet></router-outlet>\\r\\n<footer></footer>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'GoldenCinema';\r\n}\r\n","import { Component } from \"@angular/core\";\r\n// Built-in imports\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\r\n\r\n// Component imports\r\nimport { AppComponent } from \"./app.component\";\r\nimport { SearchBarComponent } from \"./components/search-bar/search-bar.component\";\r\nimport { NavigationBarComponent } from \"./components/navigation-bar/navigation-bar.component\";\r\nimport { NowShowingMovieListComponent } from \"./components/now-showing-movie-list/now-showing-movie-list.component\";\r\nimport { ComingSoonMovieListComponent } from \"./components/coming-soon-movie-list/coming-soon-movie-list.component\";\r\nimport { FooterComponent } from \"./components/footer/footer.component\";\r\nimport { HeaderComponent } from \"./components/header/header.component\";\r\nimport { GenreComponent } from \"./components/genre/genre.component\";\r\nimport { HomeComponent } from \"./components/home/home.component\";\r\nimport { CompanyInformationComponent } from \"./components/company-information/company-information.component\";\r\nimport { NotFoundPageComponent } from \"./components/not-found-page/not-found-page.component\";\r\nimport { AddMovieFormComponent } from \"./components/add-movie-form/add-movie-form.component\";\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\nimport { RegisterComponent } from \"./components/register/register.component\";\r\nimport { MovieComponent } from \"./components/movie/movie.component\";\r\nimport { AdminComponent } from \"./components/admin/admin.component\";\r\nimport { MessageComponent } from \"./components/message/message.component\";\r\nimport { BookMoviesComponent } from \"./components/book-movies/book-movies.component\";\r\nimport { UserProfileComponent } from \"./components/user-profile/user-profile.component\";\r\nimport { TicketComponent } from \"./components/ticket/ticket.component\";\r\nimport { EditProfileComponent } from \"./components/edit-profile/edit-profile.component\";\r\n\r\n// Service imports\r\nimport { AuthenticationService } from \"./services/authentication.service\";\r\nimport { MoviesService } from \"./services/movies.service\";\r\nimport { TicketService } from \"./services/ticket.service\";\r\n\r\n// Route imports\r\nimport { RoutingModule } from \"./app.routing\";\r\n\r\n// Other imports\r\nimport { AuthGuard } from \"./auth/auth.guard\";\r\nimport { AdminGuard } from \"./auth/admin.guard\";\r\nimport { AuthInterceptor } from \"./auth/auth.interceptor\";\r\nimport { MyDatePickerModule } from \"mydatepicker\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SearchBarComponent,\r\n    NavigationBarComponent,\r\n    NowShowingMovieListComponent,\r\n    ComingSoonMovieListComponent,\r\n    FooterComponent,\r\n    HeaderComponent,\r\n    GenreComponent,\r\n    HomeComponent,\r\n    CompanyInformationComponent,\r\n    AddMovieFormComponent,\r\n    NotFoundPageComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    MovieComponent,\r\n    UserProfileComponent,\r\n    AdminComponent,\r\n    MessageComponent,\r\n    BookMoviesComponent,\r\n    TicketComponent,\r\n    EditProfileComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    HttpModule,\r\n    RoutingModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MyDatePickerModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptor,\r\n      multi: true\r\n    },\r\n    AuthenticationService,\r\n    AuthGuard,\r\n    AdminGuard,\r\n    MoviesService,\r\n    TicketService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n","import { BookMoviesComponent } from \"./components/book-movies/book-movies.component\";\r\nimport { SearchBarComponent } from \"./components/search-bar/search-bar.component\";\r\nimport { MessageComponent } from \"./components/message/message.component\";\r\nimport { AdminComponent } from \"./components/admin/admin.component\";\r\nimport { MovieComponent } from \"./components/movie/movie.component\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { GenreComponent } from \"./components/genre/genre.component\";\r\nimport { HomeComponent } from \"./components/home/home.component\";\r\nimport { CompanyInformationComponent } from \"./components/company-information/company-information.component\";\r\nimport { NotFoundPageComponent } from \"./components/not-found-page/not-found-page.component\";\r\nimport { AddMovieFormComponent } from \"./components/add-movie-form/add-movie-form.component\";\r\nimport { RegisterComponent } from \"./components/register/register.component\";\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\nimport { UserProfileComponent } from \"./components/user-profile/user-profile.component\";\r\nimport { EditProfileComponent } from \"./components/edit-profile/edit-profile.component\";\r\nimport { TicketComponent } from \"./components/ticket/ticket.component\";\r\nimport { AuthGuard } from \"./auth/auth.guard\";\r\nimport { AdminGuard } from \"./auth/admin.guard\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: HomeComponent\r\n  },\r\n  {\r\n    path: \"home\",\r\n    component: HomeComponent\r\n  },\r\n  {\r\n    path: \"genre\",\r\n    component: GenreComponent\r\n  },\r\n  {\r\n    path: \"admin\",\r\n    component: AdminComponent,\r\n    canActivate: [AuthGuard, AdminGuard],\r\n    data: { isAdmin: true }\r\n  },\r\n  {\r\n    path: \"companyInformation\",\r\n    component: CompanyInformationComponent\r\n  },\r\n  {\r\n    path: \"addMovieForm\",\r\n    component: AddMovieFormComponent,\r\n    canActivate: [AuthGuard, AdminGuard],\r\n    data: { isAdmin: true }\r\n  },\r\n  {\r\n    path: \"login\",\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: \"register\",\r\n    component: RegisterComponent\r\n  },\r\n  {\r\n    path: \"userprofile\",\r\n    component: UserProfileComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: \"editprofile\",\r\n    component: EditProfileComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: \"tickets\",\r\n    component: TicketComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: \"movie/:_id\",\r\n    component: MovieComponent\r\n  },\r\n  {\r\n    path: \"message\",\r\n    component: MessageComponent\r\n  },\r\n  {\r\n    path: \"search\",\r\n    component: SearchBarComponent\r\n  },\r\n  {\r\n    path: \"movie/:showtime/:_id\",\r\n    component: BookMoviesComponent\r\n  },\r\n  {\r\n    path: \"genre/:showtime/:_id\",\r\n    component: BookMoviesComponent\r\n  },\r\n  {\r\n    path: \"search/:showtime/:_id\",\r\n    component: BookMoviesComponent\r\n  },\r\n  {\r\n    path: \"**\",\r\n    component: NotFoundPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RoutingModule {}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router\r\n} from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthenticationService } from \"../services/authentication.service\";\r\nimport \"rxjs/add/operator/switchMap\";\r\nimport \"rxjs/add/operator/map\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    // console.log(\"guard level: admin \" + this.authService.isAdmin());\r\n    // console.log(\"next.data.isAdmin \" + next.data.isAdmin);\r\n\r\n    if (!this.authService.isAdmin() === next.data.isAdmin) {\r\n      this.router.navigateByUrl(\"/login\");\r\n      this.authService.deleteToken();\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router\r\n} from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthenticationService } from \"../services/authentication.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    // If user is not logged in, redirect to login page and delete token in local storage\r\n    if (!this.authService.isLoggedIn()) {\r\n      this.router.navigateByUrl(\"/login\");\r\n      this.authService.deleteToken();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent\r\n} from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthenticationService } from \"../services/authentication.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    if (req.headers.get(\"noauth\")) return next.handle(req.clone());\r\n    else {\r\n      const clonedReq = req.clone({\r\n        headers: req.headers.set(\r\n          \"Authorization\",\r\n          \"Bearer \" + this.authService.getToken()\r\n        )\r\n      });\r\n      return next.handle(clonedReq).pipe(\r\n        tap(\r\n          event => {},\r\n          err => {\r\n            if (err.error.auth == false) {\r\n              this.router.navigateByUrl(\"/login\");\r\n            }\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"ClickToAdmin()\\\">Back to admin</button>\\r\\n<br />\\r\\n<br />\\r\\n<br />\\r\\n<form [formGroup]=\\\"form\\\" id=\\\"form\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"name\\\">Movie Name</label>\\r\\n        <input formControlName=\\\"name\\\" id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\r\\n        <div *ngIf=\\\"name.touched && name.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"name.errors.required\\\">Name is required</div>\\r\\n            <div *ngIf=\\\"name.errors.minlength\\\">Name requires at least {{name.errors.minlength.requiredLength}}\\r\\n                charaters.</div>\\r\\n            <div *ngIf=\\\"name.errors.maxlength\\\">Name requires at most {{name.errors.maxlength.requiredLength}}\\r\\n                charaters.</div>\\r\\n            <div *ngIf=\\\"name.errors.shouldBeUnique\\\">Name should be unique.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"runningTime\\\">Running time</label>\\r\\n        <input formControlName=\\\"runningTime\\\" id=\\\"runningTime\\\" type=\\\"number\\\" class=\\\"form-control\\\">\\r\\n        <div *ngIf=\\\"runningTime.touched && runningTime.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"runningTime.errors.required\\\">Running time is required.</div>\\r\\n            <div *ngIf=\\\"runningTime.errors.min\\\">Running time requires at least greater than or equal 1.</div>\\r\\n            <div *ngIf=\\\"runningTime.errors.max\\\">Running time requires less than or equal 500.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"showtime\\\">Session <br />(please press enter for the datetime one by one and delete the datetime by\\r\\n            clicking it)</label>\\r\\n        <input formArrayName=\\\"showtime\\\" id=\\\"showtime\\\" type=\\\"datetime-local\\\" (keyup.enter)=\\\"addShowtime(showtimeItem)\\\"\\r\\n            #showtimeItem class=\\\"form-control\\\">\\r\\n        <ul class=\\\"list-group\\\">\\r\\n            <li *ngFor=\\\"let showtimeItem of showtime.controls , let i = index\\\" (click)=\\\"\\r\\n                    removeShowtime(showtimeItem)\\\"\\r\\n                class=\\\"list-group-item\\\">\\r\\n                {{showtime.value[i]}}\\r\\n            </li>\\r\\n        </ul>\\r\\n        <!-- <div *ngIf=\\\"showtime.touched && showtime.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"showtime.errors.required\\\">showtime is required</div>\\r\\n                <div *ngIf=\\\"showtime.errors.minlength\\\">showtime requires at least\\r\\n                    {{showtime.errors.minlength.requiredLength}}\\r\\n                    charaters.</div>\\r\\n                <div *ngIf=\\\"showtime.errors.maxlength\\\">showtime requires at most\\r\\n                    {{showtime.errors.maxlength.requiredLength}}\\r\\n                    charaters.</div>\\r\\n            </div> -->\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"stars\\\">Stars <br />(please press enter for the name one by one and delete the name by\\r\\n            clicking it) </label>\\r\\n        <input formArrayName=\\\"stars\\\" id=\\\"stars\\\" type=\\\"text\\\" (keyup.enter)=\\\"addStar(star)\\\" #star class=\\\"form-control\\\">\\r\\n        <ul class=\\\"list-group\\\">\\r\\n            <li *ngFor=\\\"let star of stars.controls\\\" (click)=\\\"removeStar(star)\\\" class=\\\"list-group-item\\\">\\r\\n                {{star.value}}\\r\\n            </li>\\r\\n        </ul>\\r\\n        <div *ngIf=\\\"stars.touched && stars.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"stars.errors.cannotBeNull\\\">Stars name is required</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"genres\\\">Genres <br />(please press enter for the genre one by one and delete the genre by\\r\\n            clicking it)</label>\\r\\n        <input formArrayName=\\\"genres\\\" id=\\\"genres\\\" type=\\\"text\\\" (keyup.enter)=\\\"addGenre(genre)\\\" #genre placeholder=\\\"Please enter dramas/ action/ crime/ horror/ comedies/ fantasy/ romance\\\"\\r\\n            class=\\\"form-control\\\">\\r\\n        <ul class=\\\"list-group\\\">\\r\\n            <li *ngFor=\\\"let genre of genres.controls\\\" (click)=\\\"removeGenre(genre)\\\" class=\\\"list-group-item\\\">\\r\\n                {{genre.value}}\\r\\n            </li>\\r\\n        </ul>\\r\\n        <!-- <div *ngIf=\\\"genres.touched && genres.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"genres.errors.required\\\">showtime is required</div>\\r\\n                <div *ngIf=\\\"genres.errors.minlength\\\">showtime requires at least\\r\\n                    {{showtime.errors.minlength.requiredLength}}\\r\\n                    charaters.</div>\\r\\n                <div *ngIf=\\\"genres.errors.maxlength\\\">showtime requires at most\\r\\n                    {{showtime.errors.maxlength.requiredLength}}\\r\\n                    charaters.</div>\\r\\n            </div> -->\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"director\\\">Director</label>\\r\\n        <input formControlName=\\\"director\\\" id=\\\"director\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\r\\n        <div *ngIf=\\\"director.touched && director.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"director.errors.required\\\">Director name is required</div>\\r\\n            <div *ngIf=\\\"director.errors.minlength\\\">Director name requires at least\\r\\n                {{director.errors.minlength.requiredLength}} charaters.</div>\\r\\n            <div *ngIf=\\\"director.errors.maxlength\\\">Director name requires at most\\r\\n                {{director.errors.maxlength.requiredLength}} charaters.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"storyline\\\">Storyline</label>\\r\\n        <textarea formControlName=\\\"storyline\\\" id=\\\"storyline\\\" clos=\\\"30\\\" rows=\\\"10 \\\" class=\\\"form-control\\\"></textarea>\\r\\n        <div *ngIf=\\\"storyline.touched && storyline.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"storyline.errors.required\\\">Storyline is required</div>\\r\\n            <div *ngIf=\\\"storyline.errors.minlength\\\">Storyline requires at least\\r\\n                {{storyline.errors.minlength.requiredLength}}\\r\\n                charaters.</div>\\r\\n            <div *ngIf=\\\"storyline.errors.maxlength\\\">Storyline requires at most\\r\\n                {{storyline.errors.maxlength.requiredLength}}\\r\\n                charaters.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"Price\\\">Price</label>\\r\\n        <input formControlName=\\\"price\\\" id=\\\"price\\\" type=\\\"number\\\" class=\\\"form-control\\\">\\r\\n        <div *ngIf=\\\"price.touched && price.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"price.errors.required\\\">Price is required.</div>\\r\\n            <div *ngIf=\\\"price.errors.min\\\">Price requires at least greater than or equal 1.</div>\\r\\n            <div *ngIf=\\\"price.errors.max\\\">price requires less than or equal 10000.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Status</label>\\r\\n        <br>\\r\\n        <label for=\\\"nowShowing\\\">Now Showing: </label>\\r\\n        <input formControlName=\\\"status\\\" id=\\\"nowShowing\\\" type=\\\"radio\\\" class=\\\"form-control\\\" value=\\\"nowShowing\\\">\\r\\n\\r\\n        <label for=\\\"comingSoon\\\">Coming Soon:</label>\\r\\n        <input formControlName=\\\"status\\\" id=\\\"comingSoon\\\" type=\\\"radio\\\" class=\\\"form-control\\\" value=\\\"comingSoon\\\">\\r\\n    </div>\\r\\n\\r\\n    <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" (click)=\\\"onSubmit()\\\" class=\\\"btn btn-primary\\\">Submit</button>\\r\\n    <br />\\r\\n    <br />\\r\\n    <div class=\\\"alert alert-info\\\" role=\\\"alert\\\" *ngIf=\\\"!form.valid\\\">\\r\\n        <label>Please complete all the information, thanks!</label>\\r\\n    </div>\\r\\n    <div class=\\\"alert alert-success\\\" role=\\\"alert\\\" *ngIf=\\\"form.valid\\\">\\r\\n        <label>You can submit the movie now.</label>\\r\\n    </div>\\r\\n\\r\\n</form>\\r\\n<br />\"","import { MovieInfoValidators } from \"../common/validators/movie.name.validators\";\r\nimport { FormArrayValidators } from \"../common/validators/formArray.validators\";\r\nimport { MoviesService } from \"../../services/movies.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  FormArray,\r\n  Validators,\r\n  ReactiveFormsModule\r\n} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"add-movie-form\",\r\n  templateUrl: \"./add-movie-form.component.html\",\r\n  styleUrls: [\"./add-movie-form.component.css\"]\r\n})\r\nexport class AddMovieFormComponent implements OnInit {\r\n  form = new FormGroup({\r\n    name: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(1),\r\n        Validators.maxLength(60)\r\n      ]),\r\n      MovieInfoValidators.shouldBeUnique(this.service)\r\n    ),\r\n    runningTime: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.min(1),\r\n        Validators.max(500)\r\n      ])\r\n    ),\r\n    director: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(1),\r\n        Validators.maxLength(50)\r\n      ])\r\n    ),\r\n    stars: new FormArray([], FormArrayValidators.cannotBeNull),\r\n    storyline: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(10),\r\n        Validators.maxLength(1000)\r\n      ])\r\n    ),\r\n    showtime: new FormArray([], FormArrayValidators.cannotBeNull),\r\n    genres: new FormArray([], FormArrayValidators.cannotBeNull),\r\n    price: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.min(1),\r\n        Validators.max(10000)\r\n      ])\r\n    ),\r\n    status: new FormControl(\"\", Validators.required)\r\n  });\r\n\r\n  //accesser for the FormConrol name\r\n  get name() {\r\n    return this.form.get(\"name\");\r\n  }\r\n  //accesser for the FormConrol runningTime\r\n  get runningTime() {\r\n    return this.form.get(\"runningTime\");\r\n  }\r\n  //accesser for the FormControl director\r\n  get director() {\r\n    return this.form.get(\"director\");\r\n  }\r\n  //accesser for the FormArray stars\r\n  get stars() {\r\n    return this.form.get(\"stars\") as FormArray;\r\n  }\r\n  //accesser for the FormControl storyline\r\n  get storyline() {\r\n    return this.form.get(\"storyline\");\r\n  }\r\n  //accesser for the FormArray showtime\r\n  get showtime() {\r\n    return this.form.get(\"showtime\") as FormArray;\r\n  }\r\n  //accesser for the FormArray genres\r\n  get genres() {\r\n    return this.form.get(\"genres\") as FormArray;\r\n  }\r\n  //accesser for the FormControl storyline\r\n  get status() {\r\n    return this.form.get(\"status\");\r\n  }\r\n  //accesser for the FormConrol runningTime\r\n  get price() {\r\n    return this.form.get(\"price\");\r\n  }\r\n\r\n  constructor(private router: Router, private service: MoviesService) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  //add star name in the stars array\r\n  addStar(star: HTMLInputElement) {\r\n    this.stars.push(new FormControl(star.value));\r\n    //clear the enter field\r\n    star.value = \"\";\r\n  }\r\n  //delete a star name in the stars array\r\n  removeStar(star: FormControl) {\r\n    let index = this.stars.controls.indexOf(star);\r\n    this.stars.removeAt(index);\r\n  }\r\n\r\n  //add showtime in the stars array\r\n  addShowtime(showtimeItem: HTMLInputElement) {\r\n    this.showtime.push(new FormControl(showtimeItem.value));\r\n    //clear the enter field\r\n    showtimeItem.value = \"\";\r\n  }\r\n  //delete a star name in the stars array\r\n  removeShowtime(showtimeItem: FormControl) {\r\n    let index = this.stars.controls.indexOf(showtimeItem);\r\n    this.showtime.removeAt(index);\r\n  }\r\n\r\n  //add star name in the stars array\r\n  addGenre(genre: HTMLInputElement) {\r\n    this.genres.push(new FormControl(genre.value));\r\n    //clear the enter field\r\n    genre.value = \"\";\r\n  }\r\n  //delete a star name in the stars array\r\n  removeGenre(genre: FormControl) {\r\n    let index = this.genres.controls.indexOf(genre);\r\n    this.genres.removeAt(index);\r\n  }\r\n\r\n  //submit the form\r\n  onSubmit() {\r\n    //console.log(this.form.value);\r\n    this.service.createMovies(this.form.value).subscribe(response => {\r\n      console.log(response.json());\r\n    });\r\n\r\n    //give a prompt of sucessful operation to admin\r\n    this.router.navigate([\"/message\"]);\r\n  }\r\n\r\n  //button back to admin page\r\n  ClickToAdmin() {\r\n    this.router.navigate([\"/admin\"]);\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<div id=\\\"admin\\\">\\r\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"clickToAddMovie()\\\">Add Movies</button>\\r\\n  <br />\\r\\n  <br />\\r\\n  <div *ngFor=\\\"let movie of movies; let i = index\\\" [attr.movieIndex]=\\\"i\\\">\\r\\n    <br />\\r\\n    <h3>{{movie.name}}</h3>\\r\\n    <br />\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"onDelete(i)\\\">Delete movie </button>\\r\\n    <br />\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"onUpdate(i)\\\">Update Status</button>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Session time: </span>\\r\\n      <br />\\r\\n      <br />\\r\\n      <div *ngFor=\\\"let showtime of movie.showtime\\\">{{showtime | date:'short'}}<br /></div>\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Running time:</span>\\r\\n      <br />\\r\\n      <br />\\r\\n      {{movie.runningTime}} </label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Director: </span>\\r\\n      <br />\\r\\n      <br />\\r\\n      {{movie.director|uppercase}}</label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <span>Cast: </span>\\r\\n    <br />\\r\\n    <br />\\r\\n    <div *ngFor=\\\"let star of movie.stars\\\">\\r\\n      <label>{{star|uppercase}}</label>\\r\\n      <br />\\r\\n    </div>\\r\\n    <br />\\r\\n    <label><span>Storyline:</span>\\r\\n      <br />\\r\\n      <br />\\r\\n      {{movie.storyline}}</label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <span>Genre: </span>\\r\\n    <br />\\r\\n    <br />\\r\\n    <div *ngFor=\\\"let genre of movie.genres\\\">\\r\\n      <label>{{genre|uppercase}}</label>\\r\\n      <br />\\r\\n    </div>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Price: </span>\\r\\n      <br />\\r\\n      <br />\\r\\n      {{movie.price | currency:'AUD':true:'1.2-2'}} </label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Status:\\r\\n        <br />\\r\\n        <br />\\r\\n      </span>{{movie.status|uppercase}}</label>\\r\\n    <br />\\r\\n    <br />\\r\\n  </div>\\r\\n</div>\"","import { MoviesService } from \"../../services/movies.service\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\nimport { Router } from \"@angular/router\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"admin\",\r\n  templateUrl: \"./admin.component.html\",\r\n  styleUrls: [\"./admin.component.css\"]\r\n})\r\nexport class AdminComponent implements OnInit {\r\n  movies: any[];\r\n  userAdmin: boolean;\r\n\r\n  //initialize movie service and router\r\n  constructor(\r\n    private movieService: MoviesService,\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    //get all movies\r\n    this.movieService.getMovies().subscribe(response => {\r\n      this.movies = response.json();\r\n    });\r\n  }\r\n\r\n  //delete a movie\r\n  onDelete(movieIndex) {\r\n    let objectId: number;\r\n    console.log(movieIndex);\r\n\r\n    //get the movie id based on the index of the movie\r\n    objectId = this.movies[movieIndex]._id;\r\n    console.log(objectId);\r\n\r\n    //delete the specific movie\r\n    this.movieService.deleteMovies(objectId).subscribe(response => {\r\n      console.log(response.json());\r\n    });\r\n\r\n    //give a prompt of sucessful operation to admin\r\n    this.router.navigate([\"/message\"]);\r\n  }\r\n\r\n  //update the status of a movie\r\n  onUpdate(movieIndex) {\r\n    // update the status of a movie\r\n    this.movies[movieIndex].status === \"nowShowing\"\r\n      ? (this.movies[movieIndex].status = \"comingSoon\")\r\n      : (this.movies[movieIndex].status = \"nowShowing\");\r\n\r\n    //get the current movie\r\n    const movie = this.movies[movieIndex];\r\n    console.log(\"before update\", movie);\r\n\r\n    //update the status of the specific movie\r\n    this.movieService.updateMovies(movie).subscribe(response => {\r\n      console.log(\"response from update:\", response.json());\r\n    });\r\n  }\r\n\r\n  clickToAddMovie() {\r\n    this.router.navigate([\"/addMovieForm\"]);\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"backToHome()\\\">Home Page</button>\\r\\n<br />\\r\\n<br />\\r\\n<br />\\r\\n<h2>Booking:</h2>\\r\\n<div *ngFor=\\\"let property of movie\\\" id=\\\"movie\\\">\\r\\n  <br />\\r\\n  <h3>{{property.name}}</h3>\\r\\n  <br />\\r\\n\\r\\n  <label>\\r\\n    <span>Sessions: </span>\\r\\n  </label>\\r\\n  <div>{{bookingTime | date:'short'}}\\r\\n    <br />\\r\\n  </div>\\r\\n  <br />\\r\\n  <label>\\r\\n    <span>Price: </span>{{property.price | currency:'AUD':true:'1.2-2'}}</label>\\r\\n  <br />\\r\\n  <br />\\r\\n</div>\\r\\n\\r\\n<!-- If the movie has \\\"coming soon\\\" status -->\\r\\n<div *ngIf=\\\"!flag\\\" id=\\\"movie\\\">\\r\\n  <br />\\r\\n  <br />\\r\\n  <label>This movie is coming soon. Please stay tune.</label>\\r\\n</div>\\r\\n<!-- If the movie is \\\"now showing\\\", display the booking form without email provided before-->\\r\\n<div *ngIf=\\\"onlyMovie()\\\" id=\\\"movie\\\">\\r\\n  <form #bookingForm=\\\"ngForm\\\" (ngSubmit)=\\\"bookingForm.valid && onBook(bookingForm)\\\">\\r\\n    <label>Please enter your email: </label>\\r\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"bookingService.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n      required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': bookingForm.submitted && !email.valid }\\\">\\r\\n    <!-- Display of Validation for email input -->\\r\\n    <div *ngIf=\\\"bookingForm.submitted && email.errors\\\">\\r\\n      <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n      <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n    </div>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Confirm booking</button>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n<!-- If the movie is \\\"now showing\\\" and user is logged in, display the booking form without user's email provided-->\\r\\n<!-- User can still change the email address to send the ticket to -->\\r\\n<div *ngIf=\\\"bothMovieUser() && userDetails\\\" id=\\\"movie\\\">\\r\\n  <form #bookingForm=\\\"ngForm\\\" (ngSubmit)=\\\"bookingForm.valid && onBook(bookingForm)\\\">\\r\\n    <label>Please check your email:</label>\\r\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n      required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': bookingForm.submitted && !email.valid }\\\">\\r\\n    <!-- Display of Validation for email input -->\\r\\n    <div *ngIf=\\\"bookingForm.submitted && email.errors\\\">\\r\\n      <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n      <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n    </div>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Confirm booking</button>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n<!-- If the movie has \\\"coming soon\\\" status -->\\r\\n<div>\\r\\n  <label *ngIf=\\\"bookingComplete\\\" class=\\\"success\\\">Your ticket has been succesfully booked. Please check your email for more details.</label>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { MoviesService } from \"../../services/movies.service\";\r\nimport { TicketService } from \"../../services/ticket.service\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"book-movies\",\r\n  templateUrl: \"./book-movies.component.html\",\r\n  styleUrls: [\"./book-movies.component.css\"]\r\n})\r\nexport class BookMoviesComponent implements OnInit {\r\n  movie: any[];\r\n  movieName;\r\n  bookingTime;\r\n  price;\r\n  email;\r\n  userDetails;\r\n  uId: string = \"anonymous\";\r\n  flag: boolean = false;\r\n  bookingComplete: boolean = false;\r\n  userFlag: boolean = this.authService.isLoggedIn();\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private movieService: MoviesService,\r\n    private bookingService: TicketService,\r\n    private authService: AuthenticationService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe(params => {\r\n      this.bookingTime = params.get(\"showtime\");\r\n      console.log(this.bookingTime);\r\n\r\n      let _id = params.get(\"_id\");\r\n      console.log(_id);\r\n\r\n      this.movieService.getMoviesById(_id).subscribe(response => {\r\n        this.movie = response.json().filter(movie => {\r\n          this.movieName = movie.name;\r\n          this.price = movie.price;\r\n          if (movie.status === \"nowShowing\") {\r\n            console.log(\"flag before:\", this.flag);\r\n            this.flag = true;\r\n            console.log(\"flag after:\", this.flag);\r\n            return movie;\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    // If user is logged in, get user information\r\n    if (this.userFlag) {\r\n      this.authService.getUserProfile().subscribe(\r\n        res => {\r\n          this.userDetails = res[\"user\"];\r\n          this.uId = this.userDetails._id;\r\n        },\r\n        err => {}\r\n      );\r\n    }\r\n  }\r\n\r\n  // If movie is \"now showing\" and user is not logged in\r\n  onlyMovie() {\r\n    if (this.flag && !this.userFlag) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // If movie is \"now showing\" and user is logged in\r\n  bothMovieUser() {\r\n    if (this.flag && this.userFlag) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  backToHome() {\r\n    this.router.navigate([\"/home\"]);\r\n  }\r\n\r\n  onBook(form: NgForm) {\r\n    let bookingValue = {\r\n      movieName: this.movieName,\r\n      session: this.bookingTime,\r\n      price: this.price,\r\n      email: form.value.email,\r\n      uId: this.uId\r\n    };\r\n    this.bookingService.bookMovie(bookingValue).subscribe(response => {\r\n      this.bookingComplete = true;\r\n      setTimeout(() => (this.bookingComplete = false), 4000); // Success message for bookingComplete status dissapears after 4 seconds\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<div class=\\\"comingSoonBlock\\\">\\r\\n  <div class=\\\"list-group\\\">\\r\\n    <div class=\\\"border border-light\\\">\\r\\n      COMING SOON\\r\\n    </div>\\r\\n    <ul if=\\\"list\\\" class=\\\"list-group list-group-flush\\\">\\r\\n      <li class=\\\"list-group-item\\\" *ngFor=\\\"let movie of movies\\\">\\r\\n        <a [routerLink]=\\\"['../movie', movie._id]\\\" id=\\\"list\\\">{{movie.name}}</a>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { MoviesService } from \"../../services/movies.service\";\r\n\r\n@Component({\r\n  selector: \"coming-soon-movie-list\",\r\n  templateUrl: \"./coming-soon-movie-list.component.html\",\r\n  styleUrls: [\"./coming-soon-movie-list.component.css\"]\r\n})\r\nexport class ComingSoonMovieListComponent implements OnInit {\r\n  movies: any[];\r\n\r\n  constructor(private service: MoviesService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.service.getMovies().subscribe(response => {\r\n      this.movies = response.json()\r\n        .filter(movie => movie.status === 'comingSoon');\r\n    });\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n","import { AbstractControl, ValidationErrors, FormArray } from '@angular/forms';\r\n\r\nexport class FormArrayValidators {\r\n    static cannotBeNull(control: AbstractControl): ValidationErrors | null {\r\n        if ((control.value as FormArray).length === 0)\r\n            return { cannotBeNull: true }\r\n\r\n        return null;\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { MoviesService } from \"../../../services/movies.service\";\r\nimport {\r\n  AbstractControl,\r\n  ValidationErrors,\r\n  AsyncValidator\r\n} from \"@angular/forms\";\r\n\r\n@Injectable()\r\nexport class MovieInfoValidators {\r\n  static shouldBeUnique(service: MoviesService) {\r\n    return (control: AbstractControl) => {\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          service.getMovies().subscribe(response => {\r\n            console.log(response.json());\r\n            let movies = response.json();\r\n            for (let movie of movies) {\r\n              console.log(movie);\r\n              if (\r\n                control.value\r\n                  .toString()\r\n                  .toLowerCase()\r\n                  .trim()\r\n                  .replace(/ /g, \"\") ===\r\n                movie.name\r\n                  .toString()\r\n                  .toLowerCase()\r\n                  .trim()\r\n                  .replace(/ /g, \"\")\r\n              )\r\n                return resolve({ shouldBeUnique: true });\r\n            }\r\n            return resolve(null);\r\n          });\r\n        }, 1000);\r\n      });\r\n    };\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<div id=\\\"information\\\" class=\\\"text-left text-md-left\\\">\\r\\n    Golden Time Cinema is for movie lovers to enjoy the classis movies anytime.\\r\\n    Our cinema contains\\r\\n    more than ten movie rooms with cozy enviroment. We hope audience can have the best experince and travel with\\r\\n    time\\r\\n    machine to the\\r\\n    classic movies they love. Feel free to contact us if you have any question. Our team is here to help you\\r\\n    responsively.\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"company-information\",\r\n  templateUrl: \"./company-information.component.html\",\r\n  styleUrls: [\"./company-information.component.css\"]\r\n})\r\nexport class CompanyInformationComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","module.exports = \".btn {\\r\\n  margin: 10px;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n\\r\\n\\r\\n<br />\\r\\n<div *ngIf=\\\"userDetails\\\" class=\\\"col-md-8-col-md-offset-2\\\">\\r\\n  <!-- Edit Profile form -->\\r\\n  <form #editProfileForm=\\\"ngForm\\\" (ngSubmit)=\\\"editProfileForm.valid && onUpdate(editProfileForm)\\\">\\r\\n    <input type=\\\"hidden\\\" name=\\\"_id\\\" #_id=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails._id\\\">\\r\\n    <!-- Firstname input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"firstName\\\">First Name</label>\\r\\n      <input type=\\\"text\\\" #firstName=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.firstName\\\" name=\\\"firstName\\\" placeholder=\\\"First Name\\\" class=\\\"form-control\\\"\\r\\n        required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !firstName.valid }\\\">\\r\\n      <!-- Display of Validation for firstname input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && firstName.errors\\\">\\r\\n        <label *ngIf=\\\"firstName.errors.required\\\" class=\\\"validation-message\\\">First name is required.</label>\\r\\n        <label *ngIf=\\\"firstName.errors.minlength\\\" class=\\\"validation-message\\\">First name must have at least 2 characters.</label>\\r\\n        <label *ngIf=\\\"firstName.errors.maxlength\\\" class=\\\"validation-message\\\">First name should not exceed 30 characters.</label>\\r\\n        <label *ngIf=\\\"firstName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Lastname input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"lastName\\\">Last Name</label>\\r\\n      <input type=\\\"text\\\" #lastName=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.lastName\\\" name=\\\"lastName\\\" placeholder=\\\"Last Name\\\" class=\\\"form-control\\\"\\r\\n        required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !lastName.valid }\\\">\\r\\n      <!-- Display of Validation for lastname input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && lastName.errors\\\">\\r\\n        <label *ngIf=\\\"lastName.errors.required\\\" class=\\\"validation-message\\\">Last name is required.</label>\\r\\n        <label *ngIf=\\\"lastName.errors.minlength\\\" class=\\\"validation-message\\\">Last name must have at least 2 characters.</label>\\r\\n        <label *ngIf=\\\"lastName.errors.maxlength\\\" class=\\\"validation-message\\\">Last name should not exceed 30 characters.</label>\\r\\n        <label *ngIf=\\\"lastName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Email input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"email\\\">Email</label>\\r\\n      <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n        required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !email.valid }\\\">\\r\\n      <!-- Display of Validation for email input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && email.errors\\\">\\r\\n        <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n        <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Gender input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"gender\\\">Gender</label>\\r\\n      <select #gender=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.gender\\\" name=\\\"gender\\\" placeholder=\\\"Gender\\\" class=\\\"form-control\\\" required\\r\\n        [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !gender.valid }\\\">\\r\\n        <option [ngValue]=\\\"null\\\" disabled>Select gender</option>\\r\\n        <option *ngFor=\\\"let gender of genders\\\" [ngValue]=\\\"gender\\\">\\r\\n          {{ gender}}\\r\\n        </option>\\r\\n      </select>\\r\\n      <!-- Display of Validation for gender input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && gender.errors\\\">\\r\\n        <label *ngIf=\\\"gender.errors.required\\\" class=\\\"validation-message\\\">Gender is required.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Date of birth input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"dob\\\">Date of birth</label>\\r\\n      <input type=\\\"date\\\" #dob=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.dob\\\" name=\\\"dob\\\" placeholder=\\\"Date of Birth\\\" class=\\\"form-control\\\"\\r\\n        required [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !dob.valid }\\\">\\r\\n      <!-- Display of Validation for date of birth input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && dob.errors\\\">\\r\\n        <label *ngIf=\\\"dob.errors.required\\\" class=\\\"validation-message\\\">Date of birth is required.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"backToProfile()\\\">Back to Profile</button>\\r\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Update</button>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n<br />\\r\\n\\r\\n<!-- Success message -->\\r\\n<div class=\\\"success\\\" *ngIf=\\\"successMessage\\\">\\r\\n  <label>Update is successful</label>\\r\\n</div>\\r\\n\\r\\n<!-- Error message -->\\r\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\">\\r\\n  <label> {{errorMessages}}</label>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { User } from \"../../auth/user.model\";\r\n\r\n@Component({\r\n  selector: \"edit-profile\",\r\n  templateUrl: \"./edit-profile.component.html\",\r\n  styleUrls: [\"./edit-profile.component.css\"]\r\n})\r\nexport class EditProfileComponent implements OnInit {\r\n  // Email regular expression to validate email format\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  nameRegex = /^([a-zA-Z ]){2,30}$/;\r\n\r\n  userDetails;\r\n  gender = null;\r\n  genders = [\"Female\", \"Male\", \"Other\"];\r\n  successMessage: boolean;\r\n  errorMessages: string;\r\n\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.authService.getUserProfile().subscribe(\r\n      res => {\r\n        this.userDetails = res[\"user\"];\r\n      },\r\n      err => {}\r\n    );\r\n  }\r\n  onUpdate(form: NgForm) {\r\n    this.authService.updateUser(form.value).subscribe(\r\n      res => {\r\n        // this.successMessage = true;\r\n        // setTimeout(() => (this.successMessage = false), 4000); // Success message dissapears after 4 seconds\r\n        this.router.navigate([\"/userprofile\"]);\r\n      },\r\n\r\n      // if there are errors sent from server-side\r\n      err => {\r\n        if (err.status === 422) {\r\n          this.errorMessages = err.error.join(\"<br/>\");\r\n        } else\r\n          this.errorMessages = \"Something went wrong. Please contact admin.\";\r\n      }\r\n    );\r\n  }\r\n\r\n  backToProfile() {\r\n    this.router.navigate([\"/userprofile\"]);\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"footer border-top\\\">\\r\\n  {{companyName}}\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"footer\",\r\n  templateUrl: \"./footer.component.html\",\r\n  styleUrls: [\"./footer.component.css\"]\r\n})\r\nexport class FooterComponent implements OnInit {\r\n  companyName = \"@Golden Time Cooperation\";\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","module.exports = \"a {\\r\\n  text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<div id=\\\"genres\\\" class=\\\"list-group\\\">\\r\\n    <a (click)=\\\"findMoviesByGenre(dramas)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Dramas</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(action)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Action</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(crime)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Crime</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(horror)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Horror</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(comedies)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Comedies</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(fantasy)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Fantasy</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(romance)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Romance</a>\\r\\n</div>\\r\\n<br />\\r\\n<br />\\r\\n<div *ngFor=\\\"let property of movies\\\" id=\\\"movie\\\">\\r\\n    <h3>{{property.name}}</h3>\\r\\n    <br />\\r\\n    <br />\\r\\n    <br />\\r\\n    <label> <span>Sessions: </span></label>\\r\\n    <br />\\r\\n    <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\"\\r\\n        [routerLink]=\\\"['../genre', showtime,property._id]\\\">{{showtime | date:'short'}}<br />\\r\\n    </div>\\r\\n    <br />\\r\\n    <label><span>Running time: </span>\\r\\n        <br />\\r\\n        <br />\\r\\n        {{property.runningTime}} mins\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Director: </span>\\r\\n        <br />\\r\\n        <br />\\r\\n        {{property.director | uppercase}}\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Cast:</span></label>\\r\\n    <br />\\r\\n    <div *ngFor=\\\"let star of property.stars\\\">\\r\\n        {{star|uppercase}}\\r\\n        <br />\\r\\n    </div>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Story: </span>\\r\\n        <br />\\r\\n        <br />\\r\\n        {{property.storyline}}\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Genre:</span></label>\\r\\n    <div *ngFor=\\\"let genre of property.genres\\\">\\r\\n        {{genre|uppercase}}\\r\\n    </div>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label><span>Status: </span>\\r\\n        <br />\\r\\n        <br />\\r\\n        {{property.status | uppercase}}\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n</div>\"","import { MoviesService } from \"../../services/movies.service\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"genre\",\r\n  templateUrl: \"./genre.component.html\",\r\n  styleUrls: [\"./genre.component.css\"]\r\n})\r\nexport class GenreComponent implements OnInit {\r\n  dramas = \"dramas\";\r\n  action = \"action\";\r\n  crime = \"crime\";\r\n  horror = \"horror\";\r\n  comedies = \"comedies\";\r\n  fantasy = \"fantasy\";\r\n  romance = \"romance\";\r\n  movies: any[];\r\n\r\n  constructor(private service: MoviesService) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  findMoviesByGenre(inputValue) {\r\n    console.log(inputValue);\r\n    this.service.getMovies().subscribe(response => {\r\n      //get movies by genres\r\n      this.movies = response.json().filter(movies => {\r\n        for (let genre of movies.genres)\r\n          if (genre.toLowerCase() === inputValue.toLowerCase()) return movies;\r\n      });\r\n      console.log(\"movies retrieved by genres\", this.movies);\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div>\\r\\n  <h1 class=\\\"text-center\\\" style=\\\"font-size:50px\\\">{{title}}</h1>\\r\\n</div>\\r\\n<br />\\r\\n<br />\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"header\",\r\n  templateUrl: \"./header.component.html\",\r\n  styleUrls: [\"./header.component.css\"]\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  title = \"Golden Time Cinema\";\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<now-showing-movie-list></now-showing-movie-list>\\r\\n<br />\\r\\n<br />\\r\\n<br />\\r\\n<coming-soon-movie-list></coming-soon-movie-list>\\r\\n<br />\\r\\n<br />\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"home\",\r\n  templateUrl: \"./home.component.html\",\r\n  styleUrls: [\"./home.component.css\"]\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\r\\n\\r\\nlabel{\\r\\n    font-family: 'Source Sans Pro', sans-serif;\\r\\n    font-family: 'Semi-Bold', sans-serif;\\r\\n}\"","module.exports = \"<br />\\r\\n<br />\\r\\n<div class=\\\"col-md-8-col-md-offset-2\\\">\\r\\n\\r\\n    <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"loginForm.valid && onLogin(loginForm)\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"email\\\">Email</label>\\r\\n            <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\"\\r\\n                class=\\\"form-control\\\" required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': loginForm.submitted && !email.valid }\\\">\\r\\n            <div *ngIf=\\\"loginForm.submitted && email.errors\\\">\\r\\n                <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n                <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"password\\\">Password</label>\\r\\n            <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.password\\\" name=\\\"password\\\"\\r\\n                placeholder=\\\"Password\\\" class=\\\"form-control\\\" minlength=\\\"4\\\" required [ngClass]=\\\"{ 'ng-invalid': loginForm.submitted && !password.valid }\\\">\\r\\n            <div *ngIf=\\\"loginForm.submitted && password.errors\\\">\\r\\n                <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">Password is required.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Login</button>\\r\\n    </form>\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n<!-- Error message -->\\r\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\" style=\\\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\\\">\\r\\n    {{errorMessages}}\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\n@Component({\r\n  selector: \"login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.css\"]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  // Email regular expression to validate email format\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  errorMessages: string;\r\n\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  model = {\r\n    email: \"\",\r\n    password: \"\"\r\n  };\r\n\r\n  ngOnInit() {\r\n    // If user is already logged in, redirect to user profile page\r\n    if (this.authService.isLoggedIn()) {\r\n      this.router.navigateByUrl(\"/userprofile\");\r\n    }\r\n  }\r\n\r\n  onLogin(form: NgForm) {\r\n    this.authService.login(form.value).subscribe(\r\n      // successful authentication\r\n      res => {\r\n        this.authService.setToken(res[\"token\"]); // save token to local storage\r\n        //localStorage.setItem('admin',isAdmin)\r\n        this.router.navigateByUrl(\"/userprofile\"); // redirect to user profile page\r\n      },\r\n      // If errors occur\r\n      err => {\r\n        this.errorMessages = err.error.message;\r\n      }\r\n    );\r\n  }\r\n}\r\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\r\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\r\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\r\\n#message{\\r\\n    text-align: center;\\r\\n    font-family: 'Source Sans Pro', sans-serif;\\r\\n    font-family: 'Semi-Bold', sans-serif;\\r\\n    font-size: 20px;\\r\\n  \\r\\n}\\r\\nbutton{\\r\\n    width: 5cm;\\r\\n    height: 1cm;\\r\\n}\\r\\n\\r\\n\"","module.exports = \"<br />\\r\\n<br />\\r\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"backToAdmin()\\\">back to admin</button>\\r\\n<div id=\\\"message\\\">\\r\\n  <br />\\r\\n  <br />\\r\\n  <br />\\r\\n  <br />\\r\\n  <p class=\\\"alert alert-success\\\" role=\\\"alert\\\">The Operation is Successful.</p>\\r\\n\\r\\n</div>\"","import { Router } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'message',\r\n  templateUrl: './message.component.html',\r\n  styleUrls: ['./message.component.css']\r\n})\r\nexport class MessageComponent implements OnInit {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  //button back to admin\r\n  backToAdmin() {\r\n    this.router.navigate([\"/admin\"]);\r\n  }\r\n\r\n}\r\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\r\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\r\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\r\\n#movie{\\r\\n    font-family: 'Source Sans Pro', sans-serif;\\r\\n    font-size: 20px;\\r\\n    color: grey;\\r\\n}\\r\\nspan{\\r\\n   font-size: 25px;\\r\\n   color: black;\\r\\n   font-family: 'Source Sans Pro', sans-serif;\\r\\n   font-family: 'Semi-Bold', sans-serif;\\r\\n}\\r\\nh3{\\r\\n    text-align: center;\\r\\n    color: black;\\r\\n    font-family: 'Cormorant SC', sans-serif;\\r\\n    font-family: 'Bold', sans-serif;\\r\\n}\"","module.exports = \"<br />\\r\\n<br />\\r\\n<div *ngFor=\\\"let property of movie\\\" id=\\\"movie\\\">\\r\\n  <h3>{{property.name}}</h3>\\r\\n  <br />\\r\\n  <br />\\r\\n  <br />\\r\\n  <label>\\r\\n    <span>Sessions: </span>\\r\\n  </label>\\r\\n  <br />\\r\\n  <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\" [routerLink]=\\\"['../', showtime,property._id]\\\">{{showtime | date:'short'}}\\r\\n    <br />\\r\\n  </div>\\r\\n  <br />\\r\\n  <label>\\r\\n    <span>Running time: </span>\\r\\n    <br />\\r\\n    <br /> {{property.runningTime}} mins\\r\\n  </label>\\r\\n  <br />\\r\\n  <br />\\r\\n  <label>\\r\\n    <span>Director: </span>\\r\\n    <br />\\r\\n    <br /> {{property.director | uppercase}}\\r\\n  </label>\\r\\n  <br />\\r\\n  <br />\\r\\n  <label>\\r\\n    <span>Cast:</span>\\r\\n  </label>\\r\\n  <br />\\r\\n  <div *ngFor=\\\"let star of property.stars\\\">\\r\\n    {{star|uppercase}}\\r\\n    <br />\\r\\n  </div>\\r\\n  <br />\\r\\n  <br />\\r\\n  <label>\\r\\n    <span>Story: </span>\\r\\n    <br />\\r\\n    <br /> {{property.storyline}}\\r\\n  </label>\\r\\n  <br />\\r\\n  <br />\\r\\n  <label>\\r\\n    <span>Genre:</span>\\r\\n  </label>\\r\\n  <div *ngFor=\\\"let genre of property.genres\\\">\\r\\n    {{genre|uppercase}}\\r\\n  </div>\\r\\n  <br />\\r\\n  <br />\\r\\n  <label>\\r\\n    <span>Status: </span>\\r\\n    <br />\\r\\n    <br /> {{property.status | uppercase}}\\r\\n  </label>\\r\\n  <br />\\r\\n  <br />\\r\\n</div>\"","import { ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MoviesService } from '../../services/movies.service';\r\n\r\n@Component({\r\n  selector: 'app-movie',\r\n  templateUrl: './movie.component.html',\r\n  styleUrls: ['./movie.component.css']\r\n})\r\nexport class MovieComponent implements OnInit {\r\n\r\n  movie: any[];\r\n\r\n  constructor(private route: ActivatedRoute, private service: MoviesService) { }\r\n\r\n  ngOnInit() {\r\n    //get the router parameter that is the object id of a movie.\r\n    this.route.paramMap\r\n      .subscribe(params => {\r\n        let _id = params.get('_id');\r\n        console.log(_id);\r\n\r\n        //get a specific movie object by its object id\r\n        this.service.getMoviesById(_id).subscribe(response => {\r\n          this.movie = response.json();\r\n          console.log(this.movie);\r\n        })\r\n      })\r\n  }\r\n\r\n}\r\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Cormorant SC');\\r\\n\\r\\n.navigationBar {\\r\\n  display: block;\\r\\n  background-color: whitesmoke;\\r\\n}\\r\\n\\r\\na {\\r\\n  font-family: 'Cormorant SC', sans-serif;\\r\\n  font-family: 'Semi-Bold', sans-serif;\\r\\n  text-decoration: none;\\r\\n  color:gray;\\r\\n  padding-right: 50px;\\r\\n  padding-left: 50px;\\r\\n  font-size: 15px;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n<nav>\\r\\n  <ul class=\\\"nav justify-content-center\\\">\\r\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../\\\">{{home}}</a>\\r\\n    </li>\\r\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../search\\\">{{search}}</a>\\r\\n    </li>\\r\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../genre\\\">{{genre}}</a>\\r\\n    </li>\\r\\n    <!-- Only display admin tab for admin user -->\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.displayAdmin()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../admin\\\">{{admin}}</a>\\r\\n    </li>\\r\\n    <!-- User authService.isLoggedIn directly here to solve problem of manually refreshing the page to see changes -->\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"!authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../login\\\">{{logIn}}</a>\\r\\n    </li>\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"!authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../register\\\">{{register}}</a>\\r\\n    </li>\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../tickets\\\">{{ticket}}</a>\\r\\n    </li>\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../userprofile\\\">{{profile}}</a>\\r\\n    </li>\\r\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../companyInformation\\\">{{companyInformation}}</a>\\r\\n    </li>\\r\\n  </ul>\\r\\n\\r\\n</nav>\\r\\n<br />\\r\\n<div class=\\\"border border-bottom border-light\\\"> </div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\n@Component({\r\n  selector: \"navigation-bar\",\r\n  templateUrl: \"./navigation-bar.component.html\",\r\n  styleUrls: [\"./navigation-bar.component.css\"]\r\n})\r\nexport class NavigationBarComponent implements OnInit {\r\n  logIn = \"LOG IN\";\r\n  home = \"HOME\";\r\n  register = \"REGISTER\";\r\n  genre = \"GENRES\";\r\n  admin = \"ADMIN\";\r\n  companyInformation = \"ABOUT US\";\r\n  profile = \"PROFILE\";\r\n  ticket = \"ORDERS\";\r\n  search = \"SEARCH\";\r\n\r\n  constructor(private authService: AuthenticationService) {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\r\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\r\\n#message{\\r\\n    text-align: center;\\r\\n    font-family: 'Source Sans Pro', sans-serif;\\r\\n    font-family: 'Semi-Bold', sans-serif;\\r\\n    font-size: 20px;\\r\\n  \\r\\n}\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<div class=\\\"alert alert-warning\\\" id=\\\"message\\\">Sorry, the page has not been found!</div>\\r\\n<footer></footer>\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"not-found-page\",\r\n  templateUrl: \"./not-found-page.component.html\",\r\n  styleUrls: [\"./not-found-page.component.css\"]\r\n})\r\nexport class NotFoundPageComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\r\\n\\r\\n.nowShowingBlock {\\r\\n  background-color:white;\\r\\n  text-align: center;\\r\\n  font-family: 'Cormorant SC', sans-serif;\\r\\n  font-family: 'Bold', sans-serif;\\r\\n  font-size: 35px;\\r\\n  color: gray;\\r\\n  }\\r\\n\\r\\n#list{\\r\\n    color: grey;\\r\\n    font-size: 20px;\\r\\n    font-family: 'Cormorant SC', sans-serif;\\r\\n  }\\r\\n\\r\\n#alert{\\r\\n    text-align: center;\\r\\n    font-family: 'Cormorant SC', sans-serif;\\r\\n    font-size: 35px;\\r\\n    color: gray;\\r\\n  }\\r\\n\\r\\nul{\\r\\n    text-align: center;\\r\\n  }\\r\\n\\r\\n\"","module.exports = \"<br />\\r\\n<div>\\r\\n  <div class=\\\"nowShowingBlock\\\">\\r\\n    <div class=\\\"border border-light\\\">NOW SHOWING</div>\\r\\n  </div>\\r\\n  <ul if=\\\"list\\\" class=\\\"list-group list-group-flush\\\">\\r\\n    <li class=\\\"list-group-item\\\" *ngFor=\\\"let movie of movies\\\">\\r\\n      <a [routerLink]=\\\"['../movie', movie._id]\\\" id=\\\"list\\\">{{movie.name}}</a>\\r\\n    </li>\\r\\n  </ul>\\r\\n</div>\\r\\n\\r\\n<!-- <div id=\\\"alert\\\">Please be patient, more movies are yet to come.</div> -->\"","import { MoviesService } from \"../../services/movies.service\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"now-showing-movie-list\",\r\n  templateUrl: \"./now-showing-movie-list.component.html\",\r\n  styleUrls: [\"./now-showing-movie-list.component.css\"]\r\n})\r\nexport class NowShowingMovieListComponent implements OnInit {\r\n  movies: any[];\r\n\r\n  constructor(private service: MoviesService) {}\r\n\r\n  ngOnInit() {\r\n    this.service.getMovies().subscribe(response => {\r\n      this.movies = response\r\n        .json()\r\n        .filter(movie => movie.status === \"nowShowing\");\r\n    });\r\n  }\r\n}\r\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\r\\n\\r\\nlabel{\\r\\n    font-family: 'Source Sans Pro', sans-serif;\\r\\n    font-family: 'Semi-Bold', sans-serif;\\r\\n    font-size : 15px;\\r\\n}\"","module.exports = \"<br />\\r\\n<br />\\r\\n<div class=\\\"col-md-8-col-md-offset-2\\\">\\r\\n    <!-- Registration form -->\\r\\n    <form #registerForm=\\\"ngForm\\\" (ngSubmit)=\\\"registerForm.valid && onRegister(registerForm)\\\">\\r\\n        <!-- Firstname input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"firstName\\\">First Name</label>\\r\\n            <input type=\\\"text\\\" #firstName=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.firstName\\\" name=\\\"firstName\\\" placeholder=\\\"First Name\\\"\\r\\n                class=\\\"form-control\\\" required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !firstName.valid }\\\">\\r\\n            <!-- Display of Validation for firstname input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && firstName.errors\\\">\\r\\n                <label *ngIf=\\\"firstName.errors.required\\\" class=\\\"validation-message\\\">First name is required.</label>\\r\\n                <label *ngIf=\\\"firstName.errors.minlength\\\" class=\\\"validation-message\\\">First name must have at least 2 characters.</label>\\r\\n                <label *ngIf=\\\"firstName.errors.maxlength\\\" class=\\\"validation-message\\\">First name should not exceed 30 characters.</label>\\r\\n                <label *ngIf=\\\"firstName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Lastname input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"lastName\\\">Last Name</label>\\r\\n            <input type=\\\"text\\\" #lastName=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.lastName\\\" name=\\\"lastName\\\" placeholder=\\\"Last Name\\\"\\r\\n                class=\\\"form-control\\\" required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !lastName.valid }\\\">\\r\\n            <!-- Display of Validation for lastname input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && lastName.errors\\\">\\r\\n                <label *ngIf=\\\"lastName.errors.required\\\" class=\\\"validation-message\\\">Last name is required.</label>\\r\\n                <label *ngIf=\\\"lastName.errors.minlength\\\" class=\\\"validation-message\\\">Last name must have at least 2 characters.</label>\\r\\n                <label *ngIf=\\\"lastName.errors.maxlength\\\" class=\\\"validation-message\\\">Last name should not exceed 30 characters.</label>\\r\\n                <label *ngIf=\\\"lastName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Email input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"email\\\">Email</label>\\r\\n            <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n                required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !email.valid }\\\">\\r\\n            <!-- Display of Validation for email input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && email.errors\\\">\\r\\n                <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n                <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Password input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"password\\\">Password</label>\\r\\n            <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\r\\n                class=\\\"form-control\\\" minlength=\\\"4\\\" required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !password.valid }\\\">\\r\\n            <!-- Display of Validation for password input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && password.errors\\\">\\r\\n                <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">Password is required.</label>\\r\\n                <label *ngIf=\\\"password.errors.minlength\\\" class=\\\"validation-message\\\">Password must have at least 4 characters.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Gender input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"gender\\\">Gender</label>\\r\\n            <select #gender=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.gender\\\" name=\\\"gender\\\" placeholder=\\\"Gender\\\" class=\\\"form-control\\\"\\r\\n                required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !gender.valid }\\\">\\r\\n                <option [ngValue]=\\\"null\\\" disabled>Select gender</option>\\r\\n                <option *ngFor=\\\"let gender of genders\\\" [ngValue]=\\\"gender\\\">\\r\\n                    {{ gender}}\\r\\n                </option>\\r\\n            </select>\\r\\n            <!-- Display of Validation for gender input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && gender.errors\\\">\\r\\n                <label *ngIf=\\\"gender.errors.required\\\" class=\\\"validation-message\\\">Gender is required.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Date of birth input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"dob\\\">Date of birth</label>\\r\\n            <input type=\\\"date\\\" #dob=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.dob\\\" name=\\\"dob\\\" placeholder=\\\"Date of Birth\\\" class=\\\"form-control\\\"\\r\\n                required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !dob.valid }\\\">\\r\\n            <!-- Display of Validation for date of birth input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && dob.errors\\\">\\r\\n                <label *ngIf=\\\"dob.errors.required\\\" class=\\\"validation-message\\\">Date of birth is required.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Register</button>\\r\\n    </form>\\r\\n</div>\\r\\n<br />\\r\\n\\r\\n<!-- Success message -->\\r\\n<div class=\\\"success\\\" *ngIf=\\\"successMessage\\\">\\r\\n    <label>Registration is completed. Please log into your account.</label>\\r\\n</div>\\r\\n\\r\\n<!-- Error message -->\\r\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\">\\r\\n    <label> {{errorMessages}}</label>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: \"register\",\r\n  templateUrl: \"./register.component.html\",\r\n  styleUrls: [\"./register.component.css\"]\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  // Email regular expression to validate email format\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  nameRegex = /^([a-zA-Z ]){2,30}$/;\r\n  gender = null;\r\n  genders = [\"Female\", \"Male\", \"Other\"];\r\n  successMessage: boolean;\r\n  errorMessages: string;\r\n\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // If user is already logged in, redirect to user profile page\r\n    if (this.authService.isLoggedIn()) {\r\n      this.router.navigateByUrl(\"/userprofile\");\r\n    }\r\n  }\r\n\r\n  onRegister(form: NgForm) {\r\n    this.authService.registerUser(form.value).subscribe(\r\n      // if registration is successfull\r\n      res => {\r\n        this.successMessage = true;\r\n        setTimeout(() => (this.successMessage = false), 4000); // Success message dissapears after 4 seconds\r\n        this.resetForm(form);\r\n      },\r\n\r\n      // if there are errors sent from server-side\r\n      err => {\r\n        if (err.status === 422) {\r\n          this.errorMessages = err.error.join(\"<br/>\");\r\n        } else\r\n          this.errorMessages = \"Something went wrong. Please contact admin.\";\r\n      }\r\n    );\r\n  }\r\n\r\n  resetForm(form: NgForm) {\r\n    this.authService.selectedUser = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      gender: \"\",\r\n      dob: null,\r\n      isAdmin: false,\r\n      _id: \"\"\r\n    };\r\n    form.resetForm();\r\n    this.errorMessages = \"\";\r\n  }\r\n}\r\n","module.exports = \"@import url('https://fonts.googleapis.com/css?family=Bold|Cormorant SC');\\r\\n@import url('https://fonts.googleapis.com/css?family=Semi-Bold|Source Sans Pro');\\r\\n@import url('https://fonts.googleapis.com/css?family=Source Sans Pro');\\r\\n#movie{\\r\\n    font-family: 'Source Sans Pro', sans-serif;\\r\\n    font-size: 20px;\\r\\n    color: grey;\\r\\n}\\r\\nspan{\\r\\n   font-weight: bolder;\\r\\n   font-size: 25px;\\r\\n   color: black;\\r\\n   font-family: 'Source Sans Pro', sans-serif;\\r\\n   font-family: 'Semi-Bold', sans-serif;\\r\\n}\\r\\nh3{\\r\\n    text-align: center;\\r\\n    color: black;\\r\\n    font-family: 'Cormorant SC', sans-serif;\\r\\n    font-family: 'Bold', sans-serif;\\r\\n}\"","module.exports = \"<br />\\r\\n<br />\\r\\n<div id=\\\"searchBar\\\">\\r\\n    <form [formGroup]=\\\"form\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"movieName\\\" type=\\\"text\\\" placeholder=\\\"please search here\\\" class=\\\"form-control\\\">\\r\\n            <div class=\\\"input-group-append\\\">\\r\\n                <button class=\\\"btn btn-outline-secondary\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" (click)=\\\"onSubmit()\\\">search</button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <br />\\r\\n        <div *ngIf=\\\"movieName.invalid\\\">\\r\\n            <div *ngIf=\\\"movieName.errors.minlength\\\">Name requires at least\\r\\n                {{movieName.errors.minlength.requiredLength}}\\r\\n                charaters.\\r\\n            </div>\\r\\n            <div *ngIf=\\\"movieName.errors.maxlength\\\">Name requires at most\\r\\n                {{movieName.errors.maxlength.requiredLength}}\\r\\n                charaters.\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n    <div *ngIf=flag>\\r\\n        <p class=\\\"alert alert-warning\\\" role=\\\"alert\\\">\\r\\n            Sorry, the result you are looking for has not been found.\\r\\n        </p>\\r\\n    </div>\\r\\n</div>\\r\\n<div>\\r\\n    <div *ngFor=\\\"let property of movieResult\\\" id=\\\"movie\\\">\\r\\n        <h3>{{property.name}}</h3>\\r\\n        <br />\\r\\n        <br />\\r\\n        <br />\\r\\n        <label> <span>Sessions: </span></label>\\r\\n        <br />\\r\\n        <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\"\\r\\n            [routerLink]=\\\"['../genre', showtime,property._id]\\\">{{showtime | date:'short'}}<br />\\r\\n        </div>\\r\\n        <br />\\r\\n        <label><span>Running time: </span>\\r\\n            <br />\\r\\n            <br />\\r\\n            {{property.runningTime}} mins\\r\\n        </label>\\r\\n        <br />\\r\\n        <br />\\r\\n        <label><span>Director: </span>\\r\\n            <br />\\r\\n            <br />\\r\\n            {{property.director | uppercase}}\\r\\n        </label>\\r\\n        <br />\\r\\n        <br />\\r\\n        <label><span>Cast:</span></label>\\r\\n        <br />\\r\\n        <div *ngFor=\\\"let star of property.stars\\\">\\r\\n            {{star|uppercase}}\\r\\n            <br />\\r\\n        </div>\\r\\n        <br />\\r\\n        <br />\\r\\n        <label><span>Story: </span>\\r\\n            <br />\\r\\n            <br />\\r\\n            {{property.storyline}}\\r\\n        </label>\\r\\n        <br />\\r\\n        <br />\\r\\n        <label><span>Genre:</span></label>\\r\\n        <div *ngFor=\\\"let genre of property.genres\\\">\\r\\n            {{genre|uppercase}}\\r\\n        </div>\\r\\n        <br />\\r\\n        <br />\\r\\n        <label><span>Status: </span>\\r\\n            <br />\\r\\n            <br />\\r\\n            {{property.status | uppercase}}\\r\\n        </label>\\r\\n        <br />\\r\\n        <br />\\r\\n    </div>\"","import { MoviesService } from \"../../services/movies.service\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  FormArray,\r\n  Validators,\r\n  ReactiveFormsModule\r\n} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"search-bar\",\r\n  templateUrl: \"./search-bar.component.html\",\r\n  styleUrls: [\"./search-bar.component.css\"]\r\n})\r\nexport class SearchBarComponent implements OnInit {\r\n  searchResultId;\r\n  movies: any[];\r\n  movieResult: any[];\r\n  flag = false;\r\n\r\n  form = new FormGroup({\r\n    movieName: new FormControl(\"\", [\r\n      Validators.minLength(2),\r\n      Validators.maxLength(60)\r\n    ])\r\n  });\r\n\r\n  constructor(private service: MoviesService) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  get movieName() {\r\n    return this.form.get(\"movieName\");\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(this.form.value);\r\n    this.service.getMovies().subscribe(response => {\r\n      this.movies = response.json();\r\n      console.log(this.movies);\r\n\r\n      //find every movie in the database for matching user input\r\n      for (let movie of this.movies) {\r\n        console.log(movie.name);\r\n\r\n        //if the result is not found, the flag is true.\r\n        this.flag = true;\r\n        //if words match, get the sepecific movie from database\r\n        if (this.CompareWithWords(movie.name, this.form.value.movieName)) {\r\n          //get the object id of the matched movie\r\n          this.searchResultId = movie._id;\r\n          console.log(this.searchResultId);\r\n          this.service\r\n            .getMoviesById(this.searchResultId)\r\n            .subscribe(response => {\r\n              //if the result is found, the flag is false\r\n              this.flag = false;\r\n              this.movieResult = response.json();\r\n              console.log(\"i got the movie!\", this.movieResult);\r\n            });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  //method for verifying if two words match without whitespace\r\n  CompareWithWords(firstWord, secondWord) {\r\n    //remove all the whitespace of strings\r\n    const firstResult = firstWord\r\n      .toString()\r\n      .toLowerCase()\r\n      .trim()\r\n      .replace(/ /g, \"\");\r\n    const secondResult = secondWord\r\n      .toString()\r\n      .toLowerCase()\r\n      .trim()\r\n      .replace(/ /g, \"\");\r\n\r\n    return firstResult === secondResult ? true : false;\r\n  }\r\n}\r\n","module.exports = \"@import url(\\\"https://fonts.googleapis.com/css?family=Bold|Cormorant SC\\\");\\r\\n\\r\\nh3 {\\r\\n  text-align: center;\\r\\n  color: black;\\r\\n  font-family: \\\"Fredericka the Great\\\", sans-serif;\\r\\n}\\r\\n\\r\\nlabel {\\r\\n  font-size: 16px;\\r\\n  color: black;\\r\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n<div *ngIf=\\\"userDetails\\\" class=\\\"border border-light\\\">\\r\\n  <h3> YOUR TICKETS</h3>\\r\\n</div>\\r\\n<div *ngIf=\\\"tickets.length > 0\\\" class=\\\"card-group\\\">\\r\\n  <li class=\\\"list-group-item\\\" *ngFor=\\\"let ticket of tickets; let i = index\\\" [attr.ticketId]=\\\"i\\\">\\r\\n    <div class=\\\"card border-dark mb-3\\\" style=\\\"max-width: 18rem;\\\">\\r\\n      <div class=\\\"card-header\\\">Ticket {{i + 1}}</div>\\r\\n      <div class=\\\"card-body text-dark\\\">\\r\\n        <h5 class=\\\"card-title\\\">\\r\\n          <strong>{{ticket.movieName}}</strong>\\r\\n        </h5>\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <label>Session: </label> {{ticket.session | date:'short'}}\\r\\n          <br/>\\r\\n          <label>Email: </label> {{ticket.email}}\\r\\n          <br/>\\r\\n          <label>Price: </label> {{ticket.price | currency:'AUD':true:'1.2-2'}}\\r\\n          <br/>\\r\\n        </p>\\r\\n        <button class=\\\"btn btn-secondary\\\" (click)=\\\"onDelete(i)\\\">Delete ticket </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </li>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div class=\\\"text-center\\\" *ngIf=\\\"tickets.length == 0\\\">\\r\\n  <label style=\\\"margin:50px\\\">You have no orders in the record</label>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { TicketService } from \"../../services/ticket.service\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\n@Component({\r\n  selector: \"ticket\",\r\n  templateUrl: \"./ticket.component.html\",\r\n  styleUrls: [\"./ticket.component.css\"]\r\n})\r\nexport class TicketComponent implements OnInit {\r\n  tickets: any[] = [];\r\n  userDetails;\r\n\r\n  constructor(\r\n    private ticketService: TicketService,\r\n    private authService: AuthenticationService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // Get profile of current logged in user\r\n    this.authService.getUserProfile().subscribe(\r\n      res => {\r\n        this.userDetails = res[\"user\"];\r\n        this.refreshTicketList();\r\n      },\r\n      err => {}\r\n    );\r\n  }\r\n\r\n  refreshTicketList() {\r\n    // Get tickets with the same user Id of this currrent logged in user\r\n    this.ticketService.getTickets().subscribe(response => {\r\n      this.tickets = response\r\n        .json()\r\n        .filter(ticket => ticket.userId === this.userDetails._id);\r\n    });\r\n  }\r\n  //delete a movie\r\n  onDelete(ticketId) {\r\n    let objectId: number;\r\n    console.log(ticketId);\r\n\r\n    //get the ticket id based on the index of the ticket\r\n    objectId = this.tickets[ticketId]._id;\r\n    console.log(objectId);\r\n\r\n    //delete the specific ticket\r\n    this.ticketService.deleteTicket(objectId).subscribe(response => {\r\n      // Refresh the ticket list after deletion or changes will not be displayed without reloading the page\r\n      this.refreshTicketList();\r\n\r\n      // console.log(\"Ticket is removed\");\r\n      // console.log(response.json());\r\n    });\r\n  }\r\n}\r\n","module.exports = \".btn {\\r\\n  margin: 10px;\\r\\n}\\r\\n\"","module.exports = \"<table *ngIf=\\\"userDetails\\\">\\r\\n  <div class=\\\"wrapper\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-header\\\">\\r\\n        Welcome back, {{userDetails.firstName}} {{userDetails.lastName}}!\\r\\n      </div>\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <h3 class=\\\"card-title\\\">YOUR PROFILE</h3>\\r\\n        <ul class=\\\"list-group list-group-flush\\\">\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>First Name: </label> {{userDetails.firstName}}</li>\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>Last Name: </label> {{userDetails.lastName}}</li>\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>Email: </label> {{userDetails.email}}</li>\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>Gender: </label> {{userDetails.gender}}</li>\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>Date of birth: </label> {{userDetails.dob | date: 'longDate'}}</li>\\r\\n        </ul>\\r\\n        <div class=\\\"button\\\">\\r\\n          <button class=\\\"btn btn-secondary\\\" (click)=\\\"onLogout()\\\">Logout</button>\\r\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"clickToEditProfile()\\\">Edit Profile</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: \"user-profile\",\r\n  templateUrl: \"./user-profile.component.html\",\r\n  styleUrls: [\"./user-profile.component.css\"]\r\n})\r\nexport class UserProfileComponent implements OnInit {\r\n  userDetails;\r\n\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.authService.getUserProfile().subscribe(\r\n      res => {\r\n        this.userDetails = res[\"user\"];\r\n      },\r\n      err => {}\r\n    );\r\n  }\r\n\r\n  // Method to logout: delete token and redirect user to login page\r\n  onLogout() {\r\n    this.authService.deleteToken();\r\n    this.router.navigate([\"/login\"]);\r\n  }\r\n\r\n  clickToEditProfile() {\r\n    this.router.navigate([\"/editprofile\"]);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\n\r\nimport { environment } from \"../../environments/environment\";\r\nimport { User } from \"../auth/user.model\";\r\nimport decode from \"jwt-decode\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthenticationService {\r\n  // Initialize a User object with empty properties\r\n  selectedUser: User = {\r\n    _id: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    gender: \"\",\r\n    dob: null,\r\n    isAdmin: false\r\n  };\r\n\r\n  user: User;\r\n\r\n  role;\r\n\r\n  noAuthHeader = { headers: new HttpHeaders({ NoAuth: \"True\" }) };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // httpMethods\r\n\r\n  registerUser(user: User) {\r\n    return this.http.post(\r\n      environment.apiBaseUrl + \"/register\",\r\n      user,\r\n      this.noAuthHeader\r\n    );\r\n  }\r\n\r\n  login(authCredentials) {\r\n    return this.http.post(\r\n      environment.apiBaseUrl + \"/authenticate\",\r\n      authCredentials,\r\n      this.noAuthHeader\r\n    );\r\n  }\r\n\r\n  // need jwt in the header\r\n  getUserProfile() {\r\n    return this.http.get(environment.apiBaseUrl + \"/userprofile\");\r\n  }\r\n\r\n  updateUser(user: User) {\r\n    // console.log(\"in service put\", user);\r\n    return this.http.put(environment.apiBaseUrl + \"/editprofile\", user);\r\n  }\r\n\r\n  getAdmin() {\r\n    return this.http.get(environment.apiBaseUrl + \"/admin\");\r\n  }\r\n\r\n  //Helper Methods\r\n\r\n  // save token of current user inside local storage\r\n  setToken(token: string) {\r\n    localStorage.setItem(\"token\", token);\r\n  }\r\n\r\n  // get the token in local storage\r\n  getToken() {\r\n    return localStorage.getItem(\"token\");\r\n  }\r\n\r\n  // delete token inside local storage\r\n  deleteToken() {\r\n    localStorage.removeItem(\"token\");\r\n  }\r\n\r\n  // decode JWT token inside local storage\r\n  decodeToken() {\r\n    return decode(localStorage.getItem(\"token\"));\r\n  }\r\n  // Extract user payload from token\r\n  getUserPayload() {\r\n    var token = this.getToken();\r\n    if (token) {\r\n      var userPayload = atob(token.split(\".\")[1]);\r\n      return JSON.parse(userPayload);\r\n    } else return null;\r\n  }\r\n\r\n  isLoggedIn() {\r\n    var userPayload = this.getUserPayload();\r\n    // check if jwt expiration time is over or not\r\n    if (userPayload) return userPayload.exp > Date.now() / 1000;\r\n    else return false;\r\n  }\r\n\r\n  isAdmin() {\r\n    this.role = this.decodeToken().admin;\r\n    //console.log(this.role);\r\n    return this.role;\r\n  }\r\n\r\n  displayAdmin() {\r\n    if (this.isLoggedIn() && this.isAdmin()) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Http } from \"@angular/http\";\r\nimport { environment } from \"../../environments/environment\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class MoviesService {\r\n  constructor(private http: Http) { }\r\n\r\n  private url = environment.apiBaseUrl + \"/movies\";\r\n\r\n  getMovies() {\r\n    return this.http.get(this.url);\r\n  }\r\n\r\n  getMoviesById(_id) {\r\n    return this.http.get(this.url + \"/\" + _id);\r\n  }\r\n\r\n  createMovies(movie) {\r\n    return this.http.post(this.url, movie);\r\n  }\r\n\r\n  updateMovies(movie) {\r\n    console.log(\"in service put\", movie);\r\n    return this.http.put(this.url + \"/\" + movie._id, movie);\r\n  }\r\n\r\n  deleteMovies(_id) {\r\n    return this.http.delete(this.url + \"/\" + _id);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../environments/environment\";\r\nimport { Http } from \"@angular/http\";\r\nimport { MovieBooking } from \"../components/book-movies/book-movies.model\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class TicketService {\r\n  tickets: MovieBooking[];\r\n  constructor(private http: Http) {}\r\n\r\n  bookMovie(booking: MovieBooking) {\r\n    return this.http.post(environment.apiBaseUrl + \"/book\", booking);\r\n  }\r\n\r\n  getTickets() {\r\n    return this.http.get(environment.apiBaseUrl + \"/tickets\");\r\n  }\r\n\r\n  deleteTicket(_id) {\r\n    return this.http.delete(environment.apiBaseUrl + \"/\" + _id);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  // Run in the cloud\r\n  // apiBaseUrl:\r\n  //   \"http://ec2-18-236-193-77.us-west-2.compute.amazonaws.com:3000/api\",\r\n\r\n  // Run locally\r\n  apiBaseUrl: \"http://localhost:3000/api\"\r\n};\r\n\r\n/*\r\n * In development mode, for easier debugging, you can ignore zone related error\r\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\r\n * below file. Don't forget to comment it out in production mode\r\n * because it will have a performance impact when errors are thrown\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\n\r\nimport { AppModule } from \"./app/app.module\";\r\nimport { environment } from \"./environments/environment\";\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}
>>>>>>> 861f4fb494cab87601f2b5606bb497880454c466
