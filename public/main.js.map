{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/auth/admin.guard.ts","webpack:///./src/app/auth/auth.guard.ts","webpack:///./src/app/auth/auth.interceptor.ts","webpack:///./src/app/components/add-movie-form/add-movie-form.component.css","webpack:///./src/app/components/add-movie-form/add-movie-form.component.html","webpack:///./src/app/components/add-movie-form/add-movie-form.component.ts","webpack:///./src/app/components/admin/admin.component.css","webpack:///./src/app/components/admin/admin.component.html","webpack:///./src/app/components/admin/admin.component.ts","webpack:///./src/app/components/book-movies/book-movies.component.css","webpack:///./src/app/components/book-movies/book-movies.component.html","webpack:///./src/app/components/book-movies/book-movies.component.ts","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.css","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.html","webpack:///./src/app/components/coming-soon-movie-list/coming-soon-movie-list.component.ts","webpack:///./src/app/components/common/checkWordsMatched.ts","webpack:///./src/app/components/common/validators/formArray.validators.ts","webpack:///./src/app/components/common/validators/movie.name.validators.ts","webpack:///./src/app/components/company-information/company-information.component.css","webpack:///./src/app/components/company-information/company-information.component.html","webpack:///./src/app/components/company-information/company-information.component.ts","webpack:///./src/app/components/edit-profile/edit-profile.component.css","webpack:///./src/app/components/edit-profile/edit-profile.component.html","webpack:///./src/app/components/edit-profile/edit-profile.component.ts","webpack:///./src/app/components/footer/footer.component.css","webpack:///./src/app/components/footer/footer.component.html","webpack:///./src/app/components/footer/footer.component.ts","webpack:///./src/app/components/genre/genre.component.css","webpack:///./src/app/components/genre/genre.component.html","webpack:///./src/app/components/genre/genre.component.ts","webpack:///./src/app/components/header/header.component.css","webpack:///./src/app/components/header/header.component.html","webpack:///./src/app/components/header/header.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/message/message.component.css","webpack:///./src/app/components/message/message.component.html","webpack:///./src/app/components/message/message.component.ts","webpack:///./src/app/components/movie/movie.component.css","webpack:///./src/app/components/movie/movie.component.html","webpack:///./src/app/components/movie/movie.component.ts","webpack:///./src/app/components/navigation-bar/navigation-bar.component.css","webpack:///./src/app/components/navigation-bar/navigation-bar.component.html","webpack:///./src/app/components/navigation-bar/navigation-bar.component.ts","webpack:///./src/app/components/not-found-page/not-found-page.component.css","webpack:///./src/app/components/not-found-page/not-found-page.component.html","webpack:///./src/app/components/not-found-page/not-found-page.component.ts","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.css","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.html","webpack:///./src/app/components/now-showing-movie-list/now-showing-movie-list.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/components/search-bar/search-bar.component.css","webpack:///./src/app/components/search-bar/search-bar.component.html","webpack:///./src/app/components/search-bar/search-bar.component.ts","webpack:///./src/app/components/ticket/ticket.component.css","webpack:///./src/app/components/ticket/ticket.component.html","webpack:///./src/app/components/ticket/ticket.component.ts","webpack:///./src/app/components/user-profile/user-profile.component.css","webpack:///./src/app/components/user-profile/user-profile.component.html","webpack:///./src/app/components/user-profile/user-profile.component.ts","webpack:///./src/app/services/authentication.service.ts","webpack:///./src/app/services/movies.service.ts","webpack:///./src/app/services/ticket.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<header></header>\\r\\n<navigation-bar></navigation-bar>\\r\\n<router-outlet></router-outlet>\\r\\n<footer></footer>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'GoldenCinema';\r\n}\r\n","import { Component } from \"@angular/core\";\r\n// Built-in imports\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\r\n\r\n// Component imports\r\nimport { AppComponent } from \"./app.component\";\r\nimport { SearchBarComponent } from \"./components/search-bar/search-bar.component\";\r\nimport { NavigationBarComponent } from \"./components/navigation-bar/navigation-bar.component\";\r\nimport { NowShowingMovieListComponent } from \"./components/now-showing-movie-list/now-showing-movie-list.component\";\r\nimport { ComingSoonMovieListComponent } from \"./components/coming-soon-movie-list/coming-soon-movie-list.component\";\r\nimport { FooterComponent } from \"./components/footer/footer.component\";\r\nimport { HeaderComponent } from \"./components/header/header.component\";\r\nimport { GenreComponent } from \"./components/genre/genre.component\";\r\nimport { HomeComponent } from \"./components/home/home.component\";\r\nimport { CompanyInformationComponent } from \"./components/company-information/company-information.component\";\r\nimport { NotFoundPageComponent } from \"./components/not-found-page/not-found-page.component\";\r\nimport { AddMovieFormComponent } from \"./components/add-movie-form/add-movie-form.component\";\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\nimport { RegisterComponent } from \"./components/register/register.component\";\r\nimport { MovieComponent } from \"./components/movie/movie.component\";\r\nimport { AdminComponent } from \"./components/admin/admin.component\";\r\nimport { MessageComponent } from \"./components/message/message.component\";\r\nimport { BookMoviesComponent } from \"./components/book-movies/book-movies.component\";\r\nimport { UserProfileComponent } from \"./components/user-profile/user-profile.component\";\r\nimport { TicketComponent } from \"./components/ticket/ticket.component\";\r\nimport { EditProfileComponent } from \"./components/edit-profile/edit-profile.component\";\r\n\r\n// Service imports\r\nimport { AuthenticationService } from \"./services/authentication.service\";\r\nimport { MoviesService } from \"./services/movies.service\";\r\nimport { TicketService } from \"./services/ticket.service\";\r\n\r\n// Route imports\r\nimport { RoutingModule } from \"./app.routing\";\r\n\r\n// Other imports\r\nimport { AuthGuard } from \"./auth/auth.guard\";\r\nimport { AdminGuard } from \"./auth/admin.guard\";\r\nimport { AuthInterceptor } from \"./auth/auth.interceptor\";\r\nimport { MyDatePickerModule } from \"mydatepicker\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SearchBarComponent,\r\n    NavigationBarComponent,\r\n    NowShowingMovieListComponent,\r\n    ComingSoonMovieListComponent,\r\n    FooterComponent,\r\n    HeaderComponent,\r\n    GenreComponent,\r\n    HomeComponent,\r\n    CompanyInformationComponent,\r\n    AddMovieFormComponent,\r\n    NotFoundPageComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    MovieComponent,\r\n    UserProfileComponent,\r\n    AdminComponent,\r\n    MessageComponent,\r\n    BookMoviesComponent,\r\n    TicketComponent,\r\n    EditProfileComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    HttpModule,\r\n    RoutingModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MyDatePickerModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptor,\r\n      multi: true\r\n    },\r\n    AuthenticationService,\r\n    AuthGuard,\r\n    AdminGuard,\r\n    MoviesService,\r\n    TicketService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n","import { BookMoviesComponent } from \"./components/book-movies/book-movies.component\";\r\nimport { SearchBarComponent } from \"./components/search-bar/search-bar.component\";\r\nimport { MessageComponent } from \"./components/message/message.component\";\r\nimport { AdminComponent } from \"./components/admin/admin.component\";\r\nimport { MovieComponent } from \"./components/movie/movie.component\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { GenreComponent } from \"./components/genre/genre.component\";\r\nimport { HomeComponent } from \"./components/home/home.component\";\r\nimport { CompanyInformationComponent } from \"./components/company-information/company-information.component\";\r\nimport { NotFoundPageComponent } from \"./components/not-found-page/not-found-page.component\";\r\nimport { AddMovieFormComponent } from \"./components/add-movie-form/add-movie-form.component\";\r\nimport { RegisterComponent } from \"./components/register/register.component\";\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\nimport { UserProfileComponent } from \"./components/user-profile/user-profile.component\";\r\nimport { EditProfileComponent } from \"./components/edit-profile/edit-profile.component\";\r\nimport { TicketComponent } from \"./components/ticket/ticket.component\";\r\nimport { AuthGuard } from \"./auth/auth.guard\";\r\nimport { AdminGuard } from \"./auth/admin.guard\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: HomeComponent\r\n  },\r\n  {\r\n    path: \"home\",\r\n    component: HomeComponent\r\n  },\r\n  {\r\n    path: \"genre\",\r\n    component: GenreComponent\r\n  },\r\n  {\r\n    path: \"admin\",\r\n    component: AdminComponent,\r\n    canActivate: [AuthGuard, AdminGuard],\r\n    data: { isAdmin: true }\r\n  },\r\n  {\r\n    path: \"companyInformation\",\r\n    component: CompanyInformationComponent\r\n  },\r\n  {\r\n    path: \"addMovieForm\",\r\n    component: AddMovieFormComponent,\r\n    canActivate: [AuthGuard, AdminGuard],\r\n    data: { isAdmin: true }\r\n  },\r\n  {\r\n    path: \"login\",\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: \"register\",\r\n    component: RegisterComponent\r\n  },\r\n  {\r\n    path: \"userprofile\",\r\n    component: UserProfileComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: \"editprofile\",\r\n    component: EditProfileComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: \"tickets\",\r\n    component: TicketComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: \"movie/:_id\",\r\n    component: MovieComponent\r\n  },\r\n  {\r\n    path: \"message\",\r\n    component: MessageComponent\r\n  },\r\n  {\r\n    path: \"search\",\r\n    component: SearchBarComponent\r\n  },\r\n  {\r\n    path: \"movie/:showtime/:_id\",\r\n    component: BookMoviesComponent\r\n  },\r\n  {\r\n    path: \"genre/:showtime/:_id\",\r\n    component: BookMoviesComponent\r\n  },\r\n  {\r\n    path: \"search/:showtime/:_id\",\r\n    component: BookMoviesComponent\r\n  },\r\n  {\r\n    path: \"**\",\r\n    component: NotFoundPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RoutingModule {}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router\r\n} from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthenticationService } from \"../services/authentication.service\";\r\nimport \"rxjs/add/operator/switchMap\";\r\nimport \"rxjs/add/operator/map\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    // console.log(\"guard level: admin \" + this.authService.isAdmin());\r\n    // console.log(\"next.data.isAdmin \" + next.data.isAdmin);\r\n\r\n    if (!this.authService.isAdmin() === next.data.isAdmin) {\r\n      this.router.navigateByUrl(\"/login\");\r\n      this.authService.deleteToken();\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router\r\n} from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthenticationService } from \"../services/authentication.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    // If user is not logged in, redirect to login page and delete token in local storage\r\n    if (!this.authService.isLoggedIn()) {\r\n      this.router.navigateByUrl(\"/login\");\r\n      this.authService.deleteToken();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent\r\n} from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthenticationService } from \"../services/authentication.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    if (req.headers.get(\"noauth\")) return next.handle(req.clone());\r\n    else {\r\n      const clonedReq = req.clone({\r\n        headers: req.headers.set(\r\n          \"Authorization\",\r\n          \"Bearer \" + this.authService.getToken()\r\n        )\r\n      });\r\n      return next.handle(clonedReq).pipe(\r\n        tap(\r\n          event => {},\r\n          err => {\r\n            if (err.error.auth == false) {\r\n              this.router.navigateByUrl(\"/login\");\r\n            }\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"ClickToAdmin()\\\">Back to admin</button>\\r\\n<br />\\r\\n<br />\\r\\n<br />\\r\\n\\r\\n<!-- Add movie form -->\\r\\n<form [formGroup]=\\\"form\\\" id=\\\"form\\\">\\r\\n    <!-- Movie Name input for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"name\\\">Movie Name</label>\\r\\n        <input formControlName=\\\"name\\\" id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\r\\n        <div *ngIf=\\\"name.touched && name.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <!-- Display of Validation message for Movie name input -->\\r\\n            <div *ngIf=\\\"name.errors.required\\\">Name is required</div>\\r\\n            <div *ngIf=\\\"name.errors.minlength\\\">Name requires at least {{name.errors.minlength.requiredLength}}\\r\\n                charaters.\\r\\n            </div>\\r\\n            <div *ngIf=\\\"name.errors.maxlength\\\">Name requires at most {{name.errors.maxlength.requiredLength}}\\r\\n                charaters.\\r\\n            </div>\\r\\n            <div *ngIf=\\\"name.errors.shouldBeUnique\\\">Name should be unique.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Running time (minutes) input for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"runningTime\\\">Running time</label>\\r\\n        <input formControlName=\\\"runningTime\\\" id=\\\"runningTime\\\" type=\\\"number\\\" class=\\\"form-control\\\">\\r\\n        <!-- Display of Validation message for Running time input -->\\r\\n        <div *ngIf=\\\"runningTime.touched && runningTime.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"runningTime.errors.required\\\">Running time is required.</div>\\r\\n            <div *ngIf=\\\"runningTime.errors.min\\\">Running time requires at least greater than or equal 1.</div>\\r\\n            <div *ngIf=\\\"runningTime.errors.max\\\">Running time requires less than or equal 500.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Showtime (sessions) input for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"showtime\\\">Session\\r\\n            <!-- Instruction for user input of an array of showtime -->\\r\\n            <br />(please press enter for the datetime one by one and delete the datetime by clicking it)</label>\\r\\n        <input formArrayName=\\\"showtime\\\" id=\\\"showtime\\\" type=\\\"datetime-local\\\" (keyup.enter)=\\\"addShowtime(showtimeItem)\\\"\\r\\n            #showtimeItem class=\\\"form-control\\\">\\r\\n        <!-- Display of showtime list after user preses Enter -->\\r\\n        <!-- When clicked, the showtime element will be removed -->\\r\\n        <ul class=\\\"list-group\\\">\\r\\n            <li *ngFor=\\\"let showtimeItem of showtime.controls , let i = index\\\" (click)=\\\"\\r\\n                    removeShowtime(showtimeItem)\\\"\\r\\n                class=\\\"list-group-item\\\">\\r\\n                {{showtime.value[i]}}\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n\\r\\n    <!-- Stars (Actors/Actresses) input for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"stars\\\">Stars\\r\\n            <!-- Instruction for user input of an array of stars (actors/actresses) -->\\r\\n            <br />(please press enter for the name one by one and delete the name by clicking it) </label>\\r\\n        <input formArrayName=\\\"stars\\\" id=\\\"stars\\\" type=\\\"text\\\" (keyup.enter)=\\\"addStar(star)\\\" #star class=\\\"form-control\\\">\\r\\n        <!-- Display of stars (actors/actresses) list after user preses Enter -->\\r\\n        <!-- When clicked, the start element will be removed -->\\r\\n        <ul class=\\\"list-group\\\">\\r\\n            <li *ngFor=\\\"let star of stars.controls\\\" (click)=\\\"removeStar(star)\\\" class=\\\"list-group-item\\\">\\r\\n                {{star.value}}\\r\\n            </li>\\r\\n        </ul>\\r\\n        <!-- Display of Validation message for Stars (Actors/Actresses) input -->\\r\\n        <div *ngIf=\\\"stars.touched && stars.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"stars.errors.cannotBeNull\\\">Stars name is required</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Gernes input for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"genres\\\">Genres\\r\\n            <!-- Instruction for user input of an array of gernes  -->\\r\\n            <br />(please press enter for the genre one by one and delete the genre by clicking it)</label>\\r\\n        <input formArrayName=\\\"genres\\\" id=\\\"genres\\\" type=\\\"text\\\" (keyup.enter)=\\\"addGenre(genre)\\\" #genre placeholder=\\\"Please enter dramas/ action/ crime/ horror/ comedies/ fantasy/ romance\\\"\\r\\n            class=\\\"form-control\\\">\\r\\n        <!-- Display of gernes list after user preses Enter -->\\r\\n        <!-- When clicked, the gerne element will be removed -->\\r\\n        <ul class=\\\"list-group\\\">\\r\\n            <li *ngFor=\\\"let genre of genres.controls\\\" (click)=\\\"removeGenre(genre)\\\" class=\\\"list-group-item\\\">\\r\\n                {{genre.value}}\\r\\n            </li>\\r\\n        </ul>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <!-- Director input for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"director\\\">Director</label>\\r\\n        <input formControlName=\\\"director\\\" id=\\\"director\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\r\\n        <!-- Display of Validation message for Director input -->\\r\\n        <div *ngIf=\\\"director.touched && director.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"director.errors.required\\\">Director name is required</div>\\r\\n            <div *ngIf=\\\"director.errors.minlength\\\">Director name requires at least\\r\\n                {{director.errors.minlength.requiredLength}} charaters.</div>\\r\\n            <div *ngIf=\\\"director.errors.maxlength\\\">Director name requires at most\\r\\n                {{director.errors.maxlength.requiredLength}} charaters.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <!-- Storyline (Summary) textarea for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"storyline\\\">Storyline</label>\\r\\n        <textarea formControlName=\\\"storyline\\\" id=\\\"storyline\\\" clos=\\\"30\\\" rows=\\\"10 \\\" class=\\\"form-control\\\"></textarea>\\r\\n        <!-- Display of Validation message for Storyline (Summary) textarea -->\\r\\n        <div *ngIf=\\\"storyline.touched && storyline.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"storyline.errors.required\\\">Storyline is required</div>\\r\\n            <div *ngIf=\\\"storyline.errors.minlength\\\">Storyline requires at least\\r\\n                {{storyline.errors.minlength.requiredLength}} charaters.\\r\\n            </div>\\r\\n            <div *ngIf=\\\"storyline.errors.maxlength\\\">Storyline requires at most\\r\\n                {{storyline.errors.maxlength.requiredLength}} charaters.\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Price input for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"Price\\\">Price</label>\\r\\n        <input formControlName=\\\"price\\\" id=\\\"price\\\" type=\\\"number\\\" class=\\\"form-control\\\">\\r\\n        <!-- Display of Validation message for Price input -->\\r\\n        <div *ngIf=\\\"price.touched && price.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n            <div *ngIf=\\\"price.errors.required\\\">Price is required.</div>\\r\\n            <div *ngIf=\\\"price.errors.min\\\">Price requires at least greater than or equal 1.</div>\\r\\n            <div *ngIf=\\\"price.errors.max\\\">price requires less than or equal 10000.</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Movie Status radio option for adding new movie -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Status</label>\\r\\n        <br>\\r\\n        <label for=\\\"nowShowing\\\">Now Showing: </label>\\r\\n        <input formControlName=\\\"status\\\" id=\\\"nowShowing\\\" type=\\\"radio\\\" class=\\\"form-control\\\" value=\\\"nowShowing\\\">\\r\\n\\r\\n        <label for=\\\"comingSoon\\\">Coming Soon:</label>\\r\\n        <input formControlName=\\\"status\\\" id=\\\"comingSoon\\\" type=\\\"radio\\\" class=\\\"form-control\\\" value=\\\"comingSoon\\\">\\r\\n    </div>\\r\\n\\r\\n    <!-- Button to submit Add movie form -->\\r\\n    <!-- Check form validation before allow submission -->\\r\\n    <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" (click)=\\\"onSubmit()\\\" class=\\\"btn btn-primary\\\">Submit</button>\\r\\n    <br />\\r\\n    <br />\\r\\n    <!-- Alert message: submit button is disabled -->\\r\\n    <div class=\\\"alert alert-info\\\" role=\\\"alert\\\" *ngIf=\\\"!form.valid\\\">\\r\\n        <label>Please complete all the information, thanks!</label>\\r\\n    </div>\\r\\n\\r\\n    <!-- Success message: submit button is enabled -->\\r\\n    <div class=\\\"alert alert-success\\\" role=\\\"alert\\\" *ngIf=\\\"form.valid\\\">\\r\\n        <label>You can submit the movie now.</label>\\r\\n    </div>\\r\\n</form>\\r\\n<br />\"","import { MovieInfoValidators } from \"../common/validators/movie.name.validators\";\r\nimport { FormArrayValidators } from \"../common/validators/formArray.validators\";\r\nimport { MoviesService } from \"../../services/movies.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormControl, FormArray, Validators } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"add-movie-form\",\r\n  templateUrl: \"./add-movie-form.component.html\",\r\n  styleUrls: [\"./add-movie-form.component.css\"]\r\n})\r\nexport class AddMovieFormComponent implements OnInit {\r\n\r\n  //create from group, form control and form array for user input for the infomation of a movie\r\n  form = new FormGroup({\r\n    name: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(1),\r\n        Validators.maxLength(60)\r\n      ]),\r\n      MovieInfoValidators.shouldBeUnique(this.service)\r\n    ),\r\n    runningTime: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.min(1),\r\n        Validators.max(500)\r\n      ])\r\n    ),\r\n    director: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(1),\r\n        Validators.maxLength(50)\r\n      ])\r\n    ),\r\n    stars: new FormArray([], FormArrayValidators.cannotBeNull),\r\n    storyline: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(10),\r\n        Validators.maxLength(1000)\r\n      ])\r\n    ),\r\n    showtime: new FormArray([], FormArrayValidators.cannotBeNull),\r\n    genres: new FormArray([], FormArrayValidators.cannotBeNull),\r\n    price: new FormControl(\r\n      \"\",\r\n      Validators.compose([\r\n        Validators.required,\r\n        Validators.min(1),\r\n        Validators.max(10000)\r\n      ])\r\n    ),\r\n    status: new FormControl(\"\", Validators.required)\r\n  });\r\n\r\n  //accesser for the FormConrol name\r\n  get name() {\r\n    return this.form.get(\"name\");\r\n  }\r\n  //accesser for the FormConrol runningTime\r\n  get runningTime() {\r\n    return this.form.get(\"runningTime\");\r\n  }\r\n  //accesser for the FormControl director\r\n  get director() {\r\n    return this.form.get(\"director\");\r\n  }\r\n  //accesser for the FormArray stars\r\n  get stars() {\r\n    return this.form.get(\"stars\") as FormArray;\r\n  }\r\n  //accesser for the FormControl storyline\r\n  get storyline() {\r\n    return this.form.get(\"storyline\");\r\n  }\r\n  //accesser for the FormArray showtime\r\n  get showtime() {\r\n    return this.form.get(\"showtime\") as FormArray;\r\n  }\r\n  //accesser for the FormArray genres\r\n  get genres() {\r\n    return this.form.get(\"genres\") as FormArray;\r\n  }\r\n  //accesser for the FormControl storyline\r\n  get status() {\r\n    return this.form.get(\"status\");\r\n  }\r\n  //accesser for the FormConrol runningTime\r\n  get price() {\r\n    return this.form.get(\"price\");\r\n  }\r\n\r\n  constructor(private router: Router, private service: MoviesService) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  //add star name in the stars array\r\n  addStar(star: HTMLInputElement) {\r\n    this.stars.push(new FormControl(star.value));\r\n    //clear the enter field\r\n    star.value = \"\";\r\n  }\r\n  //delete a star name in the stars array\r\n  removeStar(star: FormControl) {\r\n    let index = this.stars.controls.indexOf(star);\r\n    this.stars.removeAt(index);\r\n  }\r\n\r\n  //add showtime in the stars array\r\n  addShowtime(showtimeItem: HTMLInputElement) {\r\n    this.showtime.push(new FormControl(showtimeItem.value));\r\n    //clear the enter field\r\n    showtimeItem.value = \"\";\r\n  }\r\n  //delete a star name in the stars array\r\n  removeShowtime(showtimeItem: FormControl) {\r\n    let index = this.stars.controls.indexOf(showtimeItem);\r\n    this.showtime.removeAt(index);\r\n  }\r\n\r\n  //add star name in the stars array\r\n  addGenre(genre: HTMLInputElement) {\r\n    this.genres.push(new FormControl(genre.value));\r\n    //clear the enter field\r\n    genre.value = \"\";\r\n  }\r\n  //delete a star name in the stars array\r\n  removeGenre(genre: FormControl) {\r\n    let index = this.genres.controls.indexOf(genre);\r\n    this.genres.removeAt(index);\r\n  }\r\n\r\n  //submit the form\r\n  onSubmit() {\r\n    //console.log(this.form.value);\r\n    this.service.createMovies(this.form.value).subscribe(response => {\r\n      console.log(response.json());\r\n    });\r\n\r\n    //give a prompt of sucessful operation to admin\r\n    this.router.navigate([\"/message\"]);\r\n  }\r\n\r\n  //button back to admin page\r\n  ClickToAdmin() {\r\n    this.router.navigate([\"/admin\"]);\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<div id=\\\"admin\\\">\\r\\n\\r\\n  <!-- Button leading to \\\"Add new movie\\\" page -->\\r\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"clickToAddMovie()\\\">Add Movies</button>\\r\\n  <br />\\r\\n  <br />\\r\\n  <!-- Display list of movies -->\\r\\n  <div *ngFor=\\\"let movie of movies; let i = index\\\" [attr.movieIndex]=\\\"i\\\">\\r\\n    <br />\\r\\n    <!-- Display movie name -->\\r\\n    <h3>{{movie.name}}</h3>\\r\\n    <br />\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"onDelete(i)\\\">Delete movie </button>\\r\\n    <br />\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"onUpdate(i)\\\">Update Status</button>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display array of showtime/sessions for each movie, pipe into short date format-->\\r\\n    <label>\\r\\n      <span>Session time: </span>\\r\\n      <br />\\r\\n      <br />\\r\\n      <div *ngFor=\\\"let showtime of movie.showtime\\\">{{showtime | date:'short'}}\\r\\n        <br />\\r\\n      </div>\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display movie running time -->\\r\\n    <label>\\r\\n      <span>Running time:</span>\\r\\n      <br />\\r\\n      <br /> {{movie.runningTime}} </label>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display movie director, pipe into uppercase -->\\r\\n    <label>\\r\\n      <span>Director: </span>\\r\\n      <br />\\r\\n      <br /> {{movie.director|uppercase}}\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display list of stars/actors/actresses for each movie -->\\r\\n    <span>Cast: </span>\\r\\n    <br />\\r\\n    <br />\\r\\n    <div *ngFor=\\\"let star of movie.stars\\\">\\r\\n      <label>{{star|uppercase}}</label>\\r\\n      <br />\\r\\n    </div>\\r\\n    <br />\\r\\n\\r\\n    <!-- Display movie storyline/summary -->\\r\\n    <label>\\r\\n      <span>Storyline:</span>\\r\\n      <br />\\r\\n      <br /> {{movie.storyline}}\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display list of movie genres, pipe into uppercase -->\\r\\n    <span>Genre: </span>\\r\\n    <br />\\r\\n    <br />\\r\\n    <div *ngFor=\\\"let genre of movie.genres\\\">\\r\\n      <label>{{genre|uppercase}}</label>\\r\\n      <br />\\r\\n    </div>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display movie ticket price, pipe into AUD currency -->\\r\\n    <label>\\r\\n      <span>Price: </span>\\r\\n      <br />\\r\\n      <br /> {{movie.price | currency:'AUD':true:'1.2-2'}} </label>\\r\\n    <br />\\r\\n    <br />\\r\\n    <label>\\r\\n\\r\\n      <!-- Display movie showing status, pipe into uppercase -->\\r\\n      <span>Status:\\r\\n        <br />\\r\\n        <br />\\r\\n      </span>{{movie.status|uppercase}}</label>\\r\\n    <br />\\r\\n    <br />\\r\\n  </div>\\r\\n</div>\"","import { MoviesService } from \"../../services/movies.service\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\nimport { Router } from \"@angular/router\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"admin\",\r\n  templateUrl: \"./admin.component.html\",\r\n  styleUrls: [\"./admin.component.css\"]\r\n})\r\nexport class AdminComponent implements OnInit {\r\n  movies: any[];\r\n  userAdmin: boolean;\r\n\r\n  //initialize movie service and router\r\n  constructor(\r\n    private movieService: MoviesService,\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    //get all movies\r\n    this.movieService.getMovies().subscribe(response => {\r\n      this.movies = response.json();\r\n    });\r\n  }\r\n\r\n  //delete a movie\r\n  onDelete(movieIndex) {\r\n    let objectId: number;\r\n    console.log(movieIndex);\r\n\r\n    //get the movie id based on the index of the movie\r\n    objectId = this.movies[movieIndex]._id;\r\n    console.log(objectId);\r\n\r\n    //delete the specific movie\r\n    this.movieService.deleteMovies(objectId).subscribe(response => {\r\n      console.log(response.json());\r\n    });\r\n\r\n    //give a prompt of sucessful operation to admin\r\n    this.router.navigate([\"/message\"]);\r\n  }\r\n\r\n  //update the status of a movie\r\n  onUpdate(movieIndex) {\r\n    // update the status of a movie\r\n    this.movies[movieIndex].status === \"nowShowing\"\r\n      ? (this.movies[movieIndex].status = \"comingSoon\")\r\n      : (this.movies[movieIndex].status = \"nowShowing\");\r\n\r\n    //get the current movie\r\n    const movie = this.movies[movieIndex];\r\n    console.log(\"before update\", movie);\r\n\r\n    //update the status of the specific movie\r\n    this.movieService.updateMovies(movie).subscribe(response => {\r\n      console.log(\"response from update:\", response.json());\r\n    });\r\n  }\r\n\r\n  // button for navigting to add movie page \r\n  clickToAddMovie() {\r\n    this.router.navigate([\"/addMovieForm\"]);\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n\\r\\n<!-- Button leading to Home page -->\\r\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"backToHome()\\\">Home Page</button>\\r\\n<br />\\r\\n<br />\\r\\n<br />\\r\\n<h2>Booking:</h2>\\r\\n\\r\\n<!-- Display of selected movie with specified id -->\\r\\n<div *ngFor=\\\"let property of movie\\\" id=\\\"movie\\\">\\r\\n  <br />\\r\\n\\r\\n  <!-- Display movie name -->\\r\\n  <h3>{{property.name}}</h3>\\r\\n  <br />\\r\\n\\r\\n  <!-- Display movie showtime sessions -->\\r\\n  <label>\\r\\n    <span>Sessions: </span>\\r\\n  </label>\\r\\n  <div>{{bookingTime | date:'short'}}\\r\\n    <br />\\r\\n  </div>\\r\\n  <br />\\r\\n\\r\\n  <!-- Display movie ticket price -->\\r\\n  <label>\\r\\n    <span>Price: </span>{{property.price | currency:'AUD':true:'1.2-2'}}</label>\\r\\n  <br />\\r\\n  <br />\\r\\n</div>\\r\\n\\r\\n<!-- If the movie has \\\"coming soon\\\" status -->\\r\\n<div *ngIf=\\\"!flag\\\" id=\\\"movie\\\">\\r\\n  <br />\\r\\n  <br />\\r\\n  <label>This movie is coming soon. Please stay tune.</label>\\r\\n</div>\\r\\n<!-- If the movie is \\\"now showing\\\", display the booking form without email provided before-->\\r\\n<div *ngIf=\\\"onlyMovie()\\\" id=\\\"movie\\\">\\r\\n  <form #bookingForm=\\\"ngForm\\\" (ngSubmit)=\\\"bookingForm.valid && onBook(bookingForm)\\\">\\r\\n    <label>Please enter your email: </label>\\r\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"bookingService.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n      required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': bookingForm.submitted && !email.valid }\\\">\\r\\n    <!-- Display of Validation message for email input -->\\r\\n    <div *ngIf=\\\"bookingForm.submitted && email.errors\\\">\\r\\n      <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n      <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n    </div>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Confirm booking</button>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n<!-- If the movie is \\\"now showing\\\" and user is logged in, display the booking form without user's email provided-->\\r\\n<!-- User can still change the email address to send the ticket to -->\\r\\n<div *ngIf=\\\"bothMovieUser() && userDetails\\\" id=\\\"movie\\\">\\r\\n  <form #bookingForm=\\\"ngForm\\\" (ngSubmit)=\\\"bookingForm.valid && onBook(bookingForm)\\\">\\r\\n    <label>Please check your email:</label>\\r\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n      required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': bookingForm.submitted && !email.valid }\\\">\\r\\n    <!-- Display of Validation message for email input -->\\r\\n    <div *ngIf=\\\"bookingForm.submitted && email.errors\\\">\\r\\n      <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n      <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n    </div>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Confirm booking</button>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n<!-- If the movie has \\\"coming soon\\\" status -->\\r\\n<div>\\r\\n  <label *ngIf=\\\"bookingComplete\\\" class=\\\"success\\\">Your ticket has been succesfully booked. Please check your email for more details.</label>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { MoviesService } from \"../../services/movies.service\";\r\nimport { TicketService } from \"../../services/ticket.service\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"book-movies\",\r\n  templateUrl: \"./book-movies.component.html\",\r\n  styleUrls: [\"./book-movies.component.css\"]\r\n})\r\nexport class BookMoviesComponent implements OnInit {\r\n  movie: any[];\r\n  movieName;\r\n  bookingTime;\r\n  price;\r\n  email;\r\n  userDetails;\r\n  uId: string = \"anonymous\";\r\n  flag: boolean = false;\r\n  bookingComplete: boolean = false;\r\n  userFlag: boolean = this.authService.isLoggedIn();\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private movieService: MoviesService,\r\n    private bookingService: TicketService,\r\n    private authService: AuthenticationService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe(params => {\r\n      this.bookingTime = params.get(\"showtime\");\r\n      console.log(this.bookingTime);\r\n\r\n      let _id = params.get(\"_id\");\r\n      console.log(_id);\r\n\r\n      this.movieService.getMoviesById(_id).subscribe(response => {\r\n        this.movie = response.json().filter(movie => {\r\n          this.movieName = movie.name;\r\n          this.price = movie.price;\r\n          if (movie.status === \"nowShowing\") {\r\n            console.log(\"flag before:\", this.flag);\r\n            this.flag = true;\r\n            console.log(\"flag after:\", this.flag);\r\n            return movie;\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    // If user is logged in, get user information\r\n    if (this.userFlag) {\r\n      this.authService.getUserProfile().subscribe(\r\n        res => {\r\n          this.userDetails = res[\"user\"];\r\n          this.uId = this.userDetails._id;\r\n        },\r\n        err => {}\r\n      );\r\n    }\r\n  }\r\n\r\n  // If movie is \"now showing\" and user is not logged in\r\n  onlyMovie() {\r\n    if (this.flag && !this.userFlag) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // If movie is \"now showing\" and user is logged in\r\n  bothMovieUser() {\r\n    if (this.flag && this.userFlag) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  backToHome() {\r\n    this.router.navigate([\"/home\"]);\r\n  }\r\n\r\n  onBook(form: NgForm) {\r\n    let bookingValue = {\r\n      movieName: this.movieName,\r\n      session: this.bookingTime,\r\n      price: this.price,\r\n      email: form.value.email,\r\n      uId: this.uId\r\n    };\r\n    this.bookingService.bookMovie(bookingValue).subscribe(response => {\r\n      this.bookingComplete = true;\r\n      setTimeout(() => (this.bookingComplete = false), 4000); // Success message for bookingComplete status dissapears after 4 seconds\r\n    });\r\n  }\r\n}\r\n","module.exports = \"ul {\\r\\n  text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n\\r\\n<!-- Block of movies with \\\"Coming Soon\\\" status -->\\r\\n<div class=\\\"comingSoonBlock\\\">\\r\\n  <div class=\\\"list-group\\\">\\r\\n    <div class=\\\"border border-light\\\">\\r\\n      COMING SOON\\r\\n    </div>\\r\\n    <ul if=\\\"list\\\" class=\\\"list-group list-group-flush\\\">\\r\\n      <li class=\\\"list-group-item\\\" *ngFor=\\\"let movie of movies\\\">\\r\\n\\r\\n        <!-- Link to each \\\"Coming Soon\\\" movie details -->\\r\\n        <a [routerLink]=\\\"['../movie', movie._id]\\\" id=\\\"list\\\">{{movie.name}}</a>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { MoviesService } from \"../../services/movies.service\";\r\n\r\n@Component({\r\n  selector: \"coming-soon-movie-list\",\r\n  templateUrl: \"./coming-soon-movie-list.component.html\",\r\n  styleUrls: [\"./coming-soon-movie-list.component.css\"]\r\n})\r\nexport class ComingSoonMovieListComponent implements OnInit {\r\n  movies: any[];\r\n\r\n  //inject movie sevice in the constructor\r\n  constructor(private service: MoviesService) { }\r\n\r\n  //get all the movies that are coming soon at initial stage \r\n  ngOnInit() {\r\n    this.service.getMovies().subscribe(response => this.movies = response.json()\r\n      .filter(movie => movie.status === 'comingSoon'));\r\n  }\r\n}\r\n\r\n\r\n","//evaluate if two words match\r\nexport class CheckWordsMatched {\r\n    CompareWithWords(firstWord, secondWord): boolean {\r\n        //remove all the whitespace of strings and make all the words become lower case to compare if they are matched\r\n        const firstResult = firstWord.toString().toLowerCase().trim().replace(/ /g, \"\");\r\n        const secondResult = secondWord.toString().toLowerCase().trim().replace(/ /g, \"\");\r\n\r\n        return firstResult === secondResult ? true : false;\r\n    }\r\n}\r\n","import { AbstractControl, ValidationErrors, FormArray } from '@angular/forms';\r\n\r\nexport class FormArrayValidators {\r\n\r\n    //validate if the formarray is empty. If it is empty, this method will return validation error.\r\n    static cannotBeNull(control: AbstractControl): ValidationErrors | null {\r\n        if ((control.value as FormArray).length === 0)\r\n            return { cannotBeNull: true }\r\n\r\n        return null;\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { MoviesService } from \"../../../services/movies.service\";\r\nimport { AbstractControl } from \"@angular/forms\";\r\n\r\n@Injectable()\r\nexport class MovieInfoValidators {\r\n  //evaluate if the new movie is already in the database\r\n  static shouldBeUnique(service: MoviesService) {\r\n    return (control: AbstractControl) => {\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          service.getMovies().subscribe(response => {\r\n            let movies = response.json();\r\n\r\n            for (let movie of movies)\r\n              //iterate the movie list to check if the new movie being matches the movie's name in database\r\n              if (control.value.toString().toLowerCase().trim().replace(/ /g, \"\") === movie.name.toString().toLowerCase().trim().replace(/ /g, \"\"))\r\n                return resolve({ shouldBeUnique: true });\r\n\r\n            //valiadtion passes if the new movie is not in the movie database\r\n            return resolve(null);\r\n          });\r\n        }, 1000);\r\n      });\r\n    };\r\n  }\r\n}\r\n\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n\\r\\n<!-- Display company information/About us section -->\\r\\n<div id=\\\"information\\\" class=\\\"text-left text-md-left\\\">\\r\\n    {{introduction}}\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"company-information\",\r\n  templateUrl: \"./company-information.component.html\",\r\n  styleUrls: [\"./company-information.component.css\"]\r\n})\r\nexport class CompanyInformationComponent {\r\n  introduction: string = `Golden Time Cinema is for movie lovers to enjoy the classis movies anytime. Our cinema contains more than ten movie rooms\r\n  with cozy enviroment. We hope audience can have the best experince and travel with time machine to the classic movies\r\n  they love. Feel free to contact us if you have any question. Our team is here to help you responsively.`;\r\n}\r\n","module.exports = \".btn {\\r\\n  margin: 10px;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n\\r\\n\\r\\n<br />\\r\\n<div *ngIf=\\\"userDetails\\\" class=\\\"col-md-8-col-md-offset-2\\\">\\r\\n  <!-- Edit Profile form -->\\r\\n  <form #editProfileForm=\\\"ngForm\\\" (ngSubmit)=\\\"editProfileForm.valid && onUpdate(editProfileForm)\\\">\\r\\n    <input type=\\\"hidden\\\" name=\\\"_id\\\" #_id=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails._id\\\">\\r\\n    <!-- Firstname input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"firstName\\\">First Name</label>\\r\\n      <input type=\\\"text\\\" #firstName=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.firstName\\\" name=\\\"firstName\\\" placeholder=\\\"First Name\\\" class=\\\"form-control\\\"\\r\\n        required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !firstName.valid }\\\">\\r\\n      <!-- Display of Validation message for firstname input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && firstName.errors\\\">\\r\\n        <label *ngIf=\\\"firstName.errors.required\\\" class=\\\"validation-message\\\">First name is required.</label>\\r\\n        <label *ngIf=\\\"firstName.errors.minlength\\\" class=\\\"validation-message\\\">First name must have at least 2 characters.</label>\\r\\n        <label *ngIf=\\\"firstName.errors.maxlength\\\" class=\\\"validation-message\\\">First name should not exceed 30 characters.</label>\\r\\n        <label *ngIf=\\\"firstName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Lastname input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"lastName\\\">Last Name</label>\\r\\n      <input type=\\\"text\\\" #lastName=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.lastName\\\" name=\\\"lastName\\\" placeholder=\\\"Last Name\\\" class=\\\"form-control\\\"\\r\\n        required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !lastName.valid }\\\">\\r\\n      <!-- Display of Validation message for lastname input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && lastName.errors\\\">\\r\\n        <label *ngIf=\\\"lastName.errors.required\\\" class=\\\"validation-message\\\">Last name is required.</label>\\r\\n        <label *ngIf=\\\"lastName.errors.minlength\\\" class=\\\"validation-message\\\">Last name must have at least 2 characters.</label>\\r\\n        <label *ngIf=\\\"lastName.errors.maxlength\\\" class=\\\"validation-message\\\">Last name should not exceed 30 characters.</label>\\r\\n        <label *ngIf=\\\"lastName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Email input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"email\\\">Email</label>\\r\\n      <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n        required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !email.valid }\\\">\\r\\n      <!-- Display of Validation message for email input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && email.errors\\\">\\r\\n        <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n        <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Gender input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"gender\\\">Gender</label>\\r\\n      <select #gender=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.gender\\\" name=\\\"gender\\\" placeholder=\\\"Gender\\\" class=\\\"form-control\\\" required\\r\\n        [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !gender.valid }\\\">\\r\\n        <option [ngValue]=\\\"null\\\" disabled>Select gender</option>\\r\\n        <option *ngFor=\\\"let gender of genders\\\" [ngValue]=\\\"gender\\\">\\r\\n          {{ gender}}\\r\\n        </option>\\r\\n      </select>\\r\\n      <!-- Display of Validation message for gender input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && gender.errors\\\">\\r\\n        <label *ngIf=\\\"gender.errors.required\\\" class=\\\"validation-message\\\">Gender is required.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Date of birth input for user profile -->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"dob\\\">Date of birth</label>\\r\\n      <input type=\\\"date\\\" #dob=\\\"ngModel\\\" [(ngModel)]=\\\"userDetails.dob\\\" name=\\\"dob\\\" placeholder=\\\"Date of Birth\\\" class=\\\"form-control\\\"\\r\\n        required [ngClass]=\\\"{ 'ng-invalid': editProfileForm.submitted && !dob.valid }\\\">\\r\\n      <!-- Display of Validation message for date of birth input -->\\r\\n      <div *ngIf=\\\"editProfileForm.submitted && dob.errors\\\">\\r\\n        <label *ngIf=\\\"dob.errors.required\\\" class=\\\"validation-message\\\">Date of birth is required.</label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <!-- Button to go back to user profile -->\\r\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"backToProfile()\\\">Back to Profile</button>\\r\\n    <!-- Button to submit the Edit Profile form -->\\r\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Update</button>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n<br />\\r\\n\\r\\n<!-- Success message -->\\r\\n<div class=\\\"success\\\" *ngIf=\\\"successMessage\\\">\\r\\n  <label>Update is successful</label>\\r\\n</div>\\r\\n\\r\\n<!-- Error message -->\\r\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\">\\r\\n  <label> {{errorMessages}}</label>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { User } from \"../../auth/user.model\";\r\n\r\n@Component({\r\n  selector: \"edit-profile\",\r\n  templateUrl: \"./edit-profile.component.html\",\r\n  styleUrls: [\"./edit-profile.component.css\"]\r\n})\r\nexport class EditProfileComponent implements OnInit {\r\n  // Email regular expression to validate email format\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  nameRegex = /^([a-zA-Z ]){2,30}$/;\r\n\r\n  userDetails;\r\n  gender = null;\r\n  genders = [\"Female\", \"Male\", \"Other\"];\r\n  successMessage: boolean;\r\n  errorMessages: string;\r\n\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.authService.getUserProfile().subscribe(\r\n      res => {\r\n        this.userDetails = res[\"user\"];\r\n      },\r\n      err => {}\r\n    );\r\n  }\r\n  onUpdate(form: NgForm) {\r\n    this.authService.updateUser(form.value).subscribe(\r\n      res => {\r\n        // this.successMessage = true;\r\n        // setTimeout(() => (this.successMessage = false), 4000); // Success message dissapears after 4 seconds\r\n        this.router.navigate([\"/userprofile\"]);\r\n      },\r\n\r\n      // if there are errors sent from server-side\r\n      err => {\r\n        if (err.status === 422) {\r\n          this.errorMessages = err.error.join(\"<br/>\");\r\n        } else\r\n          this.errorMessages = \"Something went wrong. Please contact admin.\";\r\n      }\r\n    );\r\n  }\r\n\r\n  backToProfile() {\r\n    this.router.navigate([\"/userprofile\"]);\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<!-- Display footer with company name -->\\r\\n<div class=\\\"footer border-top\\\">\\r\\n  {{companyName}}\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"footer\",\r\n  templateUrl: \"./footer.component.html\",\r\n  styleUrls: [\"./footer.component.css\"]\r\n})\r\nexport class FooterComponent {\r\n  companyName = \"@Golden Time Cooperation\";\r\n}\r\n","module.exports = \"a {\\r\\n  text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n\\r\\n<!-- List of genres to find movies by -->\\r\\n<div id=\\\"genres\\\" class=\\\"list-group\\\">\\r\\n    <a (click)=\\\"findMoviesByGenre(dramas)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Dramas</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(action)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Action</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(crime)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Crime</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(horror)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Horror</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(comedies)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Comedies</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(fantasy)\\\" class=\\\"list-group-item list-group-item-action list-group-item-dark\\\">Fantasy</a>\\r\\n    <a (click)=\\\"findMoviesByGenre(romance)\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\">Romance</a>\\r\\n</div>\\r\\n<br />\\r\\n<br />\\r\\n\\r\\n<!-- Display of movie result found -->\\r\\n<div *ngFor=\\\"let property of movies\\\" id=\\\"movie\\\">\\r\\n\\r\\n    <!-- Display movie name -->\\r\\n    <h3>{{property.name}}</h3>\\r\\n    <br />\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display list of movie showtime sessions -->\\r\\n    <label>\\r\\n        <span>Sessions: </span>\\r\\n    </label>\\r\\n    <br />\\r\\n    <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\" [routerLink]=\\\"['../genre', showtime,property._id]\\\">{{showtime | date:'short'}}\\r\\n        <br />\\r\\n    </div>\\r\\n    <br />\\r\\n\\r\\n    <!-- Display movie running time -->\\r\\n    <label>\\r\\n        <span>Running time: </span>\\r\\n        <br />\\r\\n        <br /> {{property.runningTime}} mins\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display movie director, pipe into uppercase -->\\r\\n    <label>\\r\\n        <span>Director: </span>\\r\\n        <br />\\r\\n        <br /> {{property.director | uppercase}}\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display list of movie stars/actors/actresses, pipe into uppercase -->\\r\\n    <label>\\r\\n        <span>Cast:</span>\\r\\n    </label>\\r\\n    <br />\\r\\n    <div *ngFor=\\\"let star of property.stars\\\">\\r\\n        {{star|uppercase}}\\r\\n        <br />\\r\\n    </div>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display movie storyline/summary -->\\r\\n    <label>\\r\\n        <span>Story: </span>\\r\\n        <br />\\r\\n        <br /> {{property.storyline}}\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display list of movie gernes, pipe into uppercase -->\\r\\n    <label>\\r\\n        <span>Genre:</span>\\r\\n    </label>\\r\\n    <div *ngFor=\\\"let genre of property.genres\\\">\\r\\n        {{genre|uppercase}}\\r\\n    </div>\\r\\n    <br />\\r\\n    <br />\\r\\n\\r\\n    <!-- Display movie status, pipe into uppercase -->\\r\\n    <label>\\r\\n        <span>Status: </span>\\r\\n        <br />\\r\\n        <br /> {{property.status | uppercase}}\\r\\n    </label>\\r\\n    <br />\\r\\n    <br />\\r\\n</div>\"","import { MoviesService } from \"../../services/movies.service\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"genre\",\r\n  templateUrl: \"./genre.component.html\",\r\n  styleUrls: [\"./genre.component.css\"]\r\n})\r\nexport class GenreComponent {\r\n  //default genres input\r\n  dramas = \"dramas\";\r\n  action = \"action\";\r\n  crime = \"crime\";\r\n  horror = \"horror\";\r\n  comedies = \"comedies\";\r\n  fantasy = \"fantasy\";\r\n  romance = \"romance\";\r\n  movies: any[];\r\n\r\n  //initiate movie service\r\n  constructor(private service: MoviesService) { }\r\n\r\n  //get movies bt genres\r\n  findMoviesByGenre(genreInput) {\r\n    this.service.getMovies().subscribe(response => {\r\n      //get the entire information of movies by genres\r\n      this.movies = response.json().filter(movies => {\r\n        for (let genre of movies.genres)\r\n          if (genre.toLowerCase() === genreInput.toLowerCase()) return movies;\r\n      });\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<!-- Display Application Title -->\\r\\n<div>\\r\\n  <h1 class=\\\"text-center\\\" style=\\\"font-size:50px\\\">{{title}}</h1>\\r\\n</div>\\r\\n<br />\\r\\n<br />\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"header\",\r\n  templateUrl: \"./header.component.html\",\r\n  styleUrls: [\"./header.component.css\"]\r\n})\r\nexport class HeaderComponent {\r\n  title = \"Golden Time Cinema\";\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<!-- Implement component of now showing movie list -->\\r\\n<now-showing-movie-list></now-showing-movie-list>\\r\\n<br />\\r\\n<br />\\r\\n<br />\\r\\n\\r\\n<!-- Implement component of coming soon movie list -->\\r\\n<coming-soon-movie-list></coming-soon-movie-list>\\r\\n<br />\\r\\n<br />\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"home\",\r\n  templateUrl: \"./home.component.html\",\r\n  styleUrls: [\"./home.component.css\"]\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<div class=\\\"col-md-8-col-md-offset-2\\\">\\r\\n\\r\\n    <!-- Login form -->\\r\\n    <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"loginForm.valid && onLogin(loginForm)\\\">\\r\\n\\r\\n        <!-- Email input for user login -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"email\\\">Email</label>\\r\\n            <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n                required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': loginForm.submitted && !email.valid }\\\">\\r\\n            <!-- Display of Validation message for email input -->\\r\\n            <div *ngIf=\\\"loginForm.submitted && email.errors\\\">\\r\\n                <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n                <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Password input for user login -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"password\\\">Password</label>\\r\\n            <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\r\\n                class=\\\"form-control\\\" minlength=\\\"4\\\" required [ngClass]=\\\"{ 'ng-invalid': loginForm.submitted && !password.valid }\\\">\\r\\n            <!-- Display of Validation message for password input -->\\r\\n            <div *ngIf=\\\"loginForm.submitted && password.errors\\\">\\r\\n                <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">Password is required.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Button to submit login form -->\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Login</button>\\r\\n    </form>\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n<!-- Error message -->\\r\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\">\\r\\n    {{errorMessages}}\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\n@Component({\r\n  selector: \"login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.css\"]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  // Email regular expression to validate email format\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  errorMessages: string;\r\n\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  model = {\r\n    email: \"\",\r\n    password: \"\"\r\n  };\r\n\r\n  ngOnInit() {\r\n    // If user is already logged in, redirect to user profile page\r\n    if (this.authService.isLoggedIn()) {\r\n      this.router.navigateByUrl(\"/userprofile\");\r\n    }\r\n  }\r\n\r\n  onLogin(form: NgForm) {\r\n    this.authService.login(form.value).subscribe(\r\n      // successful authentication\r\n      res => {\r\n        this.authService.setToken(res[\"token\"]); // save token to local storage\r\n        //localStorage.setItem('admin',isAdmin)\r\n        this.router.navigateByUrl(\"/userprofile\"); // redirect to user profile page\r\n      },\r\n      // If errors occur\r\n      err => {\r\n        this.errorMessages = err.error.message;\r\n      }\r\n    );\r\n  }\r\n}\r\n","module.exports = \"#message{\\r\\n    color: red;\\r\\n}\"","module.exports = \"<br />\\r\\n<br />\\r\\n\\r\\n<!-- Button to go back to Admin page -->\\r\\n<button class=\\\"btn btn-secondary\\\" (click)=\\\"backToAdmin()\\\">back to admin</button>\\r\\n\\r\\n<!-- Success message -->\\r\\n<div id=\\\"message\\\">\\r\\n  <br />\\r\\n  <br />\\r\\n  <br />\\r\\n  <br />\\r\\n  <p class=\\\"alert alert-success\\\" role=\\\"alert\\\">{{message}}</p>\\r\\n\\r\\n</div>\"","import { Router } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'message',\r\n  templateUrl: './message.component.html',\r\n  styleUrls: ['./message.component.css']\r\n})\r\nexport class MessageComponent {\r\n  message: string = `The operation is successful.`;\r\n  constructor(private router: Router) { }\r\n  //button back to admin\r\n  backToAdmin() {\r\n    this.router.navigate([\"/admin\"]);\r\n  }\r\n\r\n}\r\n","module.exports = \"h3 {\\r\\n  text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n<br />\\r\\n\\r\\n<!-- Display indvidual movie component with specified id -->\\r\\n<div *ngFor=\\\"let property of movie\\\" id=\\\"movie\\\">\\r\\n\\r\\n  <!-- Display movie name -->\\r\\n  <h3>{{property.name}}</h3>\\r\\n  <br />\\r\\n  <br />\\r\\n  <br />\\r\\n\\r\\n  <!-- Display list of movie showtime sessions -->\\r\\n  <label>\\r\\n    <span>Sessions: </span>\\r\\n  </label>\\r\\n  <br />\\r\\n  <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\" [routerLink]=\\\"['../', showtime,property._id]\\\">{{showtime | date:'short'}}\\r\\n    <br />\\r\\n  </div>\\r\\n  <br />\\r\\n\\r\\n  <!-- Display movie running time -->\\r\\n  <label>\\r\\n    <span>Running time: </span>\\r\\n    <br />\\r\\n    <br /> {{property.runningTime}} mins\\r\\n  </label>\\r\\n  <br />\\r\\n  <br />\\r\\n\\r\\n  <!-- Display movie director, pipe into uppercase -->\\r\\n  <label>\\r\\n    <span>Director: </span>\\r\\n    <br />\\r\\n    <br /> {{property.director | uppercase}}\\r\\n  </label>\\r\\n  <br />\\r\\n  <br />\\r\\n\\r\\n  <!-- Display list of movie stars/actors/actresses, pipe into uppercase -->\\r\\n  <label>\\r\\n    <span>Cast:</span>\\r\\n  </label>\\r\\n  <br />\\r\\n  <div *ngFor=\\\"let star of property.stars\\\">\\r\\n    {{star|uppercase}}\\r\\n    <br />\\r\\n  </div>\\r\\n  <br />\\r\\n  <br />\\r\\n\\r\\n  <!-- Display movie storyline/summary -->\\r\\n  <label>\\r\\n    <span>Story: </span>\\r\\n    <br />\\r\\n    <br /> {{property.storyline}}\\r\\n  </label>\\r\\n  <br />\\r\\n  <br />\\r\\n\\r\\n  <!-- Display list of movie gernes, pipe into uppercase -->\\r\\n  <label>\\r\\n    <span>Genre:</span>\\r\\n  </label>\\r\\n  <div *ngFor=\\\"let genre of property.genres\\\">\\r\\n    {{genre|uppercase}}\\r\\n  </div>\\r\\n  <br />\\r\\n  <br />\\r\\n\\r\\n  <!-- Display movie status, pipe into uppercase -->\\r\\n  <label>\\r\\n    <span>Status: </span>\\r\\n    <br />\\r\\n    <br /> {{property.status | uppercase}}\\r\\n  </label>\\r\\n  <br />\\r\\n  <br />\\r\\n</div>\"","import { ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MoviesService } from '../../services/movies.service';\r\n\r\n@Component({\r\n  selector: 'app-movie',\r\n  templateUrl: './movie.component.html',\r\n  styleUrls: ['./movie.component.css']\r\n})\r\nexport class MovieComponent implements OnInit {\r\n\r\n  movie: any[];\r\n\r\n  constructor(private route: ActivatedRoute, private service: MoviesService) { }\r\n\r\n  ngOnInit() {\r\n    //get the router parameter that is the object id of a movie.\r\n    this.route.paramMap\r\n      .subscribe(params => {\r\n        let _id = params.get('_id');\r\n\r\n        //get a specific movie object by its object id\r\n        this.service.getMoviesById(_id).subscribe(response => {\r\n          this.movie = response.json();\r\n        })\r\n      })\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<nav>\\r\\n  <!-- Display of navigation bar -->\\r\\n  <ul class=\\\"nav justify-content-center\\\">\\r\\n\\r\\n    <!-- Link to Home page -->\\r\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../\\\">{{home}}</a>\\r\\n    </li>\\r\\n\\r\\n    <!-- Link to Search page -->\\r\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../search\\\">{{search}}</a>\\r\\n    </li>\\r\\n\\r\\n    <!-- Link to Genres page -->\\r\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../genre\\\">{{genre}}</a>\\r\\n    </li>\\r\\n\\r\\n    <!-- Only display admin tab for admin user -->\\r\\n    <!-- Link to Admin page -->\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.displayAdmin()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../admin\\\">{{admin}}</a>\\r\\n    </li>\\r\\n\\r\\n\\r\\n    <!-- User authService.isLoggedIn directly here to solve problem of manually refreshing the page to see changes -->\\r\\n    <!-- Below link will only be displayed if the user is logged in-->\\r\\n\\r\\n    <!-- Link to Login page -->\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"!authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../login\\\">{{logIn}}</a>\\r\\n    </li>\\r\\n\\r\\n    <!-- Link to Register page -->\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"!authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../register\\\">{{register}}</a>\\r\\n    </li>\\r\\n\\r\\n    <!-- Link to Ticket Order page -->\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../tickets\\\">{{ticket}}</a>\\r\\n    </li>\\r\\n\\r\\n    <!-- Link to User Profile page -->\\r\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.isLoggedIn()\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../userprofile\\\">{{profile}}</a>\\r\\n    </li>\\r\\n\\r\\n    <!-- Link to About us page -->\\r\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n      <a routerLink=\\\"../companyInformation\\\">{{companyInformation}}</a>\\r\\n    </li>\\r\\n  </ul>\\r\\n\\r\\n</nav>\\r\\n<br />\\r\\n<div class=\\\"border border-bottom border-light\\\"> </div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\n@Component({\r\n  selector: \"navigation-bar\",\r\n  templateUrl: \"./navigation-bar.component.html\",\r\n  styleUrls: [\"./navigation-bar.component.css\"]\r\n})\r\nexport class NavigationBarComponent {\r\n  logIn = \"LOG IN\";\r\n  home = \"HOME\";\r\n  register = \"REGISTER\";\r\n  genre = \"GENRES\";\r\n  admin = \"ADMIN\";\r\n  companyInformation = \"ABOUT US\";\r\n  profile = \"PROFILE\";\r\n  ticket = \"ORDERS\";\r\n  search = \"SEARCH\";\r\n\r\n  constructor(private authService: AuthenticationService) { }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<br />\\r\\n<!-- Alert message: Page not found -->\\r\\n<div class=\\\"alert alert-warning\\\" id=\\\"message\\\">Sorry, the page has not been found!</div>\\r\\n<footer></footer>\"","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"not-found-page\",\r\n  templateUrl: \"./not-found-page.component.html\",\r\n  styleUrls: [\"./not-found-page.component.css\"]\r\n})\r\nexport class NotFoundPageComponent {\r\n}\r\n","module.exports = \"ul {\\r\\n  text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n<div>\\r\\n\\r\\n  <!-- Block of movies with \\\"Now Showing\\\" status -->\\r\\n  <div class=\\\"nowShowingBlock\\\">\\r\\n    <div class=\\\"border border-light\\\">NOW SHOWING</div>\\r\\n  </div>\\r\\n  <ul if=\\\"list\\\" class=\\\"list-group list-group-flush\\\">\\r\\n    <li class=\\\"list-group-item\\\" *ngFor=\\\"let movie of movies\\\">\\r\\n\\r\\n      <!-- Link to each \\\"Now Showing\\\" movie details -->\\r\\n      <a [routerLink]=\\\"['../movie', movie._id]\\\" id=\\\"list\\\">{{movie.name}}</a>\\r\\n    </li>\\r\\n  </ul>\\r\\n</div>\"","import { MoviesService } from \"../../services/movies.service\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"now-showing-movie-list\",\r\n  templateUrl: \"./now-showing-movie-list.component.html\",\r\n  styleUrls: [\"./now-showing-movie-list.component.css\"]\r\n})\r\nexport class NowShowingMovieListComponent implements OnInit {\r\n  movies: any[];\r\n\r\n  constructor(private service: MoviesService) { }\r\n\r\n  ngOnInit() {\r\n    //get the movies that are now showing\r\n    this.service.getMovies().subscribe(response => this.movies = response.json()\r\n      .filter(movie => movie.status === \"nowShowing\")\r\n    );\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<div class=\\\"col-md-8-col-md-offset-2\\\">\\r\\n\\r\\n    <!-- Registration form -->\\r\\n    <form #registerForm=\\\"ngForm\\\" (ngSubmit)=\\\"registerForm.valid && onRegister(registerForm)\\\">\\r\\n        <!-- Firstname input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"firstName\\\">First Name</label>\\r\\n            <input type=\\\"text\\\" #firstName=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.firstName\\\" name=\\\"firstName\\\" placeholder=\\\"First Name\\\"\\r\\n                class=\\\"form-control\\\" required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !firstName.valid }\\\">\\r\\n            <!-- Display of Validation message for firstname input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && firstName.errors\\\">\\r\\n                <label *ngIf=\\\"firstName.errors.required\\\" class=\\\"validation-message\\\">First name is required.</label>\\r\\n                <label *ngIf=\\\"firstName.errors.minlength\\\" class=\\\"validation-message\\\">First name must have at least 2 characters.</label>\\r\\n                <label *ngIf=\\\"firstName.errors.maxlength\\\" class=\\\"validation-message\\\">First name should not exceed 30 characters.</label>\\r\\n                <label *ngIf=\\\"firstName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Lastname input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"lastName\\\">Last Name</label>\\r\\n            <input type=\\\"text\\\" #lastName=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.lastName\\\" name=\\\"lastName\\\" placeholder=\\\"Last Name\\\"\\r\\n                class=\\\"form-control\\\" required [pattern]=\\\"nameRegex\\\" minlength=\\\"2\\\" maxlength=\\\"30\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !lastName.valid }\\\">\\r\\n            <!-- Display of Validation message for lastname input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && lastName.errors\\\">\\r\\n                <label *ngIf=\\\"lastName.errors.required\\\" class=\\\"validation-message\\\">Last name is required.</label>\\r\\n                <label *ngIf=\\\"lastName.errors.minlength\\\" class=\\\"validation-message\\\">Last name must have at least 2 characters.</label>\\r\\n                <label *ngIf=\\\"lastName.errors.maxlength\\\" class=\\\"validation-message\\\">Last name should not exceed 30 characters.</label>\\r\\n                <label *ngIf=\\\"lastName.errors.pattern\\\" class=\\\"validation-message\\\">Invalid name format.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Email input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"email\\\">Email</label>\\r\\n            <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" class=\\\"form-control\\\"\\r\\n                required [pattern]=\\\"emailRegex\\\" [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !email.valid }\\\">\\r\\n            <!-- Display of Validation message for email input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && email.errors\\\">\\r\\n                <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">Email is required.</label>\\r\\n                <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Password input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"password\\\">Password</label>\\r\\n            <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\r\\n                class=\\\"form-control\\\" minlength=\\\"4\\\" required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !password.valid }\\\">\\r\\n            <!-- Display of Validation message for password input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && password.errors\\\">\\r\\n                <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">Password is required.</label>\\r\\n                <label *ngIf=\\\"password.errors.minlength\\\" class=\\\"validation-message\\\">Password must have at least 4 characters.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Gender input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"gender\\\">Gender</label>\\r\\n            <select #gender=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.gender\\\" name=\\\"gender\\\" placeholder=\\\"Gender\\\" class=\\\"form-control\\\"\\r\\n                required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !gender.valid }\\\">\\r\\n                <option [ngValue]=\\\"null\\\" disabled>Select gender</option>\\r\\n                <option *ngFor=\\\"let gender of genders\\\" [ngValue]=\\\"gender\\\">\\r\\n                    {{ gender}}\\r\\n                </option>\\r\\n            </select>\\r\\n            <!-- Display of Validation message for gender input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && gender.errors\\\">\\r\\n                <label *ngIf=\\\"gender.errors.required\\\" class=\\\"validation-message\\\">Gender is required.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Date of birth input for user registration -->\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"dob\\\">Date of birth</label>\\r\\n            <input type=\\\"date\\\" #dob=\\\"ngModel\\\" [(ngModel)]=\\\"authService.selectedUser.dob\\\" name=\\\"dob\\\" placeholder=\\\"Date of Birth\\\" class=\\\"form-control\\\"\\r\\n                required [ngClass]=\\\"{ 'ng-invalid': registerForm.submitted && !dob.valid }\\\">\\r\\n            <!-- Display of Validation message for date of birth input -->\\r\\n            <div *ngIf=\\\"registerForm.submitted && dob.errors\\\">\\r\\n                <label *ngIf=\\\"dob.errors.required\\\" class=\\\"validation-message\\\">Date of birth is required.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Button to submit register form -->\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Register</button>\\r\\n    </form>\\r\\n</div>\\r\\n<br />\\r\\n\\r\\n<!-- Success message -->\\r\\n<div class=\\\"success\\\" *ngIf=\\\"successMessage\\\">\\r\\n    Registration is completed. Please log into your account.\\r\\n</div>\\r\\n\\r\\n<!-- Error message -->\\r\\n<div class=\\\"alert\\\" *ngIf=\\\"errorMessages\\\">\\r\\n    {{errorMessages}}\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: \"register\",\r\n  templateUrl: \"./register.component.html\",\r\n  styleUrls: [\"./register.component.css\"]\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  // Email regular expression to validate email format\r\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  nameRegex = /^([a-zA-Z ]){2,30}$/;\r\n  gender = null;\r\n  genders = [\"Female\", \"Male\", \"Other\"];\r\n  successMessage: boolean;\r\n  errorMessages: string;\r\n\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // If user is already logged in, redirect to user profile page\r\n    if (this.authService.isLoggedIn()) {\r\n      this.router.navigateByUrl(\"/userprofile\");\r\n    }\r\n  }\r\n\r\n  onRegister(form: NgForm) {\r\n    this.authService.registerUser(form.value).subscribe(\r\n      // if registration is successfull\r\n      res => {\r\n        this.successMessage = true;\r\n        setTimeout(() => (this.successMessage = false), 4000); // Success message dissapears after 4 seconds\r\n        this.resetForm(form);\r\n      },\r\n\r\n      // if there are errors sent from server-side\r\n      err => {\r\n        if (err.status === 422) {\r\n          this.errorMessages = err.error.join(\"<br/>\");\r\n        } else\r\n          this.errorMessages = \"Something went wrong. Please contact admin.\";\r\n      }\r\n    );\r\n  }\r\n\r\n  resetForm(form: NgForm) {\r\n    this.authService.selectedUser = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      gender: \"\",\r\n      dob: null,\r\n      isAdmin: false,\r\n      _id: \"\"\r\n    };\r\n    form.resetForm();\r\n    this.errorMessages = \"\";\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<br />\\r\\n<br />\\r\\n<div id=\\\"searchBar\\\">\\r\\n\\r\\n    <!-- Search movie form -->\\r\\n    <form [formGroup]=\\\"form\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <!-- Movie name input for search form -->\\r\\n            <input formControlName=\\\"movieName\\\" type=\\\"text\\\" placeholder=\\\"please search here\\\" class=\\\"form-control\\\">\\r\\n            <div class=\\\"input-group-append\\\">\\r\\n                <button class=\\\"btn btn-outline-secondary\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" (click)=\\\"onSubmit()\\\">search</button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <br />\\r\\n\\r\\n        <!-- Display of Validation message for search form -->\\r\\n        <div *ngIf=\\\"movieName.invalid\\\">\\r\\n            <div *ngIf=\\\"movieName.errors.minlength\\\">Name requires at least {{movieName.errors.minlength.requiredLength}} charaters.\\r\\n            </div>\\r\\n            <div *ngIf=\\\"movieName.errors.maxlength\\\">Name requires at most {{movieName.errors.maxlength.requiredLength}} charaters.\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n\\r\\n    <!-- Alert message for not found results -->\\r\\n    <div *ngIf=flag>\\r\\n        <p class=\\\"alert alert-warning\\\" role=\\\"alert\\\">\\r\\n            Sorry, the result you are looking for has not been found.\\r\\n        </p>\\r\\n    </div>\\r\\n</div>\\r\\n<div>\\r\\n\\r\\n    <!-- Display of movie result found -->\\r\\n    <div *ngFor=\\\"let property of movieResult\\\" id=\\\"movie\\\">\\r\\n\\r\\n        <!-- Display movie name -->\\r\\n        <h3>{{property.name}}</h3>\\r\\n        <br />\\r\\n        <br />\\r\\n        <br />\\r\\n\\r\\n        <!-- Display list of movie showtime sessions -->\\r\\n        <label>\\r\\n            <span>Sessions: </span>\\r\\n        </label>\\r\\n        <br />\\r\\n        <div *ngFor=\\\"let showtime of property.showtime\\\" class=\\\"list-group-item list-group-item-action list-group-item-light\\\" [routerLink]=\\\"['../genre', showtime,property._id]\\\">{{showtime | date:'short'}}\\r\\n            <br />\\r\\n        </div>\\r\\n        <br />\\r\\n\\r\\n        <!-- Display movie running time -->\\r\\n        <label>\\r\\n            <span>Running time: </span>\\r\\n            <br />\\r\\n            <br /> {{property.runningTime}} mins\\r\\n        </label>\\r\\n        <br />\\r\\n        <br />\\r\\n\\r\\n        <!-- Display movie director, pipe into uppercase -->\\r\\n        <label>\\r\\n            <span>Director: </span>\\r\\n            <br />\\r\\n            <br /> {{property.director | uppercase}}\\r\\n        </label>\\r\\n        <br />\\r\\n        <br />\\r\\n\\r\\n        <!-- Display list of movie stars/actors/actresses, pipe into uppercase -->\\r\\n        <label>\\r\\n            <span>Cast:</span>\\r\\n        </label>\\r\\n        <br />\\r\\n        <div *ngFor=\\\"let star of property.stars\\\">\\r\\n            {{star|uppercase}}\\r\\n            <br />\\r\\n        </div>\\r\\n        <br />\\r\\n        <br />\\r\\n\\r\\n        <!-- Display movie storyline/summary -->\\r\\n        <label>\\r\\n            <span>Story: </span>\\r\\n            <br />\\r\\n            <br /> {{property.storyline}}\\r\\n        </label>\\r\\n        <br />\\r\\n        <br />\\r\\n\\r\\n        <!-- Display list of movie gernes, pipe into uppercase -->\\r\\n        <label>\\r\\n            <span>Genre:</span>\\r\\n        </label>\\r\\n        <div *ngFor=\\\"let genre of property.genres\\\">\\r\\n            {{genre|uppercase}}\\r\\n        </div>\\r\\n        <br />\\r\\n        <br />\\r\\n\\r\\n        <!-- Display movie status, pipe into uppercase -->\\r\\n        <label>\\r\\n            <span>Status: </span>\\r\\n            <br />\\r\\n            <br /> {{property.status | uppercase}}\\r\\n        </label>\\r\\n        <br />\\r\\n        <br />\\r\\n    </div>\"","import { MoviesService } from \"../../services/movies.service\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { CheckWordsMatched } from \"../common/checkWordsMatched\";\r\nimport { FormGroup, FormControl, Validators, } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"search-bar\",\r\n  templateUrl: \"./search-bar.component.html\",\r\n  styleUrls: [\"./search-bar.component.css\"]\r\n})\r\nexport class SearchBarComponent {\r\n  searchResultId;\r\n  movies: any[];\r\n  movieResult: any[];\r\n  //flag for indicating if a error message is shown in search page\r\n  flag = false;\r\n\r\n  //form for the search bar\r\n  form = new FormGroup({\r\n    movieName: new FormControl(\"\", [\r\n      Validators.minLength(2),\r\n      Validators.maxLength(60)\r\n    ])\r\n  });\r\n\r\n  constructor(private service: MoviesService) { }\r\n\r\n  get movieName() {\r\n    return this.form.get(\"movieName\");\r\n  }\r\n\r\n  onSubmit() {\r\n    this.service.getMovies().subscribe(response => {\r\n      this.movies = response.json();\r\n      //find every movie in the database for matching user input\r\n      for (let movie of this.movies) {\r\n        //if the result is not found, the flag is true.\r\n        this.flag = true;\r\n\r\n        //if words match, get the sepecific movie from database\r\n        if (CheckWordsMatched.prototype.CompareWithWords(movie.name, this.form.value.movieName)) {\r\n          //get the object id of the matched movie\r\n          this.searchResultId = movie._id;\r\n\r\n          this.service\r\n            .getMoviesById(this.searchResultId)\r\n            .subscribe(response => {\r\n              //if the result is found, the flag is false\r\n              this.flag = false;\r\n              //get the specific movie searched by users\r\n              this.movieResult = response.json();\r\n            });\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","module.exports = \"label,\\r\\np {\\r\\n  font-size: 16px;\\r\\n}\\r\\n\"","module.exports = \"<br />\\r\\n\\r\\n<!-- Display of user's order history -->\\r\\n<div *ngIf=\\\"userDetails\\\" class=\\\"border border-light\\\">\\r\\n  <h3> YOUR TICKETS</h3>\\r\\n</div>\\r\\n\\r\\n<!-- If ticket records is not null, Display a list of tickets user has booked -->\\r\\n<div *ngIf=\\\"tickets.length > 0\\\" class=\\\"card-group\\\">\\r\\n\\r\\n  <!-- Display of individual ticket with specified id-->\\r\\n  <li class=\\\"list-group-item\\\" *ngFor=\\\"let ticket of tickets; let i = index\\\" [attr.ticketId]=\\\"i\\\">\\r\\n\\r\\n    <div class=\\\"card border-dark mb-3\\\" style=\\\"max-width: 18rem;\\\">\\r\\n      <!-- Display ticket order -->\\r\\n      <div class=\\\"card-header\\\">Ticket {{i + 1}}</div>\\r\\n      <div class=\\\"card-body text-dark\\\">\\r\\n\\r\\n        <!-- Display movie name of ticket -->\\r\\n        <h5 class=\\\"card-title\\\">\\r\\n          <strong>{{ticket.movieName}}</strong>\\r\\n        </h5>\\r\\n\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <!-- Display ticket session you have booked -->\\r\\n          <label>Session: </label> {{ticket.session | date:'short'}}\\r\\n          <br/>\\r\\n          <!-- Display email to which ticket was sent -->\\r\\n          <label>Email: </label> {{ticket.email}}\\r\\n          <br/>\\r\\n          <!-- Display ticket price -->\\r\\n          <label>Price: </label> {{ticket.price | currency:'AUD':true:'1.2-2'}}\\r\\n          <br/>\\r\\n        </p>\\r\\n        <button class=\\\"btn btn-secondary\\\" (click)=\\\"onDelete(i)\\\">Delete ticket </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </li>\\r\\n\\r\\n</div>\\r\\n\\r\\n<!-- If no ticket record is found, Display this message -->\\r\\n<div class=\\\"text-center\\\" *ngIf=\\\"tickets.length == 0\\\">\\r\\n  <label style=\\\"margin:50px\\\">You have no orders in the record</label>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { TicketService } from \"../../services/ticket.service\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\n\r\n@Component({\r\n  selector: \"ticket\",\r\n  templateUrl: \"./ticket.component.html\",\r\n  styleUrls: [\"./ticket.component.css\"]\r\n})\r\nexport class TicketComponent implements OnInit {\r\n  tickets: any[] = [];\r\n  userDetails;\r\n\r\n  constructor(\r\n    private ticketService: TicketService,\r\n    private authService: AuthenticationService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // Get profile of current logged in user\r\n    this.authService.getUserProfile().subscribe(\r\n      res => {\r\n        this.userDetails = res[\"user\"];\r\n        this.refreshTicketList();\r\n      },\r\n      err => {}\r\n    );\r\n  }\r\n\r\n  refreshTicketList() {\r\n    // Get tickets with the same user Id of this currrent logged in user\r\n    this.ticketService.getTickets().subscribe(response => {\r\n      this.tickets = response\r\n        .json()\r\n        .filter(ticket => ticket.userId === this.userDetails._id);\r\n    });\r\n  }\r\n  //delete a movie\r\n  onDelete(ticketId) {\r\n    let objectId: number;\r\n    console.log(ticketId);\r\n\r\n    //get the ticket id based on the index of the ticket\r\n    objectId = this.tickets[ticketId]._id;\r\n    console.log(objectId);\r\n\r\n    //delete the specific ticket\r\n    this.ticketService.deleteTicket(objectId).subscribe(response => {\r\n      // Refresh the ticket list after deletion or changes will not be displayed without reloading the page\r\n      this.refreshTicketList();\r\n\r\n      // console.log(\"Ticket is removed\");\r\n      // console.log(response.json());\r\n    });\r\n  }\r\n}\r\n","module.exports = \".btn {\\r\\n  margin: 10px;\\r\\n}\\r\\n\"","module.exports = \"<table *ngIf=\\\"userDetails\\\">\\r\\n  <div class=\\\"wrapper\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n\\r\\n      <!-- Welcoming message in card header -->\\r\\n      <div class=\\\"card-header\\\">\\r\\n        Welcome back, {{userDetails.firstName}} {{userDetails.lastName}}!\\r\\n      </div>\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <h3 class=\\\"card-title\\\">YOUR PROFILE</h3>\\r\\n        <ul class=\\\"list-group list-group-flush\\\">\\r\\n\\r\\n          <!-- Display user firstname -->\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>First Name: </label> {{userDetails.firstName}}</li>\\r\\n\\r\\n          <!-- Display user lastname -->\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>Last Name: </label> {{userDetails.lastName}}</li>\\r\\n\\r\\n          <!-- Display user email -->\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>Email: </label> {{userDetails.email}}</li>\\r\\n\\r\\n          <!-- Display user gender -->\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>Gender: </label> {{userDetails.gender}}</li>\\r\\n\\r\\n          <!-- Display user date of birth, pipe into long date format -->\\r\\n          <li class=\\\"list-group-item\\\">\\r\\n            <label>Date of birth: </label> {{userDetails.dob | date: 'longDate'}}</li>\\r\\n        </ul>\\r\\n        <div class=\\\"button\\\">\\r\\n\\r\\n          <!-- Button to log user out of their account -->\\r\\n          <button class=\\\"btn btn-secondary\\\" (click)=\\\"onLogout()\\\">Logout</button>\\r\\n\\r\\n          <!-- Button leading to Edit User Profile page/form -->\\r\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"clickToEditProfile()\\\">Edit Profile</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { AuthenticationService } from \"../../services/authentication.service\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: \"user-profile\",\r\n  templateUrl: \"./user-profile.component.html\",\r\n  styleUrls: [\"./user-profile.component.css\"]\r\n})\r\nexport class UserProfileComponent implements OnInit {\r\n  userDetails;\r\n\r\n  constructor(\r\n    private authService: AuthenticationService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.authService.getUserProfile().subscribe(\r\n      res => {\r\n        this.userDetails = res[\"user\"];\r\n      },\r\n      err => {}\r\n    );\r\n  }\r\n\r\n  // Method to logout: delete token and redirect user to login page\r\n  onLogout() {\r\n    this.authService.deleteToken();\r\n    this.router.navigate([\"/login\"]);\r\n  }\r\n\r\n  clickToEditProfile() {\r\n    this.router.navigate([\"/editprofile\"]);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\n\r\nimport { environment } from \"../../environments/environment\";\r\nimport { User } from \"../auth/user.model\";\r\nimport decode from \"jwt-decode\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthenticationService {\r\n  // Initialize a User object with empty properties\r\n  selectedUser: User = {\r\n    _id: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    gender: \"\",\r\n    dob: null,\r\n    isAdmin: false\r\n  };\r\n\r\n  user: User;\r\n\r\n  role;\r\n\r\n  noAuthHeader = { headers: new HttpHeaders({ NoAuth: \"True\" }) };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private url = environment.apiBaseUrl;\r\n\r\n  // httpMethods\r\n\r\n  // Register new user\r\n  // Link to api of register in userControl\r\n  registerUser(user: User) {\r\n    return this.http.post(this.url + \"/register\", user, this.noAuthHeader);\r\n  }\r\n\r\n  // Check user authentication\r\n  // Link to api authenticate in userControl\r\n  // require authentication credentials\r\n  login(authCredentials) {\r\n    return this.http.post(\r\n      this.url + \"/authenticate\",\r\n      authCredentials,\r\n      this.noAuthHeader\r\n    );\r\n  }\r\n\r\n  // need jwt in the header\r\n  // Get profile details of the current user\r\n  // Link to api of userprofile in userController\r\n  getUserProfile() {\r\n    return this.http.get(this.url + \"/userprofile\");\r\n  }\r\n\r\n  // Update profile details of the current user\r\n  // Link to api of editprofile in userController\r\n  updateUser(user: User) {\r\n    return this.http.put(this.url + \"/editprofile\", user);\r\n  }\r\n\r\n  //Helper Methods\r\n\r\n  // save token of current user inside local storage\r\n  setToken(token: string) {\r\n    localStorage.setItem(\"token\", token);\r\n  }\r\n\r\n  // get the token in local storage\r\n  getToken() {\r\n    return localStorage.getItem(\"token\");\r\n  }\r\n\r\n  // delete token inside local storage\r\n  deleteToken() {\r\n    localStorage.removeItem(\"token\");\r\n  }\r\n\r\n  // decode JWT token inside local storage\r\n  decodeToken() {\r\n    return decode(localStorage.getItem(\"token\"));\r\n  }\r\n  // Extract user payload from token\r\n  getUserPayload() {\r\n    var token = this.getToken();\r\n    if (token) {\r\n      // payload is the 2nd element (hence id = 1) in the array after splitting the token\r\n      var userPayload = atob(token.split(\".\")[1]);\r\n      return JSON.parse(userPayload);\r\n    } else return null;\r\n  }\r\n\r\n  // Check if current user is already logged in\r\n  isLoggedIn() {\r\n    var userPayload = this.getUserPayload();\r\n    // check if jwt expiration time is over or not\r\n    if (userPayload) return userPayload.exp > Date.now() / 1000;\r\n    else return false;\r\n  }\r\n\r\n  // Check if the current user has role of admin\r\n  isAdmin() {\r\n    this.role = this.decodeToken().admin;\r\n    return this.role;\r\n  }\r\n\r\n  // Check the status of user role\r\n  // Purpose: display appropriate links in the navigation bar\r\n  displayAdmin() {\r\n    if (this.isLoggedIn() && this.isAdmin()) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Http } from \"@angular/http\";\r\nimport { environment } from \"../../environments/environment\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class MoviesService {\r\n  constructor(private http: Http) { }\r\n\r\n  private url = environment.apiBaseUrl + \"/movies\";\r\n\r\n  // get all the movies \r\n  getMovies() {\r\n    return this.http.get(this.url);\r\n  }\r\n\r\n  // get the movie by its object id\r\n  getMoviesById(_id) {\r\n    return this.http.get(this.url + \"/\" + _id);\r\n  }\r\n\r\n  //post a new movie\r\n  createMovies(movie) {\r\n    return this.http.post(this.url, movie);\r\n  }\r\n\r\n  //update a movie's status\r\n  updateMovies(movie) {\r\n    return this.http.put(this.url + \"/\" + movie._id, movie);\r\n  }\r\n\r\n  //delete a movie by its object id\r\n  deleteMovies(_id) {\r\n    return this.http.delete(this.url + \"/\" + _id);\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../environments/environment\";\r\nimport { Http } from \"@angular/http\";\r\nimport { MovieBooking } from \"../components/book-movies/book-movies.model\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class TicketService {\r\n  tickets: MovieBooking[];\r\n  constructor(private http: Http) {}\r\n\r\n  // When user book a ticket,\r\n  // ticket information is saved to the database\r\n  // a notification message is sent to user's email\r\n  // Link to api in ticketController\r\n  bookMovie(booking: MovieBooking) {\r\n    return this.http.post(environment.apiBaseUrl + \"/book\", booking);\r\n  }\r\n\r\n  getTickets() {\r\n    return this.http.get(environment.apiBaseUrl + \"/tickets\");\r\n  }\r\n\r\n  deleteTicket(_id) {\r\n    return this.http.delete(environment.apiBaseUrl + \"/\" + _id);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  // Run in the cloud\r\n  // apiBaseUrl:\r\n  //   \"http://ec2-18-236-193-77.us-west-2.compute.amazonaws.com:3000/api\",\r\n\r\n  // Run locally\r\n  apiBaseUrl: \"http://localhost:3000/api\"\r\n};\r\n\r\n/*\r\n * In development mode, for easier debugging, you can ignore zone related error\r\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\r\n * below file. Don't forget to comment it out in production mode\r\n * because it will have a performance impact when errors are thrown\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\n\r\nimport { AppModule } from \"./app/app.module\";\r\nimport { environment } from \"./environments/environment\";\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}